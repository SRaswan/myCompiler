(fun (our_code_starts_here energy) (if (<= energy 0) -14 (block (set! energy (- energy 1)) (- (block (add1 (* -98 "energy")) 22 "energy") (add1 (let ((x (set! energy -21)) (a (set! energy true)) (h (block false "a" false))) 15))))))
(fun (main energy e) (if (<= energy 0) false (block (set! energy (- energy 1)) (< (if (let ((j (let ((f false) (g true)) 59)) (y (< "j" "energy")) (h "j")) (set! energy "e")) (set! energy (let ((z true) (e "z") (f "e")) 85)) (let ((b (block -4 false)) (z (= "b" "b"))) "energy")) (let ((f (let ((b false) (c (let ((b "b") (f -99)) "energy")) (d (<= 46 57))) (block 46 true false))) (b (> (block "e" "f" false "e" "e") (set! f 90))) (j (block (let ((i true)) -67) (set! energy "b")))) (* (* 50 "energy") (fun4 "e")))))))
(fun (fun1 energy z c y d) (if (<= energy 0) -66 (block (set! energy (- energy 1)) (set! y (+ (+ (+ -68 "z") (- -32 -90)) 21)))))
(fun (fun2 energy x g d a) (if (<= energy 0) 77 (block (set! energy (- energy 1)) (- (- (block (let ((c -58) (j -84)) "a") (let ((h "g")) "x")) (let ((a (< "a" -54)) (x (fun5 -95 "a"))) (set! x "x"))) (block (fun2 (fun1 "energy" false false "d" "g") (> 19 "x") true (+ 86 "energy") -40) (let ((c (- "energy" 31)) (f (let ((h true) (y "energy")) "d"))) (block "a" false "d" 12)) (+ (let ((g "d")) "a") (let ((g "d") (i "x") (x true)) "i")))))))
(fun (fun3 energy y h i z e j d f) (if (<= energy 0) -99 (block (set! energy (- energy 1)) (let ((y (block (let ((a (<= "energy" -18)) (y (let ((y "f")) "energy")) (b (* "energy" 23))) (- 88 93)) (fun6 (block 70 38) (let ((h true)) true) -90 (block "y" "d" "i" false) (if -7 "d" false) (let ((x "i") (a false) (i "y")) "y") (let ((j false)) true)) -50 (>= (- -54 11) -60)))) (set! j (block (set! energy "d") (let ((c 27) (y "d") (z "y")) "h") (>= 54 -75) "energy" (set! j "h")))))))
(fun (fun4 energy) (if (<= energy 0) 74 (block (set! energy (- energy 1)) (* (let ((a (<= (set! energy "energy") (* -49 -54)))) (set! a (- "energy" -98))) (let ((f (= (add1 -79) (- 99 -62))) (d (let ((d (let ((y "f") (f "y")) true))) (sub1 55))) (j (set! f (set! f "energy")))) (block (let ((a -93) (j "a") (y "j")) true) (block true true) (fun2 "d" "f" true "energy" 46)))))))
(fun (fun5 energy a) (if (<= energy 0) 47 (block (set! energy (- energy 1)) (block (< (block (set! energy false) (set! energy "a")) (block (add1 62))) (let ((e (fun6 (+ 93 "energy") (let ((e true) (j "e")) false) (block "energy") (block true -60 82 true false) (isbool false) "a" (let ((x false)) "x"))) (g (let ((z (fun6 "energy" false "energy" false true "a" false)) (e false)) "energy"))) (<= (- "e" "e") (let ((y "energy") (b "y")) "b"))) (add1 (set! energy (+ "energy" "a"))) (add1 (sub1 (let ((j true)) -97))) (let ((f (set! energy (block true))) (c (isnum (block "f" true)))) (if (set! f true) (fun3 2 "a" false 32 "f" true "c" "energy" false) (set! c -13)))))))
(fun (fun6 energy h d x a f z) (if (<= energy 0) false (block (set! energy (- energy 1)) true)))
(fun (fun7 energy c) (if (<= energy 0) false (block (set! energy (- energy 1)) true)))
(let ((loop_var_21 (fun3 -88 32 true -92 false true false -58 true))) (loop (if (< loop_var_21 (+ (fun3 -88 32 true -92 false true false -58 true) 21)) (block (set! loop_var_21 (+ loop_var_21 1))) (break true))))