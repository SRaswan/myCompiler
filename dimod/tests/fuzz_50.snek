(fun (our_code_starts_here energy c f i g y) (if (<= energy 0) -49 (block (set! energy (- energy 1)) "energy")))
(fun (main energy d b a g c) (if (<= energy 0) true (block (set! energy (- energy 1)) (let ((y (let ((b (let ((d (sub1 "energy")) (j (isnum true))) (let ((x -55) (a -75)) "j"))) (x (block (block false 35 60) (if false 16 "energy") (>= 57 -60))) (a (> (+ "energy" "energy") (- 11 "energy")))) (let ((a 78) (h (block -85 true "a"))) (if -16 false true)))) (d (let ((a (isbool (set! c false))) (j (block (let ((j 28) (b "y") (x -47)) "b") (< "d" -75) (= "c" "c") true))) (set! j (let ((x "j") (g true) (z "g")) "energy")))) (h (block (let ((z (set! y -77))) (let ((d true) (c "g")) "a")) (add1 (- "energy" -47)) (isbool (block 17 false))))) (<= (set! d (set! a "c")) (let ((z (* -15 "energy"))) (let ((e true) (b -84) (h "energy")) "z")))))))
(fun (fun1 energy h a c g j d z x) (if (<= energy 0) 37 (block (set! energy (- energy 1)) (* (block (let ((x "energy") (g (set! c "d")) (j (let ((f "g")) "a"))) true) (let ((d (block "c" "d" 19 67 "d")) (j (block true "z" "x" 97)) (h (add1 "z"))) (add1 "h")) (* (- -75 "energy") (fun1 "a" "c" -95 false true "d" "c" true "d"))) (block (let ((i (set! h "z")) (a (if false -37 -85))) (- "h" "z")) (- -73 (+ "h" -74)))))))
(fun (fun2 energy g f) (if (<= energy 0) 59 (block (set! energy (- energy 1)) (set! energy (+ (set! f (block "energy")) (* (* 82 "g") (let ((i "g") (e "g")) "e")))))))
(fun (fun3 energy x y b z e c i) (if (<= energy 0) false (block (set! energy (- energy 1)) (block (- "x" (* (our_code_starts_here "x" "y" "y" "e" "energy" true) (if "y" -88 -16))) (> (* (block "e" -42 "x") (+ "z" -85)) (let ((y (fun8 -35))) (our_code_starts_here -21 "y" "y" "y" -98 true))) (set! b (let ((j (= false true))) -67)) (- (set! i (+ -23 "e")) (fun1 (block false "e" "e") (+ 17 "z") (let ((i -83)) "energy") (block false) (isnum true) (set! z true) "x" (block true "i" "y") (isnum "c"))) (set! i (block (>= "e" "x") (let ((i "b")) -35) (isbool "y") (set! z false)))))))
(fun (fun4 energy) (if (<= energy 0) false (block (set! energy (- energy 1)) (if (block (let ((a (let ((c "energy") (a false) (g "c")) "a"))) false) (isbool (>= 49 "energy")) (sub1 (let ((h true) (a true)) 14)) (isbool (>= "energy" 37))) (isnum (>= (+ 20 -10) (let ((j "energy") (e -54) (c -18)) "c"))) (<= (set! energy (let ((h "energy")) "h")) -4)))))
(fun (fun5 energy i z h j a x) (if (<= energy 0) true (block (set! energy (- energy 1)) (let ((a (block "j" (block (sub1 -7) (let ((a "energy") (x "a") (g -93)) true) (let ((j -50) (a "h") (h -94)) false)) (let ((d (set! z "a")) (g (* "energy" "i")) (y (add1 "g"))) "j") (let ((j true)) (<= "energy" "i")))) (x (set! x (let ((b (main 73 "j" "j" "i" "energy" "h")) (e (< "energy" "i"))) (<= -70 -83))))) (let ((a (let ((a "a") (e (let ((e 74) (d 55)) "e")) (d true)) (block "i"))) (x (= -35 (sub1 -94))) (d (let ((j (> 80 "i")) (d (if false 70 -17)) (c (block "z" true -85))) (set! d true)))) (block (isbool true) (fun4 "i") (block false) (let ((d "h") (b "i")) "j") (>= "i" "energy")))))))
(fun (fun6 energy g h i x j c) (if (<= energy 0) true (block (set! energy (- energy 1)) (< (block (block (+ "g" -81) (<= "x" "g")) (+ (set! j 16) (let ((a "c") (d -22)) "energy")) (* (set! i -35) (let ((f "i") (d -100) (j "d")) 8))) (set! g (add1 (fun7 "g" "j" "h")))))))
(fun (fun7 energy a y) (if (<= energy 0) 5 (block (set! energy (- energy 1)) (let ((b (* (* (sub1 "energy") (- -25 55)) (fun7 (fun2 24 false 47) (set! energy "y") (set! energy false))))) "a"))))
(fun (fun8 energy) (if (<= energy 0) false (block (set! energy (- energy 1)) (let ((c (isbool (isnum (let ((j 13) (y false) (b "energy")) true)))) (i (+ (set! energy (let ((g "energy") (b "g")) -65)) (let ((y (let ((z "energy")) true)) (b (>= "energy" "energy")) (g (let ((g false)) 58))) (let ((x true) (j true)) "g"))))) (set! i (let ((a (let ((g "i")) "i")) (j (let ((j true) (b -47)) false)) (f (let ((g "c") (z -10) (e "g")) "a"))) (block -82 "energy" false)))))))
(let ((y (isbool (<= (* 33 (block (let ((loop_var_103 (block 8 13 true false -78))) (loop (if (> loop_var_103 (- (block 8 13 true false -78) 103)) (block (set! loop_var_103 (- loop_var_103 1))) (break "loop_var_103")))) (let ((j (* (- -61 34) (* 36 -39))) (h (let ((loop_var_40 "j")) (let ((loop_var_40 -80)) (loop (if (> loop_var_40 (- -80 40)) (block (set! loop_var_40 (- loop_var_40 1))) (break "j")))))) (z (let ((i (isnum true))) (* "j" "h")))) (- (block -40 false -85 "j" "z") (let ((e false) (f 80) (x "e")) "z"))) (let ((f (block 52)) (y (let ((loop_var_121 "f")) (let ((loop_var_50 "f")) (loop (if (> loop_var_50 (- "f" 50)) (block (set! loop_var_50 (- loop_var_50 1)) 63 "f") (break "loop_var_50")))))) (g (let ((a (let ((j false) (d "y") (z "j")) input)) (e true)) (isbool true)))) (fun1 (- "y" -32) (sub1 "y") -56 false (let ((loop_var_30 4)) (let ((loop_var_28 58)) (let ((loop_var_122 "y")) (loop (if (< loop_var_122 (+ "y" 122)) (block (set! loop_var_122 (+ loop_var_122 1)) "g") (break "g")))))) (let ((loop_var_138 -19)) (loop (if (< loop_var_138 (+ -19 138)) (block (set! loop_var_138 (+ loop_var_138 1)) (set! g "g") (set! g "g") (set! f false) true) (break "g")))) (let ((i "g") (c false)) "f") (let ((f true) (h false) (a -71)) "f") true)) (let ((y (if (let ((e false) (z 66)) true) (let ((b 90) (c "b")) "b") (let ((x true) (g -36) (b "g")) -49))) (e (let ((loop_var_7 58)) (loop (if (> loop_var_7 (- 58 7)) (block (set! loop_var_7 (- loop_var_7 1)) -3 -60) (break "y"))))) (h (set! y -43))) (block (let ((c true) (y "e")) -99) -5 (let ((e false) (j 32)) "e") (<= -52 "e"))) (block false (sub1 (* -85 -62))))) (let ((y (* (our_code_starts_here (if (= 80 -93) (if -5 -43 -1) -96) (let ((loop_var_122 -12)) (loop (if (> loop_var_122 (- -12 122)) (block (set! loop_var_122 (- loop_var_122 1))) (break true)))) (<= 44 (* 80 29)) (if (let ((loop_var_13 91)) (let ((loop_var_141 -26)) (loop (if (< loop_var_141 (+ -26 141)) (block (set! loop_var_141 (+ loop_var_141 1)) false true) (break input))))) (let ((c 65) (j false)) 27) (let ((c -45)) "c")) (- -97 (* 63 12)) (let ((d (fun3 63 true 38 -80 -96 true -91 54)) (f (+ 81 "d"))) (let ((loop_var_159 "d")) (loop (if (> loop_var_159 (- "d" 159)) (block (set! loop_var_159 (- loop_var_159 1)) (set! f true) (set! f true) (set! d true)) (break false)))))) (* (if (let ((h true) (a input)) -60) (let ((g 27) (h false)) "g") (add1 -44)) (let ((g (let ((loop_var_147 79)) (loop (if (> loop_var_147 (- 79 147)) (block (set! loop_var_147 (- loop_var_147 1))) (break 84)))))) (block "g"))))) (f (let ((loop_var_80 (+ 29 -29))) (loop (if (> loop_var_80 (- (+ 29 -29) 80)) (block (set! loop_var_80 (- loop_var_80 1)) (set! y (< (sub1 "y") (let ((g -59)) "g"))) (set! y (set! y (if -29 true true)))) (break (if (isbool false) (block true) true)))))) (a (>= (let ((a (sub1 (* "y" -4)))) (fun1 (block "y") (block -30 46 -42 "y") (block -43 "y" false 58) (let ((e "f") (z -25) (y "y")) "f") (if false true "f") (block false "f" "a" "f") (sub1 14) (set! f "f") (let ((z true) (c "y")) "z"))) (if false (* (add1 -92) (let ((y -22) (f 69) (h "y")) "f")) 17)))) (let ((loop_var_73 (let ((d "a") (y "d")) 76))) (loop (if (< loop_var_73 (+ (let ((d "a") (y "d")) 76) 73)) (block (set! loop_var_73 (+ loop_var_73 1))) (break 62))))))))) (let ((d (> (block (let ((g true) (i (let ((f (isbool (block -78 "y" 46 input)))) (let ((loop_var_156 80)) (loop (if (> loop_var_156 (- 80 156)) (block (set! loop_var_156 (- loop_var_156 1)) (set! f "g")) (break "g"))))))) (block (isnum (let ((loop_var_142 -6)) (let ((loop_var_29 21)) (loop (if (> loop_var_29 (- 21 29)) (block (set! loop_var_29 (- loop_var_29 1)) (set! i true)) (break true)))))) (let ((z "y")) (let ((z false) (a 58)) "a")) (let ((loop_var_156 9)) (loop (if (< loop_var_156 (+ 9 156)) (block (set! loop_var_156 (+ loop_var_156 1)) -54) (break "loop_var_156")))) (let ((loop_var_121 -22)) (loop (if (< loop_var_121 (+ -22 121)) (block (set! loop_var_121 (+ loop_var_121 1)) (set! i 48) (set! y 73) 47) (break -60))))))) (- (* -19 (let ((y (let ((a (> -36 -81))) (if "y" -90 91))) (d (let ((c "y") (e (block "y" "y"))) (let ((d true) (g "d")) 87)))) (sub1 (* "y" 94)))) (+ (sub1 (let ((c (sub1 -54))) (block true -64))) (sub1 (let ((c (set! y "y"))) (let ((g false) (i -62)) "i")))))))) (block (+ 78 (block (let ((b false) (a (let ((loop_var_108 68)) (let ((loop_var_100 -9)) (loop (if (< loop_var_100 (+ -9 100)) (block (set! loop_var_100 (+ loop_var_100 1)) (set! y "y")) (break true))))))) (block (let ((loop_var_115 7)) (loop (if (< loop_var_115 (+ 7 115)) (block (set! loop_var_115 (+ loop_var_115 1)) (set! a input) (set! b "b") "b" false "b") (break false)))) (isbool "b") (let ((i false)) true) (block "a" "y" 43 61) (let ((loop_var_135 82)) (let ((loop_var_183 -23)) (loop (if (> loop_var_183 (- -23 183)) (block (set! loop_var_183 (- loop_var_183 1)) "y" false) (break input))))))) (- (sub1 (fun7 92 -13 "y")) 77) 98 (+ (fun7 (let ((j -55) (x 3)) "j") (let ((loop_var_175 59)) (loop (if (> loop_var_175 (- 59 175)) (block (set! loop_var_175 (- loop_var_175 1)) 57 80) (break -58)))) (< 5 4)) 36))) "y" (* (sub1 (let ((loop_var_55 (set! d 88))) (let ((loop_var_86 (- -45 -63))) (let ((loop_var_9 (sub1 -98))) (loop (if (< loop_var_9 (+ (sub1 -98) 9)) (block (set! loop_var_9 (+ loop_var_9 1))) (break (* "loop_var_9" 6)))))))) (block (set! y (if (block -44 false) (+ -20 -58) 36)) (block (let ((loop_var_57 56)) (let ((loop_var_183 -93)) (loop (if (> loop_var_183 (- -93 183)) (block (set! loop_var_183 (- loop_var_183 1)) (set! d 52) (set! y -35)) (break 6)))))) (- (set! y (add1 -18)) (let ((f (let ((z -35) (e 56)) -37)) (c (let ((x -33)) "f")) (a (set! y "d"))) (let ((a "d")) 59))) (set! y (> (set! y -31) (let ((f 57) (e true)) "f"))) (add1 (* (let ((f "d")) -16) (block -70))))) (let ((loop_var_178 (- -90 5))) (loop (if (< loop_var_178 (+ (- -90 5) 178)) (block (set! loop_var_178 (+ loop_var_178 1))) (break (< (block (if true false "y") (+ "loop_var_178" -41) (set! y -73) (set! loop_var_178 "d") (- -80 "loop_var_178")) (sub1 (let ((x "loop_var_178") (g "y") (e true)) 42))))))))))