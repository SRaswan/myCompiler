(fun (our_code_starts_here energy z g h c b e x) (if (<= energy 0) 7 (block (set! energy (- energy 1)) (let ((f (- (let ((g (let ((j "x")) "e"))) (let ((j -46)) -77)) (let ((a (block "b" 74 -99))) (- "energy" "z")))) (x (= (let ((a (<= "x" -81)) (y (our_code_starts_here -30 "h" true false "f" "c" -79 "a")) (b (set! z true))) (<= 62 36)) (isnum (let ((e "g") (i "h")) "e"))))) (+ (set! h (* "x" -82)) "z")))))
(fun (main energy b y c d a z h) (if (<= energy 0) false (block (set! energy (- energy 1)) true)))
(fun (fun1 energy d f h x g c j z) (if (<= energy 0) false (block (set! energy (- energy 1)) (let ((d (* (let ((c (if "j" false true))) (block false true -97 "energy")) -85)) (j (add1 (+ (let ((i "c")) "g") (block -96)))) (f (block "energy" (let ((x "h") (y (- "d" "energy"))) (let ((f "y") (d "c")) 19))))) (< (block "x" "c") (sub1 (let ((a "j") (x false)) "f")))))))
(fun (fun2 energy i x y e b a h j) (if (<= energy 0) true (block (set! energy (- energy 1)) (set! i (fun1 (- (sub1 "i") (- -28 "i")) (let ((e (set! b false))) (let ((a "e") (x "e") (f "x")) true)) (let ((c -82) (z (+ "a" -15)) (f (fun1 "z" "y" "y" "y" "c" "c" false "x" true))) (= "x" true)) (< (let ((z "energy")) -47) (let ((e false) (y "x")) "a")) (* 82 (our_code_starts_here -89 "h" "x" true "j" false "i" false)) (set! a (set! j "a")) (>= (block 93 "y" 77) (let ((d "energy") (i "energy") (c false)) "i")) (block (= -78 "energy") (* "energy" "a") (< -83 "energy") (set! y "x")) (block "h" (< -24 78)))))))
(let ((a (let ((loop_var_93 (* 22 45))) (loop (if (< loop_var_93 (+ (* 22 45) 93)) (block (set! loop_var_93 (+ loop_var_93 1)) (isbool (let ((y (let ((x input) (c -81)) (block "x" (fun1 -55 false true input "c" -10 false "x" "x")))) (j (let ((d (block (* -100 52) (block 23 "y" false true))) (f (isbool (let ((z -33) (d "z") (a true)) false)))) (main (let ((a "y") (x true) (y -34)) 37) (isnum false) (block false true 79) (add1 17) (set! f -29) false (block 95 false true) (set! f 1))))) (let ((y (let ((i (let ((x "y") (i "y") (f false)) 94))) (if false -15 -35))) (z (block (isbool input) (+ -13 "y")))) false))) (= (let ((g (* (block (<= 94 28) (main -22 false -20 4 76 false false -76) (add1 -83)) (if -80 (let ((i true) (f 10)) -13) (- -63 57)))) (j (isnum (block (- 92 -59) false (let ((d false) (b "d")) true) (set! g input))))) (set! g (+ 58 (- "g" "g")))) (- (block (> (block true -73 -94 -58) (our_code_starts_here 88 false false true -89 true -70 true)) (block (let ((x false) (d 13) (e "d")) "x") (* 39 -72) (block true true false true) (< 16 45) (> -69 13)) (let ((d (our_code_starts_here -64 false false false -72 false -62 true)) (a (sub1 -43))) (set! a "d")) (let ((h (let ((i -62)) 71)) (d (let ((z false) (c 65)) true))) (- "h" -48))) (let ((h (let ((e (block -67 -28)) (j (our_code_starts_here 40 true false true "e" false -6 false)) (g (let ((j input)) "e"))) (let ((d 97) (i "j")) "i"))) (e "h") (z (> (let ((i false) (d -65)) -19) (our_code_starts_here -48 false "e" "e" 71 "h" 96 true)))) 5)))) (break (let ((c (>= (* (add1 (let ((h -45) (z "loop_var_93")) -70)) (let ((j (< "loop_var_93" "loop_var_93"))) (set! j "loop_var_93"))) (* -63 (set! loop_var_93 -48)))) (z (block (if (let ((a (let ((f "c") (d 85)) true)) (f (set! loop_var_93 false)) (e (+ -70 51))) (block false "a" "loop_var_93")) false (let ((d (isbool false))) true)) (main (set! c (add1 "loop_var_93")) (block (set! loop_var_93 -81) (> "loop_var_93" "loop_var_93")) (set! loop_var_93 (let ((d false) (a input) (i 23)) "loop_var_93")) (let ((y (if 36 -65 84)) (d (set! loop_var_93 "y")) (c (let ((f -82)) -46))) (set! loop_var_93 -79)) (block (set! loop_var_93 "loop_var_93") (block "loop_var_93" -14 "c" 12 "loop_var_93")) (block -41 (* -84 "loop_var_93") (let ((f 66) (z -8) (d "f")) -47) (let ((h "loop_var_93") (g "loop_var_93")) "c")) (set! c (set! c "c")) (* -93 (set! c "loop_var_93"))))) (x "c")) (isbool (let ((f (= -82 (if "loop_var_93" 71 -87))) (x (our_code_starts_here (let ((f false) (a "loop_var_93")) -10) (block "loop_var_93" "x") (fun1 -67 "x" true true "loop_var_93" "loop_var_93" "c" false true) (let ((e -58)) true) (block "loop_var_93") (fun2 "loop_var_93" true false "f" false -28 false -59 56) (let ((g "loop_var_93") (f "c") (c -38)) "c") (let ((y false)) "x")))) (set! loop_var_93 (block "loop_var_93" 30 "f")))))))))) (y (= (set! a (+ (* (* (let ((f "a")) (+ -38 5)) -67) (block (- (+ -79 67) (let ((loop_var_44 45)) (let ((loop_var_125 11)) (loop (if (> loop_var_125 (- 11 125)) (block (set! loop_var_125 (- loop_var_125 1)) (set! a -60) (set! a -21) (set! a 59) 76 84 -7) (break -65)))))))) (add1 (let ((x (block (block -94 "a" -81 false "a") (set! a "a"))) (e (let ((h (let ((y -73)) false)) (e (let ((loop_var_89 -53)) (let ((loop_var_2 34)) (loop (if (< loop_var_2 (+ 34 2)) (block (set! loop_var_2 (+ loop_var_2 1)) 96) (break "loop_var_2")))))) (x (add1 "e"))) (- -41 "x"))) (b (block (let ((y "x")) 2) (sub1 "e") (let ((d "a")) -57) (main -71 "x" -35 86 "e" "a" "x" "e") (add1 -47)))) (if (let ((e 44) (g "b")) -45) (add1 "b") (let ((f "a") (z "b")) "e")))))) (add1 -56)))) (block (block (sub1 (+ (set! y (- (* -66 54) (+ 88 25))) (- (set! y (sub1 5)) (block (<= 30 -17) (let ((loop_var_110 54)) (let ((loop_var_198 -87)) (let ((loop_var_142 -71)) (loop (if (< loop_var_142 (+ -71 142)) (block (set! loop_var_142 (+ loop_var_142 1))) (break "loop_var_142")))))))))) (let ((j (* (add1 (+ (- 82 -5) (block "y" "y" "y" 42))) (let ((e (- (+ -86 -64) (add1 -90))) (b (isbool (block 66 89 false)))) (let ((g (block "e")) (i (let ((loop_var_77 -80)) (loop (if (< loop_var_77 (+ -80 77)) (block (set! loop_var_77 (+ loop_var_77 1))) (break false)))))) (let ((c "y") (g 62)) "g"))))) (d (isnum (set! a (>= (let ((b "j")) "b") -5)))) (i (sub1 4))) (block (* (block (let ((e "d") (c "d")) 59) (let ((f false)) -25) (let ((f -14) (j 81)) "f")) (let ((loop_var_145 "j")) (loop (if (> loop_var_145 (- "j" 145)) (block (set! loop_var_145 (- loop_var_145 1))) (break "i"))))) (let ((b (< (* "j" "i") (block "j"))) (i (isnum (> 18 66)))) "a"))) (let ((loop_var_15 (block "y" true -29 32))) (let ((loop_var_19 (+ 94 55))) (loop (if (< loop_var_19 (+ (+ 94 55) 19)) (block (set! loop_var_19 (+ loop_var_19 1)) (set! y (< (< (* -71 -19) (our_code_starts_here 15 false false false -30 "a" -74 input)) 10)) (- (<= (if true 32 7) (- 10 -59)) (let ((b (set! a -28)) (c (set! b "b")) (y (< "b" -50))) (* "c" 36))) (>= (let ((c (> -25 87)) (b (< 99 90))) (set! y -51)) (let ((e (let ((j 98) (c -8)) "a"))) (block -54 -26 "e" "a")))) (break (>= 20 (set! a (* 33 "loop_var_19")))))))) (<= (block (> 52 (let ((d (let ((h "a") (x 88)) "x")) (x (* -18 "d")) (i (add1 -32))) (add1 "d"))) (+ (our_code_starts_here (let ((loop_var_143 -18)) (loop (if (< loop_var_143 (+ -18 143)) (block (set! loop_var_143 (+ loop_var_143 1)) (set! y 33) (set! y 32)) (break -28)))) (block true) (set! a false) (let ((j -22) (z 73) (d "j")) true) (add1 75) (set! a input) 95 (< 9 90)) (set! y (add1 41))) (let ((x (let ((loop_var_111 -15)) (loop (if (> loop_var_111 (- -15 111)) (block (set! loop_var_111 (- loop_var_111 1)) -3 -69) (break "loop_var_111"))))) (j (sub1 "x")) (z (set! j (block "y" false "x")))) (* (block false true -97 true -14) (sub1 "x")))) 89) (block "y" (< "a" (let ((loop_var_15 -63)) (loop (if (< loop_var_15 (+ -63 15)) (block (set! loop_var_15 (+ loop_var_15 1)) (set! a (let ((a false)) "a"))) (break (<= 40 -93)))))) (sub1 (block (let ((z (* -47 -61)) (i (let ((z "z")) "z"))) (* -41 "z")) (< (- -63 -76) (- -85 60)))) (let ((y (<= (set! y (+ -86 42)) (* (our_code_starts_here 6 "a" true "a" 96 false -75 true) (block 100 77 80)))) (c (> (set! a (- -23 70)) (+ (+ 74 -85) (- -83 91)))) (h (let ((h (if (let ((d -12) (c -32)) -19) (>= 6 -100) (set! y true))) (a (* (let ((loop_var_26 42)) (loop (if (> loop_var_26 (- 42 26)) (block (set! loop_var_26 (- loop_var_26 1)) 88 5 34) (break "loop_var_26")))) (let ((loop_var_24 68)) (loop (if (> loop_var_24 (- 68 24)) (block (set! loop_var_24 (- loop_var_24 1)) 41 -59 0) (break -47)))))) (z (isbool (< 36 "a")))) (set! a (let ((y "a") (d true) (i 76)) false))))) (block (let ((a (block 64 -45 24 false false)) (b (let ((y true) (i "h")) -46)) (e (sub1 "b"))) "b") (* (- -92 -45) (set! y -13)) (- (let ((d "h") (e -61)) "a") (let ((b -8) (d false)) true)) (isbool (> -76 21)) (< (- -4 -96) -4)))))))