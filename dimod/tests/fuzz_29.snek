(fun (our_code_starts_here energy e f d b j c g z) (if (<= energy 0) -60 (block (set! energy (- energy 1)) (let ((c (block "g" (<= (set! g "z") (* "f" "f")) "f" (set! f (block true 88 -17 -50 48)) (fun3 (* "energy" 82) "z" (isnum "c") (fun2 59 17 25 "d" false -14 false) (main "energy" "z" 65 "g" "z" "f" true "z" true) true (>= 58 -5) (block -72 false 27 "e") (isbool "d"))))) (let ((i (= (< "e" 73) false))) (+ -63 (* "e" -58)))))))
(fun (main energy f g i b e c h x) (if (<= energy 0) true (block (set! energy (- energy 1)) (block (let ((j (let ((j (let ((f "b") (a "b")) false))) (main 21 10 "e" false "e" "c" "h" "e" "b"))) (d "energy") (e (isnum (let ((a true) (h "d")) "j")))) (* -37 (let ((d "e") (y true)) -31))) (let ((h (+ (set! h 52) (let ((i "h") (x "c")) -82))) (i (if (block false "e" false true "energy") (set! h -13) (sub1 "h")))) (set! i (set! x "energy"))) (block (set! h -79)) (>= (block "h" (block "x")) (let ((i (let ((h true) (f true)) false))) (add1 15))) (> (set! energy (let ((c 86)) -1)) (block (- -20 -84)))))))
(fun (fun1 energy b z e d h a g c) (if (<= energy 0) false (block (set! energy (- energy 1)) (= (if (let ((c (if true "energy" "z")) (i (let ((x 8) (h "h") (a 85)) true)) (g (isnum "g"))) (<= "energy" "b")) (set! h (block -3)) (set! energy (let ((y true)) "z"))) (* -47 (set! g (let ((h "g")) "b")))))))
(fun (fun2 energy g e f h a y) (if (<= energy 0) 96 (block (set! energy (- energy 1)) (set! a (block (isnum (set! f "a")) (if (* 69 46) (if "f" false "h") (let ((c true) (f 93) (h "c")) "h")) "y" 92)))))
(fun (fun3 energy d b x f i e h g) (if (<= energy 0) -48 (block (set! energy (- energy 1)) (block (< (set! b (block "i" false 57 -55)) (+ (block "f") (block "energy"))) (let ((e (let ((d (set! i "f")) (h (>= -98 -17)) (j (<= "energy" -100))) "x"))) (sub1 (- "d" -42))) "f"))))
(fun (fun4 energy d x c) (if (<= energy 0) true (block (set! energy (- energy 1)) (let ((e (set! c (let ((b (- "d" -94)) (y (let ((b true) (z "x")) "b")) (g "x")) (let ((h false)) "g"))))) (block (block (if 47 -77 "d") (+ "energy" "c") (set! c true)) (let ((i (<= "c" -12)) (j (block "x" "d" 32 "energy" "x")) (h (- 56 "c"))) (let ((a "j") (i -37)) true)) (let ((f (let ((z 93) (e true)) -40)) (a (isbool "e")) (d (let ((g -20)) -70))) (set! energy "a")))))))
(block (let ((i (add1 (fun3 (* (- (add1 (block input 61)) (add1 (add1 -69))) (+ (* (let ((b true) (z -71) (g true)) "z") (block 53)) (let ((i (block false)) (h (block false true "i")) (f (block "h" "h"))) (* 97 98)))) (- 56 -34) true (let ((j false) (a (<= (let ((b (sub1 -40)) (z (< "b" "b"))) (let ((loop_var_2 "b")) (loop (if (> loop_var_2 (- "b" 2)) (block (set! loop_var_2 (- loop_var_2 1)) (set! j "b") (set! b "b") (set! b -74) "b" "b" 73) (break "loop_var_2"))))) (* (+ 66 -61) (add1 -3))))) (- (set! a (set! j 65)) (block (<= 71 -19) (let ((e -6) (b "a") (h "j")) -15)))) (block (sub1 (let ((loop_var_181 28)) (let ((loop_var_157 19)) (let ((loop_var_34 25)) (loop (if (< loop_var_34 (+ 25 34)) (block (set! loop_var_34 (+ loop_var_34 1))) (break "loop_var_34"))))))) (block 88 (let ((x (let ((loop_var_137 -42)) (loop (if (> loop_var_137 (- -42 137)) (block (set! loop_var_137 (- loop_var_137 1))) (break -98))))) (c (block "x" true "x"))) (let ((loop_var_79 -18)) (let ((loop_var_90 67)) (let ((loop_var_106 "c")) (loop (if (< loop_var_106 (+ "c" 106)) (block (set! loop_var_106 (+ loop_var_106 1))) (break false))))))))) (>= (block (<= (block false false 94) (let ((g -67) (e false) (j 10)) 59)) (let ((x 95) (g (let ((x -51) (f false)) -62))) -37)) (+ (block (block 79) (if false -32 -92)) (let ((z (if -6 -78 -4))) (+ -56 26)))) (block (let ((loop_var_99 (- 62 -87))) (let ((loop_var_16 (* -45 67))) (loop (if (< loop_var_16 (+ (* -45 67) 16)) (block (set! loop_var_16 (+ loop_var_16 1)) (- -78 -94) (+ 64 12)) (break (fun2 81 -18 -36 false false "loop_var_16" false)))))) (let ((d (block (let ((a -40)) 14) (let ((b true) (i 99)) input) (<= -26 86) (let ((i false)) 41))) (y (let ((g (let ((a -21) (d "a")) true)) (y (* "d" "d")) (h (- -77 81))) (- 29 "d")))) (let ((b (set! y 13)) (d (* -98 -5)) (f (* -81 1))) (block false)))) (block (- (fun3 (let ((e 69) (f false) (d "f")) "e") (+ -37 79) (if -71 true true) (+ 7 85) (let ((loop_var_162 -48)) (loop (if (< loop_var_162 (+ -48 162)) (block (set! loop_var_162 (+ loop_var_162 1))) (break true)))) (let ((loop_var_190 96)) (loop (if (< loop_var_190 (+ 96 190)) (block (set! loop_var_190 (+ loop_var_190 1))) (break true)))) (isnum false) (let ((loop_var_67 95)) (let ((loop_var_85 -38)) (let ((loop_var_172 -20)) (loop (if (> loop_var_172 (- -20 172)) (block (set! loop_var_172 (- loop_var_172 1))) (break 88)))))) (let ((f -60) (d -24) (z false)) true)) (block (block true) (isnum false) (- 2 74))) (let ((g (let ((loop_var_181 -41)) (loop (if (< loop_var_181 (+ -41 181)) (block (set! loop_var_181 (+ loop_var_181 1))) (break false)))))) (< (let ((loop_var_132 79)) (loop (if (> loop_var_132 (- 79 132)) (block (set! loop_var_132 (- loop_var_132 1)) (set! g -91) (set! g 81)) (break -3)))) (let ((x 96) (e 16)) -54))) (block (>= (+ -98 37) (- 95 -14)) (let ((loop_var_64 -9)) (loop (if (< loop_var_64 (+ -9 64)) (block (set! loop_var_64 (+ loop_var_64 1)) -69 -38 -46) (break 23)))) (if (block -78 true -78) (- -93 -75) (sub1 82))) (sub1 (* (block true 73 21 input -51) -11))) (block (let ((f (< (add1 59) (let ((x false) (c false)) 65))) (x (let ((i (let ((y true)) -54)) (j (<= 13 -61)) (d (let ((c -39) (e "j")) 26))) (block "j")))) (block (let ((y 70)) -87) input (let ((loop_var_65 25)) (loop (if (> loop_var_65 (- 25 65)) (block (set! loop_var_65 (- loop_var_65 1)) (set! f -29) (set! f -35) (set! x -48)) (break "loop_var_65")))))) (>= (- (block true 49 96) -30) (if (let ((a -52) (i true) (y "a")) "a") (+ 53 -23) (let ((loop_var_110 39)) (loop (if (< loop_var_110 (+ 39 110)) (block (set! loop_var_110 (+ loop_var_110 1))) (break 44))))))))))) (let ((loop_var_112 "i")) (let ((loop_var_188 -44)) (loop (if (> loop_var_188 (- -44 188)) (block (set! loop_var_188 (- loop_var_188 1))) (break (isnum (>= (let ((z (<= -84 -33)) (f (= "z" false)) (h (let ((g "loop_var_188") (j "f") (x true)) "i"))) (block -51)) (add1 (let ((h false) (c -81) (j "c")) "c")))))))))))