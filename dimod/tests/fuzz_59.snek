(fun (our_code_starts_here energy y a j d x) (if (<= energy 0) -69 (block (set! energy (- energy 1)) (let ((y (let ((c (block (block "y") (if "energy" true true) (let ((f true) (j "d") (c "y")) "j") false (>= 84 -16))) (h (* (block true "energy" -61) (set! a 59))) (b (let ((a (let ((x -68) (a "c") (g "a")) -91)) (b (fun2 "j" true "c" "j" "c" "d" "c"))) (* "energy" 64)))) (let ((y (if "h" 94 "b"))) (add1 "h")))) (e (our_code_starts_here (let ((e (let ((e true) (d true) (f "y")) 42)) (f (block 34)) (i (- "y" "energy"))) 82) (block (>= "y" -75) (* 72 "y") (fun3 61 "energy" "j" true false false) true) (let ((c (> -11 26)) (y (block 31)) (a (let ((z "y") (b -50)) 93))) (if 0 "y" "y")) (set! x (set! d true)) (let ((d true) (e (block "a")) (f (let ((b "j") (c "b")) "d"))) (block "x" 91 -60 "d" "f")) (if (let ((x "y") (z "x")) false) (let ((e 80)) 25) (set! energy -67)))) (c (let ((b (set! a "energy")) (i 89)) (block (sub1 "j") (block false) (+ 96 "y"))))) 74))))
(fun (main energy z y a) (if (<= energy 0) false (block (set! energy (- energy 1)) (isnum (> (+ (block -61 -21 false "energy") (let ((e "a")) "y")) (set! a (block -38 "energy")))))))
(fun (fun1 energy y h d a e j) (if (<= energy 0) false (block (set! energy (- energy 1)) (> (let ((h (> (* 43 "y") (add1 "e")))) (add1 (let ((e false) (j "h") (a true)) "h"))) (sub1 (+ (let ((y -69) (j "j")) 7) (block true "e")))))))
(fun (fun2 energy c a y j x d) (if (<= energy 0) true (block (set! energy (- energy 1)) (isbool (isnum (>= (add1 "c") (set! y "energy")))))))
(fun (fun3 energy d h y e g) (if (<= energy 0) -9 (block (set! energy (- energy 1)) (let ((c (block (set! energy (- 13 "h"))))) (block (add1 (- -62 -44)))))))
(let ((loop_var_181 (let ((c false) (x false)) -21))) (loop (if (> loop_var_181 (- (let ((c false) (x false)) -21) 181)) (block (set! loop_var_181 (- loop_var_181 1)) true (isbool (block (= (our_code_starts_here (- (if false 3 88) (block -28 true 95)) (let ((h (+ 95 -88)) (z (isnum true)) (e (let ((d "h") (f "z") (z 20)) false))) false) (if (let ((g false) (c true) (i "g")) -28) (let ((j false) (f 1)) 18) (fun3 -69 -21 -9 false true false)) (> (let ((b 80) (g -42)) "g") (* 74 -52)) (isnum (main 36 -23 true false)) (our_code_starts_here (let ((z 47) (j true)) "z") (>= -7 12) (let ((b -83) (i true)) 79) (fun1 -22 -90 true true -40 true -9) (<= 29 -38) (let ((d true)) -84))) (let ((z (* (block 72 -47 -66 6) 21))) "z")) false (<= (block (let ((f (isbool true)) (g (- -47 71)) (i (let ((b "g") (y 67)) "g"))) (- 19 "i"))) (block -48 (let ((y true) (j (if 51 30 -39))) (= 51 "j")) (if (- 77 -4) (let ((b 21)) false) false) (our_code_starts_here (let ((g false)) 13) (fun1 76 0 true false -50 true -12) -18 (= 12 -27) (let ((j 24)) true) (our_code_starts_here 73 false -22 true true -78)))))) (let ((g (our_code_starts_here (+ 0 (our_code_starts_here (our_code_starts_here (block true -47) (>= -7 -39) (let ((a false) (z false)) -81) (let ((a true) (h 33) (b "h")) true) (isbool true) (block 60 31 80 -89)) (let ((d -40) (j (sub1 "d"))) (block "j" true true)) (let ((f (let ((f 32) (b false)) "b")) (z true)) (* 26 -60)) (fun1 76 (sub1 -47) (= true false) (block -55 -21 true) (* 45 31) (= -2 -85) (add1 -72)) (= false (> -56 -9)) (block (let ((z false) (h "z")) -66) (sub1 -74)))) (block (let ((y (block (fun2 72 false false -58 false true true))) (h (block (if false false false))) (j -22)) (fun1 (fun3 "j" 10 -71 "y" "h" "y") (block -73) (isnum true) (let ((a false)) true) (set! y "j") (block input "h") (let ((h "y")) -89)))) (let ((y (block (block (fun3 -68 -30 -41 true true true) (+ -74 -78) (block true false -20 -69) (let ((a true)) "a") (block false 43 -44)) (add1 (let ((e true) (y false)) 25)) (let ((h (isbool true)) (c (>= 76 0))) (+ 3 -73)) (* (if -7 -85 -65) (our_code_starts_here 3 false 70 true false 54)) (let ((x (our_code_starts_here 68 false 52 false true -98))) (our_code_starts_here 43 false -43 "x" "x" 82)))) (c "y") (x (let ((y (isbool (fun2 "c" true true 84 true true true))) (b (- (let ((b -1)) 19) (set! c "y")))) (block true -75 (block "c" true))))) (fun3 (set! y (let ((h "y") (f "x")) 91)) (+ 78 (let ((f -6) (i -56) (d "f")) "c")) (let ((c (let ((g "x")) 68))) (add1 37)) (= (let ((g "y") (z false)) false) (block "x")) (isnum (block "x" "c" "x" 18 true)) (let ((a (block "c" "y" "y" true))) (< 32 35)))) (block (fun3 (block (> 32 87) (let ((a false) (c "a") (h 32)) "c") (if false false false) (let ((i false) (e "i") (f -76)) 20) (let ((y 82) (j -94)) 72)) (if (block false true false) (- -97 11) (block -7 true true 0)) (block (+ 53 -89) (let ((g true) (i "g") (h "g")) -28) (let ((z 23) (j false) (b true)) 22)) (block (= true true) (let ((i -17) (x -21) (f true)) false) true) (isnum false) (< (sub1 -99) (our_code_starts_here -88 false -41 true true -10))) (let ((z (let ((f (>= 56 -38)) (z (= -27 69))) (> 57 -79))) (y (let ((i (block -5 true "z" "z")) (h (block -64 true))) (add1 52))) (x (set! y "y"))) (- (let ((b "z") (i 1) (z false)) 63) (let ((f true) (i "f")) 7))) (< (let ((y (let ((i 33) (x false) (c false)) "x")) (i (let ((a 13) (z "y") (j 57)) "a"))) -32) 74)) (fun1 -85 (block (* (sub1 -49) (if true 42 28)) (< (- -86 -97) (- -99 27)) -17 (our_code_starts_here (* -36 19) (let ((g true)) "g") (let ((z 39) (c true) (g "c")) "z") (block true -28 false) (< 72 96) (add1 35)) (let ((c (let ((z -55) (i false) (x "z")) -31)) (d (>= -56 "c")) (b (block "c" false))) (block -93 "d" true 58 "c"))) (>= (block (* 90 95) (if false -7 -29)) (block false (let ((g 60) (z true)) "g"))) (block (block (>= -96 -34)) (let ((y (block 54 -31))) (let ((c false)) 81)) (if (- -82 -89) true (let ((e false) (j false) (g input)) true)) false (let ((j (let ((b true)) false)) (y (block "j"))) true)) (+ (let ((g (block 20 59 true 75)) (d (set! g -25))) (let ((x true)) -12)) (let ((i (* 74 -34)) (a (let ((y 76)) "i")) (x (block -93 false "a" false 82))) (block false "i"))) (block (block (block 57) (block true) (sub1 75) (let ((x 13) (i false)) "i")) (if (block 12 15) (let ((a -72) (e 22) (c true)) -38) (block 41)) (block (if 100 true true))) (add1 (+ -72 (block true 18)))) (block (* (sub1 (- -50 55)) (- (add1 27) (our_code_starts_here 94 true 90 true true -7)))))) (i (* (- -91 (* -98 (set! g "g"))) (* (add1 -33) (- (let ((b "g")) (set! b 73)) (let ((y (let ((b false) (g true)) 29)) (d (< 98 "g"))) (* 69 56))))))) (isbool (isbool true)))) (break (let ((x (> (block (= (let ((f false) (h (set! f "loop_var_181"))) (<= "h" -60)) (set! loop_var_181 (let ((c "loop_var_181") (y true) (b -24)) "y"))) -22 (block (set! loop_var_181 (sub1 "loop_var_181")))) (+ (+ (let ((d (isbool false))) (let ((f "d")) -67)) (let ((f (- "loop_var_181" "loop_var_181"))) (let ((h true)) "loop_var_181"))) (+ (let ((a (block true 87 -61)) (d (let ((c -85)) true)) (x (+ 21 "loop_var_181"))) (set! loop_var_181 -53)) (block (>= -4 2) (let ((i false)) -16) (sub1 77))))))) (let ((f (- (let ((g (let ((j (let ((g 72) (d 70)) "g")) (z (our_code_starts_here 2 true "j" true false 7))) (+ "loop_var_181" "loop_var_181")))) "g") -95))) (isbool (fun1 (block (<= "loop_var_181" "loop_var_181") (set! f "f") "loop_var_181" (- -49 7) (block "x" "f" -84)) (set! x (add1 "loop_var_181")) (= (let ((e "x")) 90) (+ 27 -8)) (set! loop_var_181 input) -90 (let ((j "x") (d (> -1 70))) "x") (let ((b (- "loop_var_181" "loop_var_181"))) (let ((f false)) 4))))))))))