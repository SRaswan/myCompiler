(fun (our_code_starts_here energy j e c d) (if (<= energy 0) -82 (block (set! energy (- energy 1)) "energy")))
(fun (main energy b j g y i) (if (<= energy 0) false (block (set! energy (- energy 1)) (let ((d (let ((d (< (sub1 "y") (fun7 "y" -49 "i" 58 "i"))) (i (+ (block true true true 77) (let ((a 79)) 90))) (h (>= (let ((z 28) (y false) (x "i")) "i") (* "g" -64)))) (add1 (add1 5))))) (= (let ((b (isbool false)) (i (- 53 "d")) (x (* "d" -53))) (let ((g true) (x "j") (h "g")) false)) (let ((e (> "energy" "y")) (x (isnum false)) (c (let ((c "e") (y "d")) "j"))) true))))))
(fun (fun1 energy c y j e h) (if (<= energy 0) true (block (set! energy (- energy 1)) "e")))
(fun (fun2 energy g e d y z i) (if (<= energy 0) false (block (set! energy (- energy 1)) (>= "energy" (let ((d (let ((c (= "d" "y"))) (let ((j true)) false))) (f (let ((c (set! i "i")) (e (block "d")) (g (set! i "e"))) (sub1 42))) (z (<= (let ((d "d")) 82) -63))) (* (let ((d true) (x -25)) "z") (let ((b 33) (z "d") (c "d")) 75)))))))
(fun (fun3 energy i e x b) (if (<= energy 0) false (block (set! energy (- energy 1)) (set! e (set! e (set! energy (set! b "b")))))))
(fun (fun4 energy c i z g b e) (if (<= energy 0) -91 (block (set! energy (- energy 1)) (- (add1 (block (add1 16))) (block (if (* "e" "b") (< -92 61) (let ((h "g")) false)) (add1 (* 48 49)))))))
(fun (fun5 energy j e x a h) (if (<= energy 0) 53 (block (set! energy (- energy 1)) (* (set! j (if (let ((b false) (i false) (a -30)) "i") (block 91 "a" "energy") (block false true false "energy" 80))) (block (let ((d (+ "energy" "j")) (f (let ((b 39) (j "e")) 18))) -68) (= (let ((c "energy")) false) (<= "energy" 29)) (block (>= "energy" "j")) (let ((b (let ((a -52) (b 99) (x -17)) -15)) (a (>= "j" 73)) (j (let ((e "h")) "x"))) (- "j" "b")) (our_code_starts_here (let ((g true) (d -48) (y "g")) 55) (< "j" "energy") (block "e" "energy" "energy" false) (let ((b "x") (g "h") (a true)) 77) (set! energy "x")))))))
(fun (fun6 energy c b h x i z y) (if (<= energy 0) true (block (set! energy (- energy 1)) (let ((a (+ (let ((x (+ 46 59)) (f (+ "x" "x"))) (block "i" "x")) (our_code_starts_here (let ((j 78)) "h") "b" (block "i" "z" 62 "c" true) (- "c" -24) (let ((e "i") (b "energy") (f "e")) true)))) (x (let ((e (* (set! y 79) (let ((a "energy") (b 6) (x true)) 72)))) (- (let ((f "h")) "e") (* "c" "z"))))) (= "a" (set! x "a"))))))
(fun (fun7 energy g j d z) (if (<= energy 0) -73 (block (set! energy (- energy 1)) (set! j (if (set! z (let ((x "energy") (i "d") (e "x")) false)) (set! energy (* "z" -6)) (+ (let ((j true)) 82) (block "d" true "d" "g")))))))
(* (block (= (block (< (* (block (block 61)) (- (* -36 -58) 85)) (+ (- (* 71 -97) (block true true false 80)) (let ((j true)) (let ((e -90)) "e")))) (fun6 (- (let ((g (* -4 23))) (let ((loop_var_25 18)) (loop (if (< loop_var_25 (+ 18 25)) (block (set! loop_var_25 (+ loop_var_25 1)) (set! g 78) (set! g "g") (set! g 59) 66 "g" "g") (break 59))))) (- (fun5 -49 false false false true 35) (let ((a 41) (h true) (g true)) "a"))) (let ((i (add1 (* -12 17))) (e (block -47 (let ((loop_var_160 45)) (loop (if (> loop_var_160 (- 45 160)) (block (set! loop_var_160 (- loop_var_160 1)) (set! i "i") (set! i "i") 8 47 89) (break 79)))) (+ -26 "i")))) (>= (block 70 true 12) 68)) (block (- (let ((j -99)) "j") (let ((a -99) (c "a")) -74)) (* (block -85 -95 false -61 30) (block false -75 -72))) (* (our_code_starts_here (* 67 -35) (<= 78 -53) (isbool false) (add1 -66) (let ((a 49)) false)) (let ((loop_var_176 23)) (let ((loop_var_175 23)) (let ((loop_var_41 48)) (loop (if (> loop_var_41 (- 48 41)) (block (set! loop_var_41 (- loop_var_41 1)) -74 77) (break -29))))))) (isnum (let ((a (+ 49 33))) (isbool input))) (+ (let ((d (block input true 63 true -82)) (b (+ 1 96))) (let ((a false) (g "d") (x true)) "d")) (block (main 98 false -40 -6 true true) (block true false 29 true false) (block 19) (- -86 82))) (let ((c (fun5 (* -35 -52) (block true) (= false true) (isnum true) (let ((loop_var_22 -92)) (loop (if (> loop_var_22 (- -92 22)) (block (set! loop_var_22 (- loop_var_22 1))) (break false)))) (let ((loop_var_66 38)) (loop (if (> loop_var_66 (- 38 66)) (block (set! loop_var_66 (- loop_var_66 1))) (break -55)))))) (g (block (- -32 99)))) (< (let ((e true) (a false) (z true)) "g") (add1 -2))) (block (block (let ((x false) (j true) (f false)) true)) (sub1 (* 42 99)) (let ((j (block 16 -94 true true)) (y (let ((loop_var_52 -2)) (loop (if (> loop_var_52 (- -2 52)) (block (set! loop_var_52 (- loop_var_52 1)) (set! j true) (set! j true) (set! j true)) (break true))))) (i false)) 40) (let ((y (* 52 -47)) (z (let ((e false) (g "y") (x "e")) -28)) (d (let ((d 89)) 14))) (< 19 "z")))) (block (add1 (+ (let ((i -79) (d -49) (j false)) "d") -98)) (let ((d (fun3 78 (block false false -10 true) (if -100 74 87) (isbool false) (if input false false))) (z -73) (x 62)) (block (let ((c -17) (f "d") (g "c")) true) (block 12))) (if (- (let ((i true)) -64) (- 28 -58)) (<= (block false false true -21) (let ((loop_var_182 10)) (loop (if (< loop_var_182 (+ 10 182)) (block (set! loop_var_182 (+ loop_var_182 1)) -7) (break "loop_var_182"))))) (let ((b (isbool true)) (z "b")) (let ((a -7)) false)))) (let ((x (block (if (if false -14 -52) (* 17 -21) (let ((y false)) -78)) (let ((d (let ((f true) (i "f")) 22)) (h (- -45 "d")) (j (let ((h "d")) "h"))) (let ((d false)) false)) (let ((e (let ((e 97) (y false)) "e"))) (* -77 "e")) (let ((a (let ((e 97) (j "e")) true)) (h (let ((e "a") (f "e")) false)) (d (> 78 -86))) true) (sub1 (if false 57 -60))))) true)) (let ((loop_var_86 (block 95 49))) (loop (if (< loop_var_86 (+ (block 95 49) 86)) (block (set! loop_var_86 (+ loop_var_86 1)) (if (let ((i (let ((c -7) (g -82) (f false)) "c")) (c (sub1 -49))) (block -42 "i")) (= (fun3 -43 true -76 false true) (let ((a -92) (b false)) false)) (main (let ((b false)) 80) (< 25 87) (fun4 82 -22 52 -96 -5 68 68) (* 33 -23) (if -18 false false) (block 92 -80 false))) (block (< (sub1 47) (if true -11 -10)) (block false) (< (* -22 82) (* 30 56)) (fun1 (fun7 -40 -56 false -23 false) (if -79 false true) (* -58 22) (let ((i 63) (c false)) input) (fun3 86 false 54 false true) (> 10 72)))) (break (block (+ (sub1 -65) (- "loop_var_86" -89)) (block (= -18 57) (our_code_starts_here "loop_var_86" true true -35 true) (set! loop_var_86 "loop_var_86") (+ 83 "loop_var_86")) (set! loop_var_86 (let ((j true)) "loop_var_86")) (> (block true "loop_var_86") (+ -45 "loop_var_86")))))))) (add1 (let ((f (let ((g true)) (block (- (if -64 -63 11) (let ((c -27) (b true)) -26)) (let ((f (<= -48 92)) (z (let ((a 36)) "f"))) (block -19 "g" true)))))) -94)) (let ((d (let ((loop_var_72 (sub1 90))) (loop (if (> loop_var_72 (- (sub1 90) 72)) (block (set! loop_var_72 (- loop_var_72 1))) (break (sub1 (let ((a (block true "loop_var_72" false false))) (+ -36 88)))))))) (e (< (set! d (+ (block (= -26 "d") (+ "d" 48)) (sub1 (sub1 60)))) (add1 (block (* -99 (+ -21 35))))))) (<= (block (* (let ((e (fun1 15 input "d" "e" "e" "e")) (a (sub1 "d")) (h (isnum false))) (block "h" true "d")) (let ((loop_var_43 -41)) (let ((loop_var_144 -80)) (let ((loop_var_179 -30)) (loop (if (> loop_var_179 (- -30 179)) (block (set! loop_var_179 (- loop_var_179 1)) (set! d "d") (set! e 99) (set! e 90) "d" 12) (break "d")))))))) (block (add1 (sub1 (block false "e" "e" 32))) (let ((c (let ((d (let ((loop_var_109 26)) (let ((loop_var_181 "d")) (let ((loop_var_63 "d")) (loop (if (> loop_var_63 (- "d" 63)) (block (set! loop_var_63 (- loop_var_63 1)) (set! d input) (set! d "e") (set! e "e")) (break "e"))))))) (h (>= 66 3)) (a (let ((loop_var_2 -98)) (loop (if (< loop_var_2 (+ -98 2)) (block (set! loop_var_2 (+ loop_var_2 1))) (break "e")))))) (= "d" "d"))) (z (isbool (let ((i true)) true)))) (+ (let ((a true) (f -70) (e "d")) -8) (let ((f "c") (e "z") (c "d")) 66))) (add1 "d")))) (add1 (sub1 (let ((b 35) (y 52)) 77)))) (let ((loop_var_115 (block true -10))) (let ((loop_var_132 (let ((e false)) -1))) (loop (if (> loop_var_132 (- (let ((e false)) -1) 132)) (block (set! loop_var_132 (- loop_var_132 1))) (break (block (* (if (block (let ((i "loop_var_132") (h -63)) "loop_var_132") (< -66 10)) (add1 (set! loop_var_132 "loop_var_132")) (set! loop_var_132 "loop_var_132")) (block (block (let ((x true) (c "x")) -56) (set! loop_var_132 -57) (<= 18 "loop_var_132")) (= (* 2 -74) (let ((e true) (a false) (x "loop_var_132")) "x")) (let ((x true) (e (block 73)) (g (let ((z "x")) "e"))) (* -22 "e")) (set! loop_var_132 "loop_var_132"))) true (block (+ (let ((e (let ((i false)) "loop_var_132")) (j (main "loop_var_132" true 92 31 true true)) (g true)) (+ 75 -16)) (+ (block "loop_var_132" 72) "loop_var_132"))))))))))