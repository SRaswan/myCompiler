(fun (our_code_starts_here energy g d f j x z h) (if (<= energy 0) -83 (block (set! energy (- energy 1)) (let ((x (+ (block (block "x" -21) (set! d true) (set! h -16)) (set! j (block "x")))) (i false)) (+ (sub1 (let ((z "z") (e "d") (j -95)) -95)) (let ((d (let ((d -79) (b "h") (i false)) -93))) (set! x "x")))))))
(fun (main energy) (if (<= energy 0) true (block (set! energy (- energy 1)) true)))
(fun (fun1 energy f a d x y) (if (<= energy 0) true (block (set! energy (- energy 1)) "d")))
(fun (fun2 energy) (if (<= energy 0) true (block (set! energy (- energy 1)) (> -41 -89))))
(fun (fun3 energy e z h d x y) (if (<= energy 0) 43 (block (set! energy (- energy 1)) (block (fun6 (block (+ -93 7) (let ((y -45)) -9) (block "x" "energy" "d" true false) -30 (set! energy -71)) (>= (block "e" 79 37) (set! x 47)) (* (sub1 33) 37) (block (+ "x" 62) (>= "z" 86) (= -59 -92) (if "d" true false)) "d" (let ((b (+ "x" 13))) (set! d "b"))) (set! d (fun8 (* 22 "x"))) (* (* 49 (* -75 -94)) (our_code_starts_here (* "e" "e") (let ((f 46)) true) (let ((a "d") (e 71) (h "y")) -19) (set! x "h") (let ((g "h") (y 74)) "y") (> 7 "e") (* 7 "e") (let ((i "y") (h false) (y "h")) "energy"))) (let ((z (isnum (set! h false))) (j (let ((f 7)) (let ((i "d") (h "h") (g "z")) "g"))) (f (let ((a (block "x"))) (fun1 71 true "h" "energy" "d" "z")))) (block "z" (* "x" "energy") (* -58 7))) "y"))))
(fun (fun4 energy c g z a) (if (<= energy 0) -8 (block (set! energy (- energy 1)) (set! g (if (let ((z (>= -17 "z"))) (let ((y "g") (z 32) (f "z")) "g")) (+ (+ "z" -11) -97) (let ((i (main 78)) (d (let ((a "c") (i true)) false)) (e (set! g false))) (let ((j -65)) 36)))))))
(fun (fun5 energy x b z a y i) (if (<= energy 0) 61 (block (set! energy (- energy 1)) (block (set! i (fun1 (let ((a true) (g 0)) 95) (block true) (block "energy" true) (set! a 69) true (* "x" "energy"))) (set! i (+ (add1 -86) (let ((x "energy") (d "x")) "x")))))))
(fun (fun6 energy f g h c z) (if (<= energy 0) -78 (block (set! energy (- energy 1)) (set! z (let ((d (set! energy (sub1 "f"))) (y (* (block "h" false "g" "h") (block "energy" "energy" "h" "f"))) (j false)) 33)))))
(fun (fun7 energy y f a d e z) (if (<= energy 0) true (block (set! energy (- energy 1)) (let ((a (>= (block (if "e" "z" false) (block 13 false "d" 25 "y") (let ((z 48) (j "energy")) -4)) (fun8 (fun5 -35 "a" "d" "f" "f" true 1)))) (i (> (let ((i (- "a" "energy")) (h (= "z" "z"))) (+ 35 -75)) (sub1 (block true -82 "z" "y")))) (x (block (block (set! d "a") (let ((g false) (j "g")) true) (block "f" "e" true true) (<= "e" "energy")) (+ (set! a -85) (block true false 34)) "energy"))) (>= (fun3 (let ((c 56)) "a") (let ((y "x") (j true)) "y") (let ((b "a")) "f") (if -38 true "d") (sub1 "a") (block "e" false "i" "z" "e") (block "e" 94 62 66)) (if (isbool "f") (* 78 "y") (let ((j -70) (g "x")) 51)))))))
(fun (fun8 energy) (if (<= energy 0) -11 (block (set! energy (- energy 1)) (let ((c (- -30 (* (+ "energy" -51) (set! energy -20)))) (a (let ((e (block (<= "c" "c") (let ((d true) (g "c")) "d") (block 63))) (d (= (block true true false "e") (set! c 82))) (f (block (= "d" "d") (let ((x -1)) false)))) (+ (let ((g true)) 6) (let ((a true) (h 75) (j -36)) "h")))) (g (set! a (isbool (let ((z false)) "z"))))) (* (let ((g (let ((d 31)) "g")) (b (let ((g false) (e false) (d "a")) "g"))) (let ((c "b") (d "g") (a "a")) 43)) (- (let ((d 100)) -99) (- -83 "energy")))))))
(let ((loop_var_132 (let ((a 5) (x false)) 62))) (let ((loop_var_110 (- -66 -96))) (let ((loop_var_193 (sub1 12))) (loop (if (> loop_var_193 (- (sub1 12) 193)) (block (set! loop_var_193 (- loop_var_193 1))) (break (let ((e (block (set! loop_var_193 (if (<= (sub1 -82) "loop_var_193") (let ((a (block false)) (i true)) (block -39 "loop_var_193" input -41)) (let ((d (block "loop_var_193")) (y (- -16 57)) (i (< "y" "loop_var_193"))) "d"))) (block -97 (if (isnum (>= 76 "loop_var_193")) (block (* "loop_var_193" input) (let ((i false) (y "i")) false) (isnum false) (+ input -60) (= "loop_var_193" "loop_var_193")) true) (sub1 "loop_var_193")))) (h (let ((x (isbool true))) (let ((z "loop_var_193")) (- (sub1 -47) (fun5 (* -3 89) (if "x" "z" "e") (let ((g -5) (h false) (z "x")) true) (< "loop_var_193" "loop_var_193") true (set! z "x") (let ((z 62) (j "e") (e true)) "e")))))) (g false)) (let ((j (let ((d (let ((f (set! loop_var_193 (< input input)))) (- "e" (let ((y "g")) "loop_var_193"))))) (block (< (* "loop_var_193" -5) 13) (let ((j (let ((z true) (c false)) "d"))) (- 13 -34)))))) (block (set! loop_var_193 (isbool (let ((f "h") (h "h")) "g"))) (set! g (block (isnum false))) (let ((i (block (= "h" "e")))) (let ((d (block true "j" 72))) (fun1 -70 "g" true "loop_var_193" "g" "h"))) (- input (block (set! e "g") (let ((c "g") (i "g")) -99) (sub1 "loop_var_193"))) (set! g false))))))))))