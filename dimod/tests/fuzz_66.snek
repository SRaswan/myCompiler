(fun (our_code_starts_here energy f d) (if (<= energy 0) -97 (block (set! energy (- energy 1)) "energy")))
(fun (main energy i d) (if (<= energy 0) true (block (set! energy (- energy 1)) (let ((g (if (let ((f (set! energy 87)) (z (block true true false -60 "f"))) (set! i false)) (if (<= -10 87) (block "i" 35 false true) (= true true)) (main (- 67 "d") (add1 "d") (> "i" -42))))) (> (let ((g (let ((y 5) (x "energy") (c "g")) true)) (f (+ "d" "d")) (e true)) (+ -3 -56)) (- (our_code_starts_here "d" "d" true) (set! i "i")))))))
(fun (fun1 energy a) (if (<= energy 0) false (block (set! energy (- energy 1)) (if (block (set! energy (* -82 "energy")) (< (let ((y "a") (g true)) "a") (* -60 88)) (let ((a true) (x (let ((i "a") (d "a") (c "d")) "a"))) false)) (>= (* (- -57 16) (let ((i false) (a 23) (e "a")) "e")) (if (>= "energy" "a") (set! energy "energy") (+ 5 "energy"))) (= (let ((y (* "a" -97)) (j (let ((g true) (f "energy") (a true)) "a")) (e (let ((a "energy") (h "y") (g -80)) false))) (let ((f "energy") (b 13) (z false)) true)) (block (set! a false)))))))
(fun (fun2 energy c f j z d e a) (if (<= energy 0) true (block (set! energy (- energy 1)) (set! e (block (set! a (let ((d "energy") (a "d") (h "energy")) true)))))))
(fun (fun3 energy h c j z b) (if (<= energy 0) -5 (block (set! energy (- energy 1)) (- (- (* "energy" (- "h" 57)) (- (let ((g true)) "energy") (- -99 "energy"))) (let ((j (- (fun3 "energy" true true true "b" "j") (* -32 21))) (z (< (block false false false -47) (set! b 71))) (y (set! h "h"))) (- (fun3 "energy" false "j" true "c" false) (block "z" true "j")))))))
(fun (fun4 energy e c i x h y g a) (if (<= energy 0) true (block (set! energy (- energy 1)) (block (= (block (let ((g "e") (h false)) "a") (* "h" "h")) (* (let ((j true) (e "i") (a false)) 75) (sub1 "y")))))))
(fun (fun5 energy j g z) (if (<= energy 0) false (block (set! energy (- energy 1)) (> (set! energy (set! energy (sub1 "energy"))) (let ((e (add1 "j"))) (* (* "energy" "e") (set! energy "e")))))))
(> (let ((g (fun3 (block -91 (let ((h (let ((loop_var_199 -36)) (let ((loop_var_49 (* -18 71))) (let ((loop_var_159 (block -3 false 13 17))) (loop (if (> loop_var_159 (- (block -3 false 13 17) 159)) (block (set! loop_var_159 (- loop_var_159 1)) (block 1 47) (sub1 31)) (break (add1 67)))))))) (y (isbool (= (+ "h" -80) (block "h" -3)))) (g (let ((j (if (<= -59 70) (* "h" 96) (+ 11 72))) (y (>= (let ((z false)) -38) (- 15 "h")))) (let ((loop_var_84 -86)) (let ((loop_var_27 100)) (loop (if (< loop_var_27 (+ 100 27)) (block (set! loop_var_27 (+ loop_var_27 1)) (set! y true)) (break false)))))))) (let ((loop_var_36 (+ 64 -33))) (loop (if (> loop_var_36 (- (+ 64 -33) 36)) (block (set! loop_var_36 (- loop_var_36 1)) (set! h (block "h" false false "y" 12)) (set! h (set! y -76)) (set! g (our_code_starts_here "h" 75 "y")) (* -13 22) (let ((g "h") (e true)) "h")) (break (set! h 42)))))) (if (block -38) (sub1 (- (let ((x false) (h -20) (e "h")) 30) (let ((b 26) (j true)) "b"))) -49) (isbool (isbool (let ((j (let ((b false)) -43)) (g (block false false true))) (let ((y true)) true)))) (* (let ((b (* (- -94 20) (block -28))) (g (= (let ((d true) (a true) (g "b")) false) (let ((d false) (i -92)) "d"))) (y -74)) (set! b (+ 65 100))) (+ (block (if -57 true true) (let ((c false) (b false)) "c") (sub1 -59) (let ((a true) (e true)) 21) (sub1 -82)) 73))) (if (* (block (let ((g (sub1 -36)) (a (block true))) (let ((a "a")) "g")) (block (add1 -47))) (add1 (our_code_starts_here (let ((f 94) (y false) (h "f")) 89) (fun3 -7 false false false false true) (isbool true)))) (>= (- (let ((f (let ((loop_var_37 -89)) (loop (if (> loop_var_37 (- -89 37)) (block (set! loop_var_37 (- loop_var_37 1)) input) (break false)))))) (+ 95 19)) (block (if false false false) (add1 52) (+ -75 -19))) (let ((g true) (j (- (- 88 -86) (let ((loop_var_184 25)) (loop (if (> loop_var_184 (- 25 184)) (block (set! loop_var_184 (- loop_var_184 1))) (break "loop_var_184"))))))) (let ((g (isbool true)) (b "g")) (sub1 "j")))) (let ((e 91) (d (let ((h (let ((d (- 93 "e")) (y (+ -80 "e"))) (sub1 99)))) (- "e" (* 64 -71)))) (y (let ((d (let ((y (* "d" "e")) (e (set! d 90))) (set! d "y"))) (j (+ (* "e" "d") (let ((b "e") (e false) (a true)) "e"))) (h (block (= -52 -38)))) (let ((g (- 4 27))) (let ((h input) (c -56)) "e"))))) (let ((loop_var_93 (block "y" false 99 -94))) (let ((loop_var_78 (- 2 "d"))) (let ((loop_var_8 (set! d "e"))) (loop (if (> loop_var_8 (- (set! d "e") 8)) (block (set! loop_var_8 (- loop_var_8 1)) (set! y (block true -93 true false)) (set! y (<= "e" -5)) (set! d (let ((d false)) input))) (break (<= 2 "d"))))))))) (block (let ((g (block (our_code_starts_here (let ((j -68) (h false)) 37) (let ((i 6) (f 60)) 16) true) (block (fun4 7 -20 true 58 -79 -50 -66 false 84) (if -41 13 13)))) (h (block (block (let ((d false) (i true)) "i"))))) (block (* (add1 -5) (block -78 false "g")) (set! g (let ((e "h") (j "e")) "g")) (- (let ((loop_var_199 "g")) (loop (if (< loop_var_199 (+ "g" 199)) (block (set! loop_var_199 (+ loop_var_199 1))) (break "g")))) "g") (let ((i (set! g "h")) (d (let ((i "g")) "h"))) (set! d -100)))) (<= (* (let ((j (block true 69 37 -72 false))) (+ -50 93)) 13) (let ((f (isbool (let ((loop_var_19 10)) (loop (if (< loop_var_19 (+ 10 19)) (block (set! loop_var_19 (+ loop_var_19 1))) (break input))))))) (if "f" (let ((loop_var_113 -52)) (loop (if (> loop_var_113 (- -52 113)) (block (set! loop_var_113 (- loop_var_113 1)) (set! f 30) (set! f 92) -24 -96 -97) (break -8)))) (- 83 20))))) (if (> (- -57 (let ((y (* 29 37)) (z (- 81 -79))) (let ((f true) (z true) (x 37)) -52))) (+ (block (if -92 false input) (let ((h true)) 89) (if -91 -62 41)) (let ((g (> -24 -63)) (h (block -76 "g"))) (let ((c -25) (j "c")) "c")))) (block (let ((a (block 1))) (* "a" (+ "a" "a"))) (+ (* (block 91) (- -93 -89)) 81) (block (block (fun1 -3 81)) (block (block -12 -39 true -36 true) (+ 49 -36) (let ((i 24) (e -67) (f "i")) false) (sub1 51)) (let ((y (= false true)) (b (= "y" input)) (z (>= -33 35))) (let ((loop_var_131 -71)) (loop (if (< loop_var_131 (+ -71 131)) (block (set! loop_var_131 (+ loop_var_131 1)) false) (break "y"))))) (isnum (isbool false)) (fun2 (fun3 94 true true false true false) false (isbool true) (* 24 -35) (>= -55 -57) (let ((d true) (y true)) "d") (block true) (fun3 -23 true true false false false))) (< (fun3 (+ 82 84) (let ((c 38) (z "c") (a "z")) true) (> -11 -15) (main -8 -54 false) (block false false false) (let ((loop_var_13 27)) (loop (if (> loop_var_13 (- 27 13)) (block (set! loop_var_13 (- loop_var_13 1))) (break true))))) 56) true) (let ((x (let ((z (- (* -96 52) 27))) (isnum false)))) "x")) (fun1 (let ((z (fun3 (+ -78 65) (let ((y (let ((d 11) (e false)) "d")) (d (block -10 "y"))) true) (< (- -10 -100) (let ((h true) (e 60)) 41)) (>= (* 32 -78) (let ((b -57) (a "b") (y false)) "a")) (let ((loop_var_86 35)) (let ((loop_var_54 -91)) (let ((loop_var_189 -68)) (loop (if (< loop_var_189 (+ -68 189)) (block (set! loop_var_189 (+ loop_var_189 1))) (break false)))))) (let ((loop_var_69 97)) (loop (if (< loop_var_69 (+ 97 69)) (block (set! loop_var_69 (+ loop_var_69 1))) (break false)))))) (h (+ "z" (+ (add1 51) (fun3 -47 false true true true false)))) (d false)) (set! d (block (block 92) (block -74 14 false) (>= -98 "z") (* -87 "h")))) (add1 (let ((j (isnum (block false -5 -92 true))) (y (let ((loop_var_97 -34)) (loop (if (< loop_var_97 (+ -34 97)) (block (set! loop_var_97 (+ loop_var_97 1)) "j") (break "j"))))) (b (let ((g (let ((b input) (i "j")) true)) (a (+ -31 51))) (isnum true)))) (block (block -91) (block false -89 false "j" -97))))) (block (block (* (sub1 (let ((loop_var_90 -14)) (loop (if (< loop_var_90 (+ -14 90)) (block (set! loop_var_90 (+ loop_var_90 1))) (break "loop_var_90"))))) (+ (block -46 79 63 true -66) -92)) (let ((f (- (let ((g -63)) "g") (- -100 10))) (c (let ((y (let ((y true) (f "y")) "f"))) (+ 59 12)))) (let ((loop_var_27 "c")) (loop (if (< loop_var_27 (+ "c" 27)) (block (set! loop_var_27 (+ loop_var_27 1)) (set! c true) (set! f false) (set! f false)) (break false))))) (isnum (let ((d -7) (e (let ((loop_var_11 57)) (loop (if (< loop_var_11 (+ 57 11)) (block (set! loop_var_11 (+ loop_var_11 1))) (break 38)))))) (> "d" -25))))))) (e (let ((f (let ((c 41)) (let ((loop_var_111 (block true false -70))) (let ((loop_var_100 (block -55 -7 true "g" "g"))) (loop (if (< loop_var_100 (+ (block -55 -7 true "g" "g") 100)) (block (set! loop_var_100 (+ loop_var_100 1)) (set! g (let ((f (set! c false)) (i (block -49 false 70 false true)) (d (if "c" "g" "c"))) (if false true true))) (block (our_code_starts_here "g" "g" false) (block 72 "g") (let ((h false)) "g") (- "g" "g") (= true true)) (>= (block "g" -5) (block -81)) (block (isbool false) false (isnum false) (> "g" -46) (isnum true))) (break (let ((y 20) (h (let ((e true)) 89)) (x (block -43 -66))) (isnum false))))))))) (b (+ (+ (let ((h (main (set! g 0) (let ((loop_var_65 -32)) (let ((loop_var_104 "g")) (let ((loop_var_155 "g")) (loop (if (> loop_var_155 (- "g" 155)) (block (set! loop_var_155 (- loop_var_155 1)) (set! f "g") (set! f "g") "g") (break "g")))))) (let ((loop_var_12 5)) (loop (if (> loop_var_12 (- 5 12)) (block (set! loop_var_12 (- loop_var_12 1))) (break "f"))))))) (let ((loop_var_86 -24)) (loop (if (> loop_var_86 (- -24 86)) (block (set! loop_var_86 (- loop_var_86 1)) (set! g 97) "g" -57 -1) (break -40))))) (* "g" (block (let ((i "f") (j "f")) "g")))) (add1 (let ((y (let ((loop_var_173 39)) (loop (if (> loop_var_173 (- 39 173)) (block (set! loop_var_173 (- loop_var_173 1)) (set! f "f") true) (break true))))) (f (fun2 (sub1 "g") (let ((loop_var_39 "g")) (loop (if (< loop_var_39 (+ "g" 39)) (block (set! loop_var_39 (+ loop_var_39 1)) input) (break "y")))) (block true 22 "g" -50 false) (let ((x "g") (f "g")) -24) (= "y" "y") (<= -13 "g") (<= "g" -90) (set! g "g"))) (i (let ((c (>= "f" "f"))) (= "g" -27)))) (let ((a (= 29 -60)) (f (if false "g" -5)) (b (let ((loop_var_167 "g")) (let ((loop_var_170 42)) (let ((loop_var_183 "f")) (loop (if (> loop_var_183 (- "f" 183)) (block (set! loop_var_183 (- loop_var_183 1)) "y") (break false)))))))) (let ((loop_var_135 "f")) (loop (if (< loop_var_135 (+ "f" 135)) (block (set! loop_var_135 (+ loop_var_135 1)) (set! a 95) (set! f 38)) (break "loop_var_135")))))))))) true))) (block (let ((d (> (add1 (- (let ((y -4) (a false) (h false)) "g") (let ((d -32)) -47))) (let ((f (block (let ((g "e")) "g"))) (x (isbool (>= "g" -4)))) (+ (let ((loop_var_75 "g")) (let ((loop_var_155 92)) (loop (if (< loop_var_155 (+ 92 155)) (block (set! loop_var_155 (+ loop_var_155 1)) (set! f "g") 100 "g") (break "g"))))) (let ((f true) (c -85)) -28)))))) (block (let ((d (- (let ((j 24) (d 60)) "j") (set! g "g"))) (i (+ (let ((i "e") (f "e") (x 56)) "d") (let ((loop_var_110 "d")) (let ((loop_var_120 "g")) (loop (if (< loop_var_120 (+ "g" 120)) (block (set! loop_var_120 (+ loop_var_120 1)) (set! g -31) (set! d "g") (set! d "d")) (break 12))))))) (g (>= (+ -99 47) (* "g" "i")))) (let ((y (* "i" 80)) (e (fun3 77 false "e" false false false)) (g (block "e" false "g"))) (< -97 "g"))))) (< (let ((loop_var_156 (block -66))) (loop (if (> loop_var_156 (- (block -66) 156)) (block (set! loop_var_156 (- loop_var_156 1)) (set! g (block (>= "g" "g") (- "g" 45))) (set! e (add1 86)) (set! e (set! g "g")) (let ((g (isnum "e")) (f (if "g" "g" "g"))) (set! f -100)) (block (- -83 -72) (+ -19 "g"))) (break (fun3 0 (= 39 "g") (isnum true) (isbool true) (block 88 false) (set! g false)))))) (let ((loop_var_64 (* "g" "g"))) (loop (if (< loop_var_64 (+ (* "g" "g") 64)) (block (set! loop_var_64 (+ loop_var_64 1))) (break (add1 (our_code_starts_here "g" "loop_var_64" false))))))) (let ((j (let ((loop_var_157 (our_code_starts_here -57 "g" input))) (loop (if (> loop_var_157 (- (our_code_starts_here -57 "g" input) 157)) (block (set! loop_var_157 (- loop_var_157 1))) (break (set! g (+ "g" "loop_var_157"))))))) (a (block (block (isnum (let ((g "g") (d "j")) "e")) (isbool (let ((loop_var_163 22)) (loop (if (< loop_var_163 (+ 22 163)) (block (set! loop_var_163 (+ loop_var_163 1)) true true "e") (break "e"))))) (block (<= -90 -34) (block "e" false "e" false) (>= 88 "g"))) (block (> (set! g "j") (+ 48 "g")) (- 4 (let ((loop_var_27 "g")) (let ((loop_var_180 78)) (let ((loop_var_97 "j")) (loop (if (> loop_var_97 (- "j" 97)) (block (set! loop_var_97 (- loop_var_97 1)) (set! e 33) (set! g "j")) (break 45))))))) (+ (block -61) (- "g" "g")) (let ((e (+ "j" "g"))) (+ -83 "e"))) (block (let ((f (= "j" -100))) (isbool true)) (<= (sub1 -34) (+ "g" 78))) (block (+ -17 (let ((a true)) "j")) (block (let ((loop_var_107 "j")) (loop (if (< loop_var_107 (+ "j" 107)) (block (set! loop_var_107 (+ loop_var_107 1)) -13) (break -22)))) "g" (let ((loop_var_57 -19)) (let ((loop_var_10 "j")) (let ((loop_var_140 -78)) (loop (if (< loop_var_140 (+ -78 140)) (block (set! loop_var_140 (+ loop_var_140 1)) (set! e false) (set! j "e") (set! e "e") "e" "e") (break "e")))))) (sub1 -70)) (let ((loop_var_154 -74)) (loop (if (> loop_var_154 (- -74 154)) (block (set! loop_var_154 (- loop_var_154 1)) (set! j "j") (set! g -9)) (break 56))))))) (i (+ (- (+ (let ((j true)) "j") (block 84)) (block (<= "a" "a") (<= "g" "j") (let ((d -17) (a false)) "e") (< 70 "a") (let ((x -20) (b "x")) -84))) (block (let ((loop_var_37 "a")) (loop (if (> loop_var_37 (- "a" 37)) (block (set! loop_var_37 (- loop_var_37 1)) "a" 85 "g") (break "a")))))))) (>= (let ((f (* "i" (let ((h false)) "i"))) (e (<= (let ((loop_var_124 88)) (loop (if (> loop_var_124 (- 88 124)) (block (set! loop_var_124 (- loop_var_124 1)) "g") (break "g")))) (block "j" true "e" false 8))) (d true)) (if (block "g" "g") (block true "f") (let ((b "e")) 69))) (block (block "j" -84 (let ((f "e")) "j") (let ((a true) (g true) (i false)) "i") (let ((x true) (h true)) 0)) (let ((e (- "a" "j"))) (block -81)) (let ((j (block "i")) (b (let ((h "j") (b "e") (y "h")) -89)) (y (let ((y input)) "y"))) (let ((x "i") (h "e") (c 25)) 88))))))) (let ((y (isbool (let ((z (* (add1 (* (block 4 false true 48) (block false false 26 -7))) (- (our_code_starts_here -61 (if true 55 64) (>= -63 9)) (+ -99 (let ((i -44) (a 10)) "a"))))) (x (> "z" -45))) (set! x (isnum (set! z (isnum "x"))))))) (i (isbool (>= (add1 (block (- (let ((loop_var_83 71)) (let ((loop_var_195 -15)) (let ((loop_var_80 87)) (loop (if (< loop_var_80 (+ 87 80)) (block (set! loop_var_80 (+ loop_var_80 1)) -34 -14 -69) (break 78)))))) (block true -23 59 19 -90)) "y" (= (let ((g -54) (h "y")) -88) -73) (+ (add1 34) (let ((z "y") (j "z") (a true)) 0)) (sub1 (+ 62 -41)))) (let ((y (block (< (let ((e "y") (h "e") (g 49)) "g") (set! y 90)) (let ((g (= true "y"))) (block 0 "y")) (>= (* -59 -76) (+ 74 83)) (let ((loop_var_63 -33)) (let ((loop_var_196 86)) (let ((loop_var_57 -91)) (loop (if (< loop_var_57 (+ -91 57)) (block (set! loop_var_57 (+ loop_var_57 1))) (break true))))))))) (our_code_starts_here -25 (let ((loop_var_49 76)) (loop (if (< loop_var_49 (+ 76 49)) (block (set! loop_var_49 (+ loop_var_49 1)) (set! y -12) (set! y -32) (set! y 7) 74 -55 -20) (break 51)))) (isnum (let ((b false) (z false)) "z")))))))) (* (sub1 (* (let ((i (fun3 (let ((y 45)) "y") (let ((d "y") (j false) (a true)) true) (< 80 -87) (let ((y 3)) false) (block "y" "y") (let ((d -48) (y 59)) "i")))) (fun3 (set! i -57) (let ((g -59)) true) false (block -80 false) (< -3 51) (let ((loop_var_24 -67)) (loop (if (< loop_var_24 (+ -67 24)) (block (set! loop_var_24 (+ loop_var_24 1)) true "i") (break false)))))) (* (- (let ((y false)) -92) (block -35 22)) (let ((y (- 18 37)) (j (main "y" "y" "y")) (i (add1 -94))) (let ((a "i")) "y"))))) (let ((a (add1 (block (if (let ((i "i") (y false) (b 93)) 40) (let ((j "i")) true) (let ((y -88)) false)) (block (let ((loop_var_151 -13)) (loop (if (< loop_var_151 (+ -13 151)) (block (set! loop_var_151 (+ loop_var_151 1)) -52) (break "loop_var_151")))) (isbool "y") (= "i" false)) (* (- -6 -22) -45))))) (set! a (let ((b (>= (block 42 "a" -4 false "a") (if "i" -56 "a")))) (sub1 (let ((f "y") (e -80) (g -99)) "g"))))))))