(fun (our_code_starts_here energy) (if (<= energy 0) -89 (block (set! energy (- energy 1)) (add1 (set! energy "energy")))))
(fun (main energy i) (if (<= energy 0) true (block (set! energy (- energy 1)) (< (let ((y true) (f (let ((y (let ((z "y") (j "z")) "j")) (c (add1 "energy"))) (set! c false)))) "i") (let ((d (block (let ((e false)) true) (block false))) (c (block (set! energy true) (sub1 "energy") (+ 74 -73)))) (- (let ((b false)) "c") "c"))))))
(fun (fun1 energy i e z) (if (<= energy 0) -5 (block (set! energy (- energy 1)) 21)))
(fun (fun2 energy) (if (<= energy 0) true (block (set! energy (- energy 1)) (set! energy (let ((f (block (let ((j false) (f "energy") (h "f")) "j") (block false "energy" -100) (+ "energy" -21))) (j (block -49 (+ "energy" "energy")))) (block (block false) (isbool false) (block "energy" 8 true 36 true) (fun3 -63 true "f" true -94 46)))))))
(fun (fun3 energy g i h y z) (if (<= energy 0) false (block (set! energy (- energy 1)) (main energy (sub1 (set! i (add1 -41)))))))
(fun (fun4 energy a d y h i z) (if (<= energy 0) 44 (block (set! energy (- energy 1)) (* "z" (let ((x (< (block false 99) (+ "energy" -33))) (a (let ((i (let ((x true)) -35)) (h (isbool "h")) (a (block true "h" 91))) (let ((z -89)) false)))) (- (set! a "a") (add1 "energy")))))))
(fun (fun5 energy) (if (<= energy 0) -59 (block (set! energy (- energy 1)) (block (let ((g (block (if true false false) (let ((g true)) -15) (let ((z true) (d 31) (h "z")) -83) (+ 48 -4) (block true true))) (d (+ (block 60) (+ "energy" -75))) (a (= (let ((g "g") (z -17) (e false)) 83) (set! energy "d")))) (set! a (>= "d" "energy"))) (set! energy (let ((x (block false true "energy")) (b (< "x" "x"))) (add1 69)))))))
(isbool (let ((c (- (block 23 (block (+ (+ (let ((loop_var_94 -4)) (loop (if (< loop_var_94 (+ -4 94)) (block (set! loop_var_94 (+ loop_var_94 1))) (break 91)))) -16) (let ((b (fun3 72 true 55 false -3 64)) (d (let ((x "b") (d "b") (g true)) "b"))) (let ((b -58) (i false) (a "b")) "b"))) (add1 (let ((d (* 27 62))) (+ "d" "d"))) (fun4 (fun1 (let ((loop_var_128 -98)) (loop (if (< loop_var_128 (+ -98 128)) (block (set! loop_var_128 (+ loop_var_128 1)) -25 34) (break "loop_var_128")))) -41 (+ 30 68) (isnum true)) (block (> -58 82) false 39) (let ((loop_var_180 11)) (let ((loop_var_101 78)) (let ((loop_var_175 75)) (loop (if (> loop_var_175 (- 75 175)) (block (set! loop_var_175 (- loop_var_175 1)) false) (break true)))))) (let ((e (block false false true 86 false)) (c 30) (i (let ((e false) (y "e") (z "c")) "y"))) (let ((i 47) (f "i")) "e")) (+ (let ((y false)) 12) (let ((x false) (f true) (e "f")) 25)) (let ((loop_var_92 66)) (loop (if (> loop_var_92 (- 66 92)) (block (set! loop_var_92 (- loop_var_92 1)) -71) (break "loop_var_92")))) (= (<= 16 -89) (block -43 true))) (block (let ((i (- input 73)) (a (let ((a "i") (j false) (d "a")) "a"))) (if true true true)) (let ((j (block true false true)) (f (block -69 -17 42 50 true)) (d (let ((loop_var_57 -15)) (loop (if (< loop_var_57 (+ -15 57)) (block (set! loop_var_57 (+ loop_var_57 1)) (set! f -83) (set! f -61) (set! f 36) -61 -48) (break "loop_var_57")))))) (sub1 -45))) (let ((h (<= (* -77 -6) (+ 68 90))) (a (let ((loop_var_6 72)) (loop (if (> loop_var_6 (- 72 6)) (block (set! loop_var_6 (- loop_var_6 1)) -81 -93 31) (break 2)))))) (set! a (let ((loop_var_140 6)) (loop (if (> loop_var_140 (- 6 140)) (block (set! loop_var_140 (- loop_var_140 1)) (set! a 56) (set! a "a") (set! h 97)) (break 67))))))) (fun4 (if (block (- 46 -95) (>= -22 89) (let ((j 0) (d false) (g true)) true) (block 71 -77) (* -59 -64)) (let ((loop_var_38 -55)) (loop (if (> loop_var_38 (- -55 38)) (block (set! loop_var_38 (- loop_var_38 1)) 7 -75) (break "loop_var_38")))) (* (let ((c true) (b "c") (f "b")) -31) (let ((loop_var_156 -27)) (let ((loop_var_73 -6)) (loop (if (> loop_var_73 (- -6 73)) (block (set! loop_var_73 (- loop_var_73 1)) -35) (break -78))))))) (our_code_starts_here (let ((loop_var_35 76)) (loop (if (> loop_var_35 (- 76 35)) (block (set! loop_var_35 (- loop_var_35 1)) -39 1 -76) (break 82))))) (let ((e (isbool (isbool false))) (x -87)) (let ((d (let ((h "x")) 12)) (e (<= "d" input))) (>= 95 77))) (block (= (let ((loop_var_186 -27)) (loop (if (> loop_var_186 (- -27 186)) (block (set! loop_var_186 (- loop_var_186 1))) (break 16)))) (let ((loop_var_50 -75)) (loop (if (> loop_var_50 (- -75 50)) (block (set! loop_var_50 (- loop_var_50 1)) -49) (break 31))))) (block (let ((z false) (g -27)) "z")) (>= (* input -2) -41)) (+ (- (block false 27) (block true 57 true -29)) (add1 (fun5 -17))) (block (let ((loop_var_94 32)) (loop (if (> loop_var_94 (- 32 94)) (block (set! loop_var_94 (- loop_var_94 1))) (break true)))) (> (* -67 98) (add1 21)) (block (main -57 -60) (let ((j true)) true) (let ((z -48)) "z") (let ((b 64)) true) (let ((c 81) (b true) (f -23)) false)) (+ (let ((loop_var_116 74)) (loop (if (< loop_var_116 (+ 74 116)) (block (set! loop_var_116 (+ loop_var_116 1))) (break 73)))) (add1 67))) (let ((h (let ((d (block false true false true -77))) (block -54 true input))) (z (> (let ((loop_var_109 "h")) (loop (if (> loop_var_109 (- "h" 109)) (block (set! loop_var_109 (- loop_var_109 1)) 12 "h" "h") (break "h")))) (sub1 -26))) (x (block (let ((loop_var_13 "h")) (loop (if (> loop_var_13 (- "h" 13)) (block (set! loop_var_13 (- loop_var_13 1)) (set! z false)) (break false))))))) (block (isbool false)))) (if true (let ((loop_var_189 27)) (let ((loop_var_89 (* -4 87))) (let ((loop_var_37 (block false -47))) (loop (if (> loop_var_37 (- (block false -47) 37)) (block (set! loop_var_37 (- loop_var_37 1))) (break (+ "loop_var_37" "loop_var_37"))))))) (let ((j (block (+ -17 73) (= 87 -61)))) (- (let ((f "j") (i -29)) 65) (add1 -15))))) (let ((f (let ((loop_var_124 (block input))) (loop (if (> loop_var_124 (- (block input) 124)) (block (set! loop_var_124 (- loop_var_124 1))) (break (main (block false 20 60 input "loop_var_124") (* "loop_var_124" "loop_var_124"))))))) (y (let ((a (block (let ((d (= -96 -18)) (h (sub1 -88))) (let ((y "f") (g "y")) "h")) (let ((h (our_code_starts_here -79))) true) (= (< 52 0) (let ((d false)) "f")) (let ((z (block false false 73 7)) (i (* 82 -78)) (c (- -20 "z"))) (+ -4 "z"))))) "a"))) (- (block (let ((z (let ((e true) (g false)) "y")) (e (= -19 input))) (block true)) "y" (let ((z (let ((loop_var_198 3)) (let ((loop_var_141 "y")) (loop (if (> loop_var_141 (- "y" 141)) (block (set! loop_var_141 (- loop_var_141 1)) "f" true "f") (break "f")))))) (g (isnum false)) (a (main 41 -78))) (* 50 "y"))) (set! y (sub1 "y"))))))) (block (sub1 "c") (let ((a (let ((d (block (let ((loop_var_81 -54)) (loop (if (> loop_var_81 (- -54 81)) (block (set! loop_var_81 (- loop_var_81 1))) (break 81)))) (let ((c (* "c" 26)) (x (isnum false))) (let ((loop_var_148 "c")) (let ((loop_var_22 input)) (loop (if (> loop_var_22 (- input 22)) (block (set! loop_var_22 (- loop_var_22 1)) (set! c "x") (set! x false)) (break "x")))))) (<= 98 (let ((g false) (d "c")) 92)) (let ((c (isnum true)) (h (block "c" "c")) (b (< "c" "c"))) 1))) (f (let ((a (set! d (fun2 95))) (c (block (if "a" "a" "a") (add1 74) (block input) (block true "c") (let ((a "c") (z "a") (d "d")) "a"))) (i (block (let ((j false)) "c") (let ((b "d") (d "c") (c "b")) "a") (let ((a "c") (j "a") (c true)) -7) (> "c" "c")))) (isbool (let ((h "c") (f "c")) "a")))) (a (set! c (let ((loop_var_73 77)) (loop (if (> loop_var_73 (- 77 73)) (block (set! loop_var_73 (- loop_var_73 1)) (set! c false) (set! f true)) (break true))))))) (> (- (* "c" 84) (block 70)) (add1 (let ((f "c") (i "f")) -45))))) (e (if (sub1 -59) (let ((f (let ((c (let ((loop_var_154 "c")) (let ((loop_var_159 -45)) (loop (if (< loop_var_159 (+ -45 159)) (block (set! loop_var_159 (+ loop_var_159 1)) (set! a -95)) (break "loop_var_159")))))) (f (let ((b -17)) "a")) (a "c")) "a"))) (let ((loop_var_123 29)) (let ((loop_var_1 61)) (loop (if (> loop_var_1 (- 61 1)) (block (set! loop_var_1 (- loop_var_1 1)) (set! a "f") (set! a "f") (set! c "a")) (break false)))))) (let ((c (- (sub1 -3) (let ((b 31) (h "a")) "c"))) (b (let ((d "a") (f (let ((x "d")) 85))) false))) (>= "c" (block true "c" 46 true 69)))))) (< (set! a (let ((d (set! a "e"))) (let ((g "d")) "c"))) (let ((loop_var_29 (block "c" "c" "c" 21))) (let ((loop_var_16 (block "e" "c"))) (loop (if (< loop_var_16 (+ (block "e" "c") 16)) (block (set! loop_var_16 (+ loop_var_16 1)) (set! c (+ 76 63)) (set! c (+ -27 11)) (block false "c") (* "c" "c")) (break (add1 "c")))))))) (block (block (- (block false (* -55 -68) -65 "c" (set! c "c")) (- (+ "c" -15) "c")) "c" (>= 31 (block (sub1 13) (<= "c" "c") (let ((j false) (g "j")) "c") "c")) (let ((y (- (sub1 -28) (add1 "c"))) (i false) (h (block (block "i" "i" "i" "i" "c") (- -19 "y") (set! c true) (block false "i") (let ((b true) (j "i")) "c")))) (- (+ 97 50) 66))) (block (let ((f (let ((g (let ((loop_var_90 "c")) (loop (if (< loop_var_90 (+ "c" 90)) (block (set! loop_var_90 (+ loop_var_90 1)) true true false) (break false)))))) (block 44 -67))) (a (let ((b (fun5 "c"))) (set! b "f")))) (* (block true false 92 "c" "f") (+ "a" -98))) (block (let ((b "c") (h (+ "c" 81)) (d (+ -14 -59))) false)) (= (= (let ((i input)) true) (if 53 true false)) (let ((f (>= "c" -12)) (z (set! c -18)) (h (<= input -86))) (block true -14 "z" true))) (let ((loop_var_84 (block input "c" false 23 42))) (let ((loop_var_59 (block false 3 false -60))) (loop (if (< loop_var_59 (+ (block false 3 false -60) 59)) (block (set! loop_var_59 (+ loop_var_59 1)) (set! c (fun4 52 -98 true false "c" -18 false)) (set! c (* "c" 70)) (set! c (let ((e 100) (z false) (c "z")) "e"))) (break "c")))))) (* (set! c (sub1 (let ((loop_var_91 -96)) (loop (if (< loop_var_91 (+ -96 91)) (block (set! loop_var_91 (+ loop_var_91 1)) (set! c 32) (set! c -70) (set! c 8)) (break "c")))))) -5)))))