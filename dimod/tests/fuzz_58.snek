(fun (our_code_starts_here energy x i y h g c z) (if (<= energy 0) -22 (block (set! energy (- energy 1)) (block (+ (block (set! y false) (* "energy" -60) (block "g" "x" -99 "y") (- "energy" -95)) (let ((z (set! c true)) (a (let ((f false)) "g"))) (sub1 -34)))))))
(fun (main energy c b e f) (if (<= energy 0) false (block (set! energy (- energy 1)) "f")))
(fun (fun1 energy e x g f y d a) (if (<= energy 0) false (block (set! energy (- energy 1)) (set! f (block (isnum (>= 46 12)) (if (block true "f" false) (isbool true) (block true -26 "g" "e" true)) (set! y (set! d false)))))))
(fun (fun2 energy) (if (<= energy 0) 42 (block (set! energy (- energy 1)) (block (block (+ (let ((i "energy")) "energy") (let ((x -11)) "energy"))) (* (set! energy -28) (our_code_starts_here (let ((y -16) (f true) (h 54)) "h") "energy" "energy" true (>= -27 -13) (>= 74 36) (let ((g 91) (i true) (z true)) true) true))))))
(fun (fun3 energy) (if (<= energy 0) -36 (block (set! energy (- energy 1)) (block (let ((z (>= (block false -52) (let ((g "energy") (j false)) 85))) (g (block (let ((a "z") (j "z") (c false)) "energy") (sub1 "energy") (block false "z" false "z")))) 4) (let ((f (= (* "energy" "energy") "energy")) (a (fun2 (let ((j true) (a "f")) "energy"))) (d (let ((f true)) (>= "energy" "energy")))) "a") (= (let ((g (if "energy" false false))) "energy") (fun2 -2)) (add1 (- (* "energy" -87) (* -55 79)))))))
(fun (fun4 energy z e a) (if (<= energy 0) 68 (block (set! energy (- energy 1)) (- (+ (* "a" (set! a -40)) (* (let ((a "a") (e false) (j 84)) "energy") (* "a" -86))) -17))))
(fun (fun5 energy y x a d h b) (if (<= energy 0) false (block (set! energy (- energy 1)) (block (+ (set! d (fun8 89 -94 "y" 59 "a" "h" "x" true "b")) (fun4 -22 "a" (add1 -47) (+ "b" 35))) (set! y (let ((b (let ((c "d") (x "h") (f -96)) true)) (a (block "energy" false))) (block false -70 "a"))) (block (let ((x (set! b false)) (c (add1 "a")) (f -95)) (block -7 "x")) (block (fun8 -94 "a" 28 "d" 78 "h" "x" true -48) (+ 51 "b") (block "y")) (let ((h (set! a false)) (y (fun2 "energy")) (a (let ((b -76)) -10))) (let ((f "h") (h true)) "h")) (block (* -17 55) (let ((e "x") (d "x") (z "e")) 24) (fun1 46 -2 -85 "energy" "a" -14 -57 true)))))))
(fun (fun6 energy f e h) (if (<= energy 0) false (block (set! energy (- energy 1)) false)))
(fun (fun7 energy d z h e i) (if (<= energy 0) -83 (block (set! energy (- energy 1)) (+ 24 (set! i (set! h (add1 -61)))))))
(fun (fun8 energy x h g c a i z b) (if (<= energy 0) -81 (block (set! energy (- energy 1)) (our_code_starts_here energy (let ((h (let ((i (+ "x" "a")) (a (+ -34 -10)) (z (* 37 85))) (let ((b 17)) "c")))) "energy") (add1 (let ((e (set! h "c")) (b "x") (f (let ((d false)) true))) (- "g" -17))) (let ((h (let ((j (+ "g" 44)) (h (>= 56 "h")) (d (set! energy false))) (sub1 "energy"))) (e (let ((j (let ((a 97) (b false) (e false)) "x"))) "i"))) (let ((i (let ((i 33)) true)) (b (isbool "i")) (d (>= 23 "g"))) (block "d"))) false (let ((y (block (> -7 95) -10 (block "a" "h" -90 "energy" "i")))) (let ((g (<= -36 "energy")) (h (let ((g false) (d 75)) 0)) (a (block "a" true "h" "g" 34))) (block true))) (let ((j (block false (let ((x "h") (a 33) (d "g")) "i") (let ((j 45)) false)))) (= (set! j false) (let ((a false) (c false)) true))) (= (- (let ((g -4) (b "i")) 77) (let ((j "energy")) -55)) (block (< "c" -6) (block "z" "i") (let ((y -56) (i false)) 37)))))))
(* (let ((y (+ (sub1 26) (if (block (= (< -96 (* 19 85)) (isnum (let ((loop_var_153 -40)) (let ((loop_var_193 -12)) (loop (if (> loop_var_193 (- -12 193)) (block (set! loop_var_193 (- loop_var_193 1))) (break true))))))) (fun5 (let ((y (let ((y true)) -67)) (h (<= -85 69)) (i (<= 8 "y"))) -45) (let ((c (add1 3))) (>= "c" "c")) (let ((loop_var_196 33)) (loop (if (< loop_var_196 (+ 33 196)) (block (set! loop_var_196 (+ loop_var_196 1)) 7 -45) (break "loop_var_196")))) (* (- 15 -21) (if 62 67 19)) (isnum (block 8 -99 true)) (- (* -20 88) (* 60 58)) (< (if 62 -54 27) (block true true -50))) (sub1 (let ((loop_var_47 -28)) (loop (if (> loop_var_47 (- -28 47)) (block (set! loop_var_47 (- loop_var_47 1)) -9) (break -20))))) (our_code_starts_here (block (add1 -40) (<= -61 -39) (+ 82 -28)) (let ((g (* 15 -17)) (b (* "g" -13)) (x (let ((loop_var_140 "g")) (loop (if (> loop_var_140 (- "g" 140)) (block (set! loop_var_140 (- loop_var_140 1)) (set! b true) (set! b true)) (break input)))))) (- "g" "b")) (let ((loop_var_154 -62)) (loop (if (> loop_var_154 (- -62 154)) (block (set! loop_var_154 (- loop_var_154 1)) -75 80 -24) (break "loop_var_154")))) true (let ((z (block -47)) (e (= true true))) (let ((a false) (x "a") (c false)) true)) (isbool (> 100 -26)) (<= (- -97 85) (let ((loop_var_75 -11)) (loop (if (< loop_var_75 (+ -11 75)) (block (set! loop_var_75 (+ loop_var_75 1))) (break "loop_var_75"))))) (let ((e (let ((loop_var_102 32)) (loop (if (< loop_var_102 (+ 32 102)) (block (set! loop_var_102 (+ loop_var_102 1))) (break false))))) (z (* -95 62))) (<= "z" -46))) (>= (- 52 (block 90 -59 10 -87)) (* (add1 38) (- -57 57)))) (let ((a (sub1 (- (let ((y -77) (h false) (a "h")) -21) (let ((f -74)) "f")))) (h (let ((x (let ((f (add1 "a")) (b "f") (d (= false true))) (block 30 input))) (z (let ((j -19)) (+ -32 79)))) (< (* "z" -30) (let ((loop_var_44 "z")) (let ((loop_var_91 "a")) (loop (if (> loop_var_91 (- "a" 91)) (block (set! loop_var_91 (- loop_var_91 1)) (set! z "z")) (break -63))))))))) (block (fun1 (set! a "a") (block "h" input 19 "h" 34) "a" (+ "a" 12) (block "a" "h" 99) 73 (* 58 "a") (>= -9 "a")) "h" (< (let ((a "a") (h 7)) "a") (block "a")) (let ((i (+ "a" -98))) (if true -56 -56)))) -12))) (f (let ((z (let ((h (+ (let ((loop_var_55 (* -5 "y"))) (let ((loop_var_134 -60)) (let ((loop_var_120 (set! y 54))) (loop (if (< loop_var_120 (+ (set! y 54) 120)) (block (set! loop_var_120 (+ loop_var_120 1))) (break (fun4 "loop_var_120" -30 79 -34))))))) (* (let ((x (let ((j false) (x "y")) -86)) (c (fun7 "x" "x" 51 false 30 true)) (f (let ((z false) (h "c") (g -74)) "h"))) (block "f" "c" 22 "x" -75)) (block (<= -63 "y") (let ((loop_var_185 "y")) (loop (if (< loop_var_185 (+ "y" 185)) (block (set! loop_var_185 (+ loop_var_185 1)) -71 46) (break -10)))) (< "y" "y") (- -79 -76)))))) (isbool false))) (d (set! y (> (block (let ((c (let ((c false) (x "y") (d "c")) false)) (z (+ "y" "y")) (y (> "z" -50))) (let ((d -45) (e false)) false)) (< (let ((g "z") (f 15) (y 26)) 0) (block "z" -92 "y")) (block (isnum true) (<= "y" "y") "y")) (* (set! z (let ((j -6) (h "y") (c true)) "j")) (block (set! y "y") (let ((d "y")) "d"))))))) (let ((loop_var_76 (set! d "y"))) (loop (if (> loop_var_76 (- (set! d "y") 76)) (block (set! loop_var_76 (- loop_var_76 1))) (break (- "y" (fun4 (block -22 false "y" 51) "loop_var_76" (fun7 "y" "y" 47 false -49 true) (+ -59 "loop_var_76")))))))))) (set! y (block false input))) (let ((z 77)) (let ((b -60)) (let ((g (isbool (block (let ((loop_var_152 "b")) (loop (if (< loop_var_152 (+ "b" 152)) (block (set! loop_var_152 (+ loop_var_152 1)) (set! z false) (set! z false) (set! b false) false true) (break true)))) (let ((e "b") (x (let ((h -91) (c "h")) "h")) (f "x")) (let ((a "f") (j 73) (d "x")) false)) (let ((f (let ((z -44)) "b"))) (> "z" "f")) (block (let ((h false) (c "h")) "c"))))) (j (let ((a (> (let ((j (let ((x false)) "b")) (y (let ((b "g") (z false)) "g")) (x (let ((d "j") (y "b")) -90))) (block true 21)) (let ((j (= true "g")) (f (= "z" -71)) (z "z")) -8)))) (block (<= (let ((e false) (a "a")) "z") (* "b" 80)) (let ((y (block true)) (x (let ((e -57) (y 9)) "b"))) (block false "g" "g")) (block (isnum "a") (let ((loop_var_169 "z")) (loop (if (< loop_var_169 (+ "z" 169)) (block (set! loop_var_169 (+ loop_var_169 1))) (break "a")))) (let ((g 50) (j "g") (h "b")) false)) (>= "z" (block -47 "a" "z" "b" 81)) (* (* -91 27) (let ((loop_var_139 47)) (loop (if (< loop_var_139 (+ 47 139)) (block (set! loop_var_139 (+ loop_var_139 1)) "z" 79) (break "z"))))))))) (fun5 (let ((loop_var_168 (* "j" "b"))) (loop (if (> loop_var_168 (- (* "j" "b") 168)) (block (set! loop_var_168 (- loop_var_168 1)) (block true "z")) (break -43)))) (let ((d (block (let ((d "g") (c -19)) "c") (+ "z" 27) (- 70 "b") (+ -1 "j"))) (e (>= (* 57 95) "b")) (y (block (+ "b" -23) (let ((c input)) -57) (isbool true) (block true 64)))) (isnum (let ((loop_var_34 88)) (let ((loop_var_133 "y")) (let ((loop_var_185 -58)) (loop (if (< loop_var_185 (+ -58 185)) (block (set! loop_var_185 (+ loop_var_185 1)) (set! b true) (set! y input) "g") (break "g")))))))) (let ((loop_var_98 (let ((h "g") (c 64) (b true)) 26))) (let ((loop_var_177 (block "g" "g" false -86 -100))) (loop (if (> loop_var_177 (- (block "g" "g" false -86 -100) 177)) (block (set! loop_var_177 (- loop_var_177 1)) (set! b 62) (if "j" "b" -81)) (break (block false false false 39)))))) (let ((loop_var_97 (let ((b true) (i "b") (z -34)) "b"))) (let ((loop_var_170 (let ((a false) (j -75) (f -9)) 82))) (loop (if (< loop_var_170 (+ (let ((a false) (j -75) (f -9)) 82) 170)) (block (set! loop_var_170 (+ loop_var_170 1)) (set! j (let ((f "g") (x false)) 83)) (set! j (block "b")) (set! j "b")) (break (set! j 73)))))) (isbool (let ((loop_var_46 80)) (loop (if (> loop_var_46 (- 80 46)) (block (set! loop_var_46 (- loop_var_46 1))) (break false))))) -90 (= (let ((d (let ((j "j") (a true) (c "g")) 85)) (y (* 24 -49))) (let ((f "b") (a "g")) -28)) (let ((loop_var_45 42)) (loop (if (> loop_var_45 (- 42 45)) (block (set! loop_var_45 (- loop_var_45 1)) (set! j "z") (set! g "b") (set! g -1) "b" 65) (break "j"))))))))))