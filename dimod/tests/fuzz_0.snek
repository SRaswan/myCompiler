(fun (our_code_starts_here energy d y g j c a f i) (if (<= energy 0) 48 (block (set! energy (- energy 1)) (block 79 (block (fun4 (let ((a "j") (g "g")) "f") "j" (fun1 "a" "i" false "f") (fun2 45 "g" -74 "y" 87 false "c")) (block (let ((e true) (i "f") (j 41)) false) false (let ((y 94) (z 98)) "a")) (main (block true 98) (= "j" "j") (set! d 68) (set! g true)) (<= (fun2 84 false 13 "d" "d" "g" "g") (block false -33 true "y" "energy"))) (set! a (block (if "c" false true) (block true "g" 5 "c" "j"))) -57 (let ((h (set! d (fun1 "i" -75 false -88))) (x (let ((h (set! y "a")) (b false) (i -57)) (- "y" "d")))) (sub1 (block "y")))))))
(fun (main energy y a c) (if (<= energy 0) false (block (set! energy (- energy 1)) (let ((h (isbool (set! y false))) (b (* (+ (+ 76 -13) (+ -47 -9)) (* (set! h "y") (let ((x "c") (z "y")) "y")))) (c (let ((j (block (set! b 32) (let ((b 99)) false) (let ((g -2) (z -94)) true) "a" (- "energy" 9))) (d 60) (b (> (set! j -29) (block -24)))) (fun3 (add1 "energy") (* "b" -66) (add1 "energy"))))) (let ((f (block (<= "energy" "y"))) (c "c") (a (+ (* 64 "energy") (* "c" "c")))) (block (let ((i true) (c true)) 20) (* "energy" -2) (let ((e "a") (a -4) (i 15)) 36) (fun2 -63 false -12 17 36 "f" "h") (let ((g "y")) "c")))))))
(fun (fun1 energy z e x) (if (<= energy 0) true (block (set! energy (- energy 1)) (let ((g (isbool (>= (if false 91 "z") (sub1 "z"))))) (= (let ((z (> 39 "energy")) (g (isnum true)) (f (- "z" 33))) (let ((x "x")) "z")) false)))))
(fun (fun2 energy d z x a i y) (if (<= energy 0) -99 (block (set! energy (- energy 1)) (let ((y (let ((g (let ((z (let ((y 84) (c "y")) "z"))) (block "energy" "a" true "z" true))) (c (fun2 (- -63 -5) (>= -93 "energy") (let ((d 71) (c 2)) -69) (* "energy" "x") (block 12) (fun1 "i" 36 "g" -80) (isnum true)))) false)) (f (set! y (fun1 (set! energy "i") (* -90 "energy") (>= -20 65) "d"))) (c (let ((x (< (if false "a" "i") (let ((c true) (j "y")) -37)))) (let ((f (set! d "y"))) (set! y true))))) (- (let ((z "f") (d (add1 "x"))) (+ "a" "d")) (+ (block -71 "y" 65) (let ((c "c") (h 71)) -55)))))))
(fun (fun3 energy b j) (if (<= energy 0) -72 (block (set! energy (- energy 1)) (block (block (* (let ((j false) (c "j")) "energy") (- "b" -17)) (let ((j (add1 "energy"))) (let ((b false) (d "b") (e "b")) 71)))))))
(fun (fun4 energy h z g) (if (<= energy 0) -2 (block (set! energy (- energy 1)) -87)))
(* (<= (let ((loop_var_91 (- -42 18))) (loop (if (< loop_var_91 (+ (- -42 18) 91)) (block (set! loop_var_91 (+ loop_var_91 1)) (block (isbool (= (let ((d true) (y "d") (e "d")) -74) (block -85 -83))) (let ((j (block (sub1 input) (let ((a false) (y -79)) "a"))) (c -70) (a (let ((a (block true "c" false))) (block "c" "a")))) "a") (fun3 -76 (let ((c (sub1 49))) (if false 34 26)) (- (- 54 -74) 3))) (sub1 (let ((z (our_code_starts_here (let ((j input)) "j") (add1 -55) (let ((b 43)) true) (<= -80 21) (block true 29 true) (block false true true 32 -58) (block true 48) (- 86 -24) (- -7 -76))) (e (let ((z (< 81 25)) (g (set! z true)) (i (set! z "z"))) (set! g 36)))) (block (set! e "e")))) (if (block (let ((z (block input true 68 true 44)) (i (let ((h -76)) false))) (block "i" "i" -63 true 16)) (+ (* 81 -49) (+ -87 -26)) (if (let ((b -18)) true) (* -89 -63) (let ((y true) (z "y")) input))) (sub1 (* (let ((d true)) -59) (* 18 93))) (block (block (if -20 true false) (let ((i true) (j -95) (d "j")) -12)) (>= (* -20 -19) (let ((a -32)) "a")) (+ (fun3 48 -40 23) (+ -41 34)) (- (let ((z 25) (i "z")) "i") (* input -89))))) (break (* (let ((d (sub1 (let ((h -29)) "loop_var_91")))) (block (block true false) (fun4 -100 false true 41) (set! loop_var_91 false) (let ((j true)) -82))) (let ((x (block (add1 "loop_var_91") (- -94 -28) (block 23 "loop_var_91" "loop_var_91" false "loop_var_91") "loop_var_91")) (d (<= (- 30 65) (set! loop_var_91 "x")))) (set! x (let ((i true) (b false) (h true)) -68)))))))) 39) (if (let ((x -92) (c (>= (let ((h (set! x (let ((c (let ((j "x") (y true)) "y"))) (let ((loop_var_32 91)) (let ((loop_var_80 "x")) (loop (if (< loop_var_80 (+ "x" 80)) (block (set! loop_var_80 (+ loop_var_80 1))) (break "c"))))))))) (+ (let ((c (isbool false))) (let ((h "x") (x "c") (d 84)) -76)) (let ((a (let ((b "x")) "x")) (h (if "a" false "h")) (g (main "x" "h" input "h"))) (let ((z "h")) -4)))) (set! x (+ (add1 (sub1 "x")) (if true 36 (block 34 "x" "x")))))) (i (block (let ((e (* (* (sub1 "x") (let ((b false) (c "c")) "x")) (set! c (fun2 31 "c" 22 "x" "x" true false)))) (y (+ (+ (set! c input) (block "x" "e" "c" 36 -56)) (block (block 85 "c" -74 "x") "e" (>= "e" 98) (isbool true) (add1 59)))) (j (block "x"))) (block (set! e (fun2 -43 true -32 "e" -61 false true)) (let ((a (block false "c" "y"))) (block 8 "c" -27 "c" "x")) -56 (block (block "x") "c" "c") (let ((a (set! j -68))) (- "x" "a")))) (block (+ (set! x (fun4 94 "c" false "x")) -3)) (+ (let ((loop_var_185 (- 8 "x"))) (loop (if (> loop_var_185 (- (- 8 "x") 185)) (block (set! loop_var_185 (- loop_var_185 1)) (set! x (let ((f 16) (b true)) "f"))) (break (let ((z true)) "x"))))) (let ((loop_var_77 (let ((x "c") (a "x") (j true)) "x"))) (loop (if (< loop_var_77 (+ (let ((x "c") (a "x") (j true)) "x") 77)) (block (set! loop_var_77 (+ loop_var_77 1))) (break (our_code_starts_here 75 -99 true true "c" 15 -92 "x" "loop_var_77"))))))))) (<= (if (let ((loop_var_135 (set! x "i"))) (loop (if (> loop_var_135 (- (set! x "i") 135)) (block (set! loop_var_135 (- loop_var_135 1)) (set! x (block "c" 48 8 "c" "c")) (set! c (>= "i" -95)) (set! i (isnum "c")) (let ((x "x") (a "i")) true) (block "c")) (break (< "i" 71))))) (block (let ((loop_var_191 -23)) (let ((loop_var_167 96)) (let ((loop_var_4 65)) (loop (if (> loop_var_4 (- 65 4)) (block (set! loop_var_4 (- loop_var_4 1)) true "c" "c") (break true)))))) input (+ (let ((c "c") (a 42) (e true)) "a") (if true "x" "x"))) (block (* (let ((loop_var_176 "x")) (loop (if (< loop_var_176 (+ "x" 176)) (block (set! loop_var_176 (+ loop_var_176 1))) (break "x")))) (* "i" "x")) (= (let ((h "c") (g "h")) true) (let ((j 88) (f "x")) false)) (block (set! i false) (let ((loop_var_77 68)) (let ((loop_var_171 -16)) (loop (if (> loop_var_171 (- -16 171)) (block (set! loop_var_171 (- loop_var_171 1)) (set! i "x") (set! i "x") input) (break 26)))))) -15)) (block (+ (block (isbool true) (let ((loop_var_74 "i")) (loop (if (> loop_var_74 (- "i" 74)) (block (set! loop_var_74 (- loop_var_74 1)) (set! i 75) (set! x 91) "x") (break "x"))))) -98) (let ((loop_var_15 (let ((x -72) (j "x") (y false)) -31))) (loop (if (< loop_var_15 (+ (let ((x -72) (j "x") (y false)) -31) 15)) (block (set! loop_var_15 (+ loop_var_15 1)) (let ((b true) (a "b")) "a") (let ((e -40) (x "i") (g "i")) "c")) (break (= "c" false))))) (isnum (main (let ((c "c") (j false) (z 62)) "z") (let ((y "x") (h -83)) true) (- "x" -49) (let ((z false) (j false)) "j"))) (set! x (+ (block "i" -42 35) (add1 input)))))) (if (isbool (let ((b -68) (d (isnum (block (block "b" true "b" input -33) (let ((j true) (a true) (e false)) true))))) (let ((loop_var_55 (* 10 3))) (loop (if (< loop_var_55 (+ (* 10 3) 55)) (block (set! loop_var_55 (+ loop_var_55 1)) (set! d (set! b false)) (set! d (block "b" "d")) (set! b (let ((b "b") (f "d") (y true)) true)) (let ((h "d") (b -16) (c "b")) false) "d") (break (block "d"))))))) (fun4 (block (let ((h true) (a (block (- 78 -18) (sub1 -74))) (e (let ((e (- "a" 45))) (block "a" "h" "e")))) (set! h (let ((z 92) (x false)) "a"))) (let ((loop_var_80 (- 56 0))) (let ((loop_var_46 (let ((x true) (y -41)) input))) (loop (if (> loop_var_46 (- (let ((x true) (y -41)) input) 46)) (block (set! loop_var_46 (- loop_var_46 1)) (add1 74)) (break (our_code_starts_here "loop_var_46" "loop_var_46" false false false "loop_var_46" -88 "loop_var_46" "loop_var_46")))))) (add1 (+ (let ((e 55) (x true) (i "e")) 8) (block -30)))) (isbool (> -6 (sub1 (let ((loop_var_152 -29)) (loop (if (< loop_var_152 (+ -29 152)) (block (set! loop_var_152 (+ loop_var_152 1)) -65) (break 95))))))) (let ((e (block (let ((g (* 1 39)) (b (= "g" -13))) (let ((y true)) "g")) (+ (* 40 35) (block 93 -4)) (* (* -59 38) (if true 37 43)) (let ((j (block false)) (z (>= -68 -11))) (let ((h -52) (a "h")) -55)))) (g (<= input (+ (* 59 50) (let ((loop_var_118 "e")) (let ((loop_var_120 -45)) (loop (if (< loop_var_120 (+ -45 120)) (block (set! loop_var_120 (+ loop_var_120 1)) (set! e "e") (set! e 35)) (break "e"))))))))) (> (+ (let ((g "g") (i input)) -2) (* "e" "e")) (let ((j (let ((e "g") (x true) (a "e")) 95))) (let ((y "g") (a "e")) "j")))) (* (let ((d (add1 (let ((x false) (h 1)) "h")))) (block (set! d true) (let ((loop_var_144 "d")) (let ((loop_var_5 "d")) (loop (if (> loop_var_5 (- "d" 5)) (block (set! loop_var_5 (- loop_var_5 1))) (break false))))) (isnum false) (let ((loop_var_67 "d")) (loop (if (< loop_var_67 (+ "d" 67)) (block (set! loop_var_67 (+ loop_var_67 1)) (set! d "d") (set! d "d") (set! d "d") -33) (break "loop_var_67")))))) (let ((a false) (c (- (block "a" -33) (let ((loop_var_126 40)) (let ((loop_var_89 -20)) (loop (if (> loop_var_89 (- -20 89)) (block (set! loop_var_89 (- loop_var_89 1)) (set! a -64) (set! a -70)) (break 74))))))) (d (isbool true))) (let ((h (add1 "c")) (x (fun3 "c" "c" -52)) (f (set! x "a"))) (block false 33 false "h"))))) (* (let ((loop_var_55 (if false -38 83))) (loop (if (> loop_var_55 (- (if false -38 83) 55)) (block (set! loop_var_55 (- loop_var_55 1))) (break (let ((h (let ((a true)) "loop_var_55")) (x (set! h "loop_var_55")) (b (block input "loop_var_55" false))) (set! h -35)))))) (fun4 (* (add1 (* 1 -66)) (let ((e (< 53 10)) (d (> -65 62))) (let ((loop_var_35 17)) (loop (if (< loop_var_35 (+ 17 35)) (block (set! loop_var_35 (+ loop_var_35 1))) (break 6)))))) (isnum (let ((g (block true -82))) (isnum true))) (let ((y (let ((f true)) 79)) (a (* (let ((c -84) (e false)) "c") (let ((g false) (f 66) (a input)) 81)))) (let ((e "y")) (< "e" "a"))) (let ((b (block (block false) (let ((b -19) (a true) (f -9)) false) 9 (* -73 26) (main 87 false -83 true))) (z (isnum (let ((e "b")) false))) (e (let ((j (set! b false)) (z (let ((d "z") (i "d") (b 57)) false))) false))) (fun3 (let ((loop_var_60 input)) (loop (if (< loop_var_60 (+ input 60)) (block (set! loop_var_60 (+ loop_var_60 1)) -29) (break 82)))) (+ 62 98) (- input 1)))))) (+ 16 (our_code_starts_here -80 (block (* 26 (add1 (fun2 -91 true 3 -73 -85 false true))) (let ((loop_var_67 (if false 38 17))) (let ((loop_var_176 (if true 37 -42))) (let ((loop_var_184 (if 3 -35 56))) (loop (if (< loop_var_184 (+ (if 3 -35 56) 184)) (block (set! loop_var_184 (+ loop_var_184 1)) (- 16 67) (let ((c false) (x "c") (h 94)) "h") (block false -22 93)) (break (let ((d "loop_var_184") (x "loop_var_184")) "x"))))))) -82 (let ((e (if (>= 39 84) (> -11 input) (isnum false))) (x (let ((g (> 32 95)) (d (let ((j "e") (a -69)) "a")) (b (set! g "d"))) (sub1 -43)))) (set! e (let ((h false) (j true) (e "h")) "x")))) (block (+ (let ((loop_var_140 -84)) (let ((loop_var_63 62)) (loop (if (< loop_var_63 (+ 62 63)) (block (set! loop_var_63 (+ loop_var_63 1))) (break "loop_var_63"))))) (our_code_starts_here (let ((loop_var_26 36)) (let ((loop_var_72 -77)) (loop (if (> loop_var_72 (- -77 72)) (block (set! loop_var_72 (- loop_var_72 1))) (break "loop_var_72"))))) (+ 72 -11) (block -60 true false true false) (block false) (= -40 -36) (let ((j false)) 48) (+ 96 26) (block 93 true false true -14) (let ((a 3)) 76))) (block (if (block -46) (>= -23 26) true) (let ((loop_var_191 55)) (loop (if (> loop_var_191 (- 55 191)) (block (set! loop_var_191 (- loop_var_191 1))) (break "loop_var_191"))))) (- (let ((x (let ((e true) (h "e") (a "h")) true)) (e (let ((c "x") (d 28)) "x"))) (let ((loop_var_90 -46)) (loop (if (> loop_var_90 (- -46 90)) (block (set! loop_var_90 (- loop_var_90 1)) (set! x -29) (set! e -41)) (break 31))))) (let ((loop_var_89 1)) (loop (if (< loop_var_89 (+ 1 89)) (block (set! loop_var_89 (+ loop_var_89 1))) (break -49))))) (>= (let ((h (= input 81))) (let ((j true) (b "j") (y "j")) -32)) (let ((loop_var_119 -8)) (loop (if (> loop_var_119 (- -8 119)) (block (set! loop_var_119 (- loop_var_119 1))) (break "loop_var_119")))))) (let ((f (block (* (sub1 -14) (block 79 30 48 -96)) (add1 (block false 17 input -52)) (+ (let ((loop_var_143 -91)) (loop (if (> loop_var_143 (- -91 143)) (block (set! loop_var_143 (- loop_var_143 1)) -21) (break -88)))) (- 93 45)) (- (let ((x -44) (c false) (i true)) "x") (block 18 -1)) (block (block true -29) -21)))) (let ((d (let ((b (+ "f" "f")) (c (block false true "f"))) (let ((y false) (h false) (d "b")) "d"))) (y (let ((loop_var_177 "d")) (loop (if (< loop_var_177 (+ "d" 177)) (block (set! loop_var_177 (+ loop_var_177 1)) "d" 62 "f") (break 78))))) (c (< (let ((h 25) (y "y")) "y") (let ((c false)) -95)))) false)) (< (block (- (+ -56 58) (let ((loop_var_180 -96)) (loop (if (> loop_var_180 (- -96 180)) (block (set! loop_var_180 (- loop_var_180 1))) (break 57))))) (block (let ((z true) (i -89) (e true)) "i") (let ((x -26)) true) (>= -25 43)) (> (+ 69 -90) (let ((d true) (z 9)) 38)) (let ((g (- -42 15)) (d (set! g true))) (main "g" "d" "g" true)) input) (add1 (let ((loop_var_89 62)) (loop (if (> loop_var_89 (- 62 89)) (block (set! loop_var_89 (- loop_var_89 1))) (break 39)))))) (+ (block (let ((c (if input 5 -99))) false) 39 (- (sub1 19) (block -14 -46 2)) (+ (- 8 -97) (* 65 -78))) (let ((loop_var_72 (let ((y true)) input))) (loop (if (> loop_var_72 (- (let ((y true)) input) 72)) (block (set! loop_var_72 (- loop_var_72 1))) (break (set! loop_var_72 61)))))) (let ((j (+ (+ (* 33 -1) (- -26 36)) (block (let ((a false) (g true) (j 31)) false) (isnum true) (add1 70)))) (e (block (let ((y (+ input -81)) (g (> "j" input))) (block true))))) (+ (let ((h (block -4 "e" "e" "j")) (g (isnum false)) (x (let ((x 10)) false))) (let ((loop_var_188 -89)) (loop (if (< loop_var_188 (+ -89 188)) (block (set! loop_var_188 (+ loop_var_188 1)) (set! e -41) (set! e -46) -57 -66 "h") (break 0))))) (block (let ((c "e") (g -21)) false) (let ((x 31) (e "e")) -1)))) (let ((y false) (a (let ((j (>= (block 50 -9 37) 47)) (y (<= (let ((loop_var_148 -90)) (let ((loop_var_15 -74)) (let ((loop_var_20 12)) (loop (if (< loop_var_20 (+ 12 20)) (block (set! loop_var_20 (+ loop_var_20 1)) -90) (break "loop_var_20")))))) (let ((j false) (f false) (e "f")) 69)))) (block (block "y" -8 27 true -6) (let ((f -74)) -12) (block true 37 -6 -39 "j") -45)))) "a") (our_code_starts_here (* (+ (let ((c -75) (b true)) 84) (let ((z -31) (g "z")) "g")) -73) (let ((e (+ (let ((i true) (g -56)) "g") (sub1 -61)))) (- (* "e" -47) "e")) (main (+ (let ((d false) (e -26) (a true)) input) (let ((c true) (g "c") (d 85)) "d")) (block false) (* (+ -16 -48) (+ -95 -14)) (<= (let ((b false) (g 68)) 72) (let ((h -23) (f 31)) "h"))) (block (let ((z (block 34 79)) (e (block "z" true -64 "z"))) (block "e" "z" false)) (let ((d (let ((g false) (b 50)) input)) (y (let ((y false) (j "y") (a "y")) "y"))) "d") (fun1 (- 3 -64) (+ -29 -98) (<= -48 -28) (let ((loop_var_88 96)) (loop (if (< loop_var_88 (+ 96 88)) (block (set! loop_var_88 (+ loop_var_88 1))) (break -57)))))) (block (let ((loop_var_128 -29)) (loop (if (< loop_var_128 (+ -29 128)) (block (set! loop_var_128 (+ loop_var_128 1))) (break false))))) (block (block (- -69 -82) (isbool true) (fun2 -67 false input -79 93 false false))) (block (isbool (block false true)) (block (<= 97 24) (block false true) (let ((z false) (a false) (x -11)) true) (let ((z true)) -45) (fun1 50 64 false -87)) (* (block -28 9 -37) (- 85 76))) (let ((f (<= (block -54 -15) (let ((b -97)) "b"))) (e (> -63 (block false "f" -52))) (a (+ -43 16))) (* "a" (- "a" input))) (let ((y (let ((e (let ((h false)) true)) (g (let ((a -85) (j "e")) true)) (b (* 2 98))) (isnum "e"))) (x (let ((f (let ((y "y")) -10))) (isnum true))) (g (main (set! x 35) (let ((i -44)) false) (let ((h 51) (x "h")) -2) (< -72 -33)))) (- (let ((j false) (e "j") (g "g")) 22) (- "g" -37))))))))
