(fun (our_code_starts_here energy c a) (if (<= energy 0) 61 (block (set! energy (- energy 1)) (+ (set! c (block (set! a -84))) (+ (let ((h (> 47 48)) (x (set! a "a")) (j -9)) (+ 63 -12)) (+ (block true 99 -59) (sub1 -17)))))))
(fun (main energy d y b c) (if (<= energy 0) false (block (set! energy (- energy 1)) (set! energy true))))
(fun (fun1 energy h c b j) (if (<= energy 0) 56 (block (set! energy (- energy 1)) (block (let ((a false) (c -99) (h (if (block "h" true "c" true 68) (- -65 10) (block 97 true true -65)))) (block (> 50 "h") (- "energy" "c") (fun6 "c" "h" 9 "h" false "j") (let ((c "b") (z "h") (f "j")) "c") (let ((x "energy")) false))) (>= (let ((f (<= "energy" 1)) (c (>= "energy" -67)) (y (our_code_starts_here 24 -65 "energy"))) (set! b "c")) (- (let ((z "j") (f "z")) "energy") (add1 "h"))) (block "j" (let ((i (block -88 81)) (y (let ((e 38) (h "j")) false))) (* "c" -25)) (block (* 35 "c") true (set! j "b"))) (fun7 (fun3 (add1 37) (- "h" "energy") (let ((e "h")) "j")) (let ((d (let ((z true) (h 96)) "h")) (h (= "j" "b")) (f (let ((x false)) false))) (* "d" 73)) (isnum (set! c false)) (* (block -29 true "energy") (let ((b false) (e "j") (i -53)) "energy")) -55 (sub1 (block true 44)) "b")))))
(fun (fun2 energy j e) (if (<= energy 0) true (block (set! energy (- energy 1)) (block (let ((x (block (sub1 "energy") -66)) (c (let ((c (let ((c 80) (f 33) (a "e")) 86))) false))) (block (fun4 -66 63) (let ((a 58) (d 54)) 76) (<= -16 89) (block false false true)))))))
(fun (fun3 energy x g) (if (<= energy 0) 44 (block (set! energy (- energy 1)) (let ((b (isbool (let ((c (+ "g" -32)) (e (>= "g" 39))) (set! c "e")))) (y (block (let ((x (>= -51 43)) (z (if "x" "x" true))) (block -19 "x" false))))) (our_code_starts_here (block (set! x "g") (set! g "g")) (sub1 (sub1 -13)) (set! x (sub1 "x")))))))
(fun (fun4 energy z) (if (<= energy 0) false (block (set! energy (- energy 1)) (let ((e 13) (x (block (block (add1 "e") (set! energy false) (let ((a -87)) -4) (if "z" "energy" "energy")) (+ (set! e -75) (fun1 36 "energy" true false 100)))) (h (* "z" (let ((z (- "e" "z"))) (block true "x"))))) (block (set! x (block -97 false)))))))
(fun (fun5 energy f g e b c h a) (if (<= energy 0) 90 (block (set! energy (- energy 1)) (if (fun2 "e" "h" (let ((i (= "h" "b")) (d (let ((z "e")) "c")) (z (fun2 -29 true true))) (set! a "i"))) (block -82 (block (> -75 -44) (+ -65 -43) (let ((g "a") (z "e") (e "f")) 84)) (our_code_starts_here (set! h 49) "f" (sub1 "energy"))) (let ((d (>= (+ 0 "c") (block "energy" -44 -74 "c")))) 96)))))
(fun (fun6 energy y i h f x) (if (<= energy 0) -82 (block (set! energy (- energy 1)) (- (set! f (* (+ -14 33) (- "y" 33))) (let ((a (isnum (block 33 "energy" -66 false false))) (h (let ((g (* 98 -94))) (let ((z "h")) false))) (y (let ((f (set! h true)) (z "y") (i (block 54))) (<= "h" 29)))) (- (let ((f -78) (h "energy") (z "i")) "h") (block true -33 "a" true 52)))))))
(fun (fun7 energy g h f d b y) (if (<= energy 0) -57 (block (set! energy (- energy 1)) (let ((z (let ((x (let ((j (= "f" true)) (h (let ((d false) (a "j") (g true)) "h"))) (isbool "f"))) (g "x")) (set! y (set! energy 78)))) (y (let ((j (fun6 (let ((x "z") (y "g")) -32) (let ((b "f") (y 93)) "z") (let ((b true) (x "h") (a -55)) -95) (set! d "d") (let ((c 29) (x false) (e 10)) false) (isbool true))) (b (block (isbool "f") (set! energy false) (let ((j "energy")) "f")))) (+ (our_code_starts_here "d" 40 "b") (set! b "h"))))) (our_code_starts_here (- (sub1 "z") (block -5)) (fun3 (- -33 "z") (set! z 87) (set! y false)) (let ((i (add1 "z")) (y (<= "i" -69))) (block "b" -14 59)))))))
(< (let ((c (* (if (block (add1 (* (sub1 -73) (+ -98 58))) (let ((h (let ((f (block -58)) (j (> -93 -71))) (let ((a "j") (j false) (f "f")) false))) (z true)) (let ((loop_var_22 -13)) (loop (if (< loop_var_22 (+ -13 22)) (block (set! loop_var_22 (+ loop_var_22 1)) (set! z true) (set! h "h") false false) (break "h")))))) (if (<= (block (block true true true) (block input) (isbool false) (let ((i 24)) 23) -92) -99) (let ((b (block -17 (add1 -25) (* -39 51)))) (let ((j (let ((f -63) (g false) (e "b")) false)) (i (+ 44 "b")) (z "i")) (add1 96))) (sub1 (let ((loop_var_146 74)) (loop (if (< loop_var_146 (+ 74 146)) (block (set! loop_var_146 (+ loop_var_146 1)) -32 63 -82) (break "loop_var_146")))))) (sub1 (if (fun7 (let ((j input) (f "j")) "f") (let ((loop_var_16 -99)) (loop (if (> loop_var_16 (- -99 16)) (block (set! loop_var_16 (- loop_var_16 1))) (break "loop_var_16")))) true 24 (let ((f -22)) -68) 7 (let ((c false) (e 42)) false)) (let ((loop_var_31 5)) (loop (if (< loop_var_31 (+ 5 31)) (block (set! loop_var_31 (+ loop_var_31 1))) (break "loop_var_31")))) (let ((loop_var_20 -72)) (loop (if (< loop_var_20 (+ -72 20)) (block (set! loop_var_20 (+ loop_var_20 1)) 56) (break -50))))))) (let ((g (let ((loop_var_163 (block 21 -46 false 90 24))) (loop (if (< loop_var_163 (+ (block 21 -46 false 90 24) 163)) (block (set! loop_var_163 (+ loop_var_163 1))) (break "loop_var_163"))))) (z (* (let ((loop_var_65 (+ 44 "g"))) (loop (if (> loop_var_65 (- (+ 44 "g") 65)) (block (set! loop_var_65 (- loop_var_65 1)) (set! g (block -17)) (set! g (let ((g 100)) 73)) (set! g "g") (add1 -26) (- "g" "g")) (break (- 40 -31))))) (fun3 (+ (let ((e "g") (a 84) (b -96)) 77) "g") (+ (let ((loop_var_84 "g")) (loop (if (> loop_var_84 (- "g" 84)) (block (set! loop_var_84 (- loop_var_84 1))) (break 5)))) (set! g "g")) (> (let ((loop_var_76 "g")) (let ((loop_var_45 "g")) (loop (if (> loop_var_45 (- "g" 45)) (block (set! loop_var_45 (- loop_var_45 1)) 1 input) (break "g"))))) (let ((x "g") (g false) (b false)) input))))) (b (sub1 (sub1 "z")))) (let ((c (let ((loop_var_14 (let ((a -73) (g true)) -38))) (loop (if (< loop_var_14 (+ (let ((a -73) (g true)) -38) 14)) (block (set! loop_var_14 (+ loop_var_14 1))) (break (isnum true)))))) (d input) (g (sub1 (- (block "c" -55 "c" "z") (let ((loop_var_107 "z")) (loop (if (> loop_var_107 (- "z" 107)) (block (set! loop_var_107 (- loop_var_107 1)) 30 "z" 18) (break 48)))))))) (* (* (block true true "z") (let ((i 78) (c input)) input)) (* -65 (block "g" "z" input))))))) (i (block true (* (let ((z (isnum (block false)))) (add1 (- (- "c" -32) (- "c" 49)))) (block (let ((h (let ((g (let ((g -69) (c 2) (d false)) false))) (set! g 57))) (b (block (let ((h "c")) "h")))) (isbool false)) (set! c (block (- "c" "c")))))))) (let ((loop_var_18 (+ -74 "i"))) (loop (if (< loop_var_18 (+ (+ -74 "i") 18)) (block (set! loop_var_18 (+ loop_var_18 1)) (set! c (if (<= "i" (let ((f (block "i" "c" true))) (sub1 -49))) (add1 (+ (+ 93 "c") (+ "i" "c"))) (let ((x (let ((z (+ "i" "c")) (a (+ "c" "i"))) (- -11 "c"))) (z (isbool (let ((e true) (d false) (i -41)) "d"))) (d (let ((f (sub1 -61)) (z (set! z true))) 65))) (if (set! d "z") (let ((z "i")) "x") (fun6 input "i" "c" -36 "z" true))))) (set! i (add1 (let ((g (fun3 (+ "c" -92) (set! c "i") (set! i true))) (e (set! i (= "g" 57))) (d (block (set! g -98) (+ "i" -78) (let ((d true) (z "d")) "e") (- "g" "i") (fun1 "c" input "e" "e" 63)))) -39))) (let ((b 56) (i (set! c "b"))) (let ((x (>= (let ((g true) (y "i") (f true)) 16) "b")) (a input)) (* (let ((c "a") (e "x") (d true)) input) (block "i" true 8 "x" "i")))) (- (sub1 -98) "c") (sub1 (* 39 (sub1 (sub1 "i"))))) (break (+ (fun5 (let ((e (let ((y false) (a false)) true)) (j "c")) (- "j" "i")) (> (* -71 "loop_var_18") (if -78 "i" 40)) (let ((f (>= "c" -9))) (let ((i true) (d "i")) "i")) (isnum (if false false true)) (block (block "i" false 93 "loop_var_18")) (fun2 (block input 51) true (let ((y "loop_var_18") (d true)) true)) (block -88 (let ((c "c") (j true)) -83) (add1 46) (set! c false)) (let ((f (let ((h input)) 83)) (g (let ((g -39)) "loop_var_18")) (a (set! c "i"))) (if false false false))) (sub1 (+ "i" 90)))))))) (+ (- (* (+ 53 (sub1 -33)) (let ((a (= (let ((loop_var_30 input)) (loop (if (> loop_var_30 (- input 30)) (block (set! loop_var_30 (- loop_var_30 1))) (break true)))) (let ((h (* 78 -65))) true)))) (let ((loop_var_78 (let ((x input) (d "a")) 16))) (let ((loop_var_84 (- 96 -45))) (loop (if (< loop_var_84 (+ (- 96 -45) 84)) (block (set! loop_var_84 (+ loop_var_84 1)) (set! a (set! a -73)) (set! a (let ((c 15)) -60)) (set! a (block -45 -52 42))) (break (+ -88 21)))))))) (let ((e (sub1 (let ((loop_var_142 (if -88 63 65))) (loop (if (> loop_var_142 (- (if -88 63 65) 142)) (block (set! loop_var_142 (- loop_var_142 1)) -90 (sub1 100) (fun7 -29 -98 true 50 -35 -85 false)) (break "loop_var_142"))))))) (let ((g (block false (block (let ((b true)) -76) (main -85 "e" 79 false false) (if true -94 "e")) (block (isbool true) (block true true false true) (< "e" -57)) (block (let ((loop_var_75 "e")) (let ((loop_var_187 -78)) (let ((loop_var_192 66)) (loop (if (< loop_var_192 (+ 66 192)) (block (set! loop_var_192 (+ loop_var_192 1)) (set! e false)) (break false))))))) -94)) (i false)) (block (let ((e (- "g" 15))) (* input 63)) (+ (let ((loop_var_109 "g")) (let ((loop_var_62 input)) (let ((loop_var_150 55)) (loop (if (< loop_var_150 (+ 55 150)) (block (set! loop_var_150 (+ loop_var_150 1)) (set! i -76) "g" "g" "g") (break "loop_var_150")))))) (sub1 "g")) (sub1 (add1 36)))))) (add1 (let ((loop_var_126 (block false false -43))) (let ((loop_var_33 (sub1 -53))) (loop (if (< loop_var_33 (+ (sub1 -53) 33)) (block (set! loop_var_33 (+ loop_var_33 1))) (break (add1 (let ((z (let ((i "loop_var_33")) true))) (let ((h "loop_var_33") (x "loop_var_33") (e false)) "x")))))))))))