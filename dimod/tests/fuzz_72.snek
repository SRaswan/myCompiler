(fun (our_code_starts_here energy j f g e z) (if (<= energy 0) 39 (block (set! energy (- energy 1)) -19)))
(fun (main energy b) (if (<= energy 0) true (block (set! energy (- energy 1)) (< (* (let ((y (block "energy" false "energy" "energy")) (c (set! energy "y"))) 66) (add1 (let ((e true) (x true)) -94))) (* (let ((x (let ((c "energy")) -98)) (e (let ((c false)) "energy")) (f (<= "e" -64))) "energy") (add1 (- "b" 89)))))))
(fun (fun1 energy j h i e g f) (if (<= energy 0) true (block (set! energy (- energy 1)) (> (block 72 (add1 (- "j" "energy")) (+ (set! energy "energy") (- "j" "energy")) (block (isbool true)) (our_code_starts_here (+ -74 20) (* "energy" -28) (let ((h -56) (y "i") (j "i")) "i") (set! f -96) (>= 26 -21) (if -47 false false))) (let ((h "h") (c (<= (block "g" "h" "e" -94) (let ((d "f") (f "f")) "h")))) (sub1 (our_code_starts_here -11 "j" false -39 "i" "g")))))))
(fun (fun2 energy) (if (<= energy 0) true (block (set! energy (- energy 1)) false)))
(fun (fun3 energy x) (if (<= energy 0) false (block (set! energy (- energy 1)) (> (set! energy "energy") (our_code_starts_here (* (add1 10) (if "energy" "x" "energy")) (* (set! energy 59) (let ((b false) (a false) (e false)) -38)) (= (if 62 "energy" -14) 88) (block (- 24 -11)) (main (block -9 false "energy" false "x") (let ((d false) (a "x")) -72)) (let ((x (- -87 "x"))) (let ((f -93)) true)))))))
(fun (fun4 energy i h f a) (if (<= energy 0) true (block (set! energy (- energy 1)) (isbool (isnum (set! a (isbool false)))))))
(fun (fun5 energy f j g) (if (<= energy 0) 42 (block (set! energy (- energy 1)) (* (let ((i -5) (d (+ (- 34 "i") (let ((i "g") (d true) (z true)) -28)))) (block (let ((c "g")) false) (+ 49 "j"))) (block (add1 "j") (- (let ((j true) (y "energy") (a 53)) -98) (add1 "f")))))))
(fun (fun6 energy b x d c) (if (<= energy 0) false (block (set! energy (- energy 1)) (let ((h (= (<= (set! energy "energy") (- "energy" "energy")) (block (fun5 "energy" -38 "c" "d") (<= "b" "b")))) (y (if (block false) (< (set! energy -67) (block -69)) (isbool (>= "energy" "energy")))) (j (sub1 "b"))) (let ((e (block (let ((y "energy")) false) (let ((y true) (z true)) -46) (our_code_starts_here 70 -62 false "j" "x" false) "j" (* 7 92))) (x (block (if false -62 -51) (block "x") (let ((d -19) (y true)) "b") (< -10 "energy") (+ 53 -12))) (d (>= (block 86) (let ((c "j") (a "c") (g 86)) "c")))) (<= (* 82 "b") (+ "x" "b")))))))
(let ((loop_var_111 (- 43 9))) (loop (if (< loop_var_111 (+ (- 43 9) 111)) (block (set! loop_var_111 (+ loop_var_111 1)) (let ((f (>= (our_code_starts_here (add1 (- (+ 19 59) (sub1 -85))) (let ((c (let ((i (if false input 51)) (b (isnum true)) (d "b")) (let ((y "i") (e true)) -3))) (i (let ((j (fun3 63 true)) (x (set! c false)) (c (let ((h -95)) "x"))) (isbool "c")))) (* (block false "c" -80) (set! c "c"))) (let ((d (let ((f (>= 2 -75)) (a (+ 66 47)) (x (>= "a" "a"))) (block "a" false)))) (let ((c (block -6 78)) (b (let ((z "c") (g 65)) "g"))) (if "d" false false))) (* (* (fun5 -10 9 true false) (let ((y -21) (h -2) (a "y")) 80)) (let ((i (- -31 -43)) (x (if false -58 "i"))) (set! x -88))) (if 14 (block (isbool true) (isbool false) (let ((i -58)) 89) (fun1 94 50 false false true false -79)) false) (let ((y (block 92 (block 40 false false) (let ((y false)) false) (+ -10 38))) (d (- (block false 97 "y" "y") (block false false "y"))) (e (set! d (our_code_starts_here 64 -75 true -95 false false)))) (block (let ((b -1)) "e") "d" (block "e" true) (- "y" "y") (fun2 18)))) (if (let ((z (> (if -21 37 -47) (if false -19 -84))) (b (fun5 (let ((i -100) (f "i")) "f") (+ 16 -58) (let ((i -87) (a true)) "a") false)) (y "b")) (>= (+ "b" "y") (+ "b" -66))) (+ -69 (- (- 13 -88) (our_code_starts_here -1 2 true 10 true true))) (let ((e (+ (sub1 43) (block 73 -33 81 -66 78))) (a (isnum (let ((e 62) (z -38)) false)))) (block (let ((j "e") (h "a")) input) (set! a input) (let ((i "e") (d "i") (y 10)) 25) (fun5 -30 59 "a" "a") (let ((j 33) (d true)) "j")))))) (z -68)) (set! f (sub1 (let ((j (set! z (block true "z" -61 input))) (e (let ((f (isnum "f")) (c (- input -62))) (if "j" false true)))) (let ((j (let ((a -58)) 64)) (y (isnum "f")) (h (block "z" 16))) (* input 65))))))) (break (- (sub1 (set! loop_var_111 (let ((c (let ((i (isnum true))) (set! i "i")))) "loop_var_111"))) "loop_var_111")))))