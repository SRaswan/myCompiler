(fun (our_code_starts_here energy i d y b) (if (<= energy 0) -69 (block (set! energy (- energy 1)) (+ (sub1 (block (+ "energy" "b") (set! i true) (block "d" false -25 true 22))) (set! energy (let ((z (+ -88 "i")) (f (< 19 "b")) (d (<= 57 "i"))) (block "b" 22)))))))
(fun (main energy f) (if (<= energy 0) false (block (set! energy (- energy 1)) true)))
(fun (fun1 energy) (if (<= energy 0) 15 (block (set! energy (- energy 1)) (block (let ((i (block (> 60 "energy") (let ((x -87)) true))) (y (isnum true)) (f (* (let ((z false) (j "energy") (e true)) 26) (block 80)))) (let ((j (+ 73 -52)) (f (let ((f "j") (d -95) (z 6)) true)) (h (- -18 11))) (isbool false))) (= (let ((b (block false -54 7)) (d false)) (let ((g true)) "energy")) "energy") (let ((y (let ((h (let ((a false) (x "a")) "x")) (x (>= "energy" "energy"))) (isbool false))) (f (let ((c (our_code_starts_here -90 true false -98 "y")) (i (if 79 "y" "c")) (a (< 87 "energy"))) (let ((c false) (b "c")) false))) (g (- (let ((x true)) "energy") (let ((y "energy")) "energy")))) (set! f (set! f "g")))))))
(fun (fun2 energy y j b a i z f) (if (<= energy 0) false (block (set! energy (- energy 1)) (let ((e "energy") (a (block (let ((j (- -15 "energy")) (h (isbool "b"))) (let ((c true) (b "j") (j -45)) 51)) (set! a (- -31 -53)) (if (let ((a -89) (y -23) (j 36)) 40) (+ -92 28) (set! e 37)) "energy")) (y (fun5 (let ((g (let ((e "a") (a 58)) true)) (h (>= 100 "energy")) (d (block false "b" false))) (let ((x "b")) -83)) (isnum (fun2 "a" "f" "j" false "z" true "i" "e")) (* (let ((y "e") (h -61)) "y") (- "a" -63)) "y"))) (isbool (isnum (fun2 -74 true "z" true true "j" "j" -61)))))))
(fun (fun3 energy x g e) (if (<= energy 0) 79 (block (set! energy (- energy 1)) (let ((d (block (isbool (>= "energy" "x")) "x" (let ((f (block "g")) (j (< -40 -75))) (* "x" 24)) (isbool (> "energy" -8)) (block (add1 "g") (>= "energy" "x")))) (b (sub1 (set! e (let ((j "x")) -46))))) (+ (let ((j (let ((x -88) (c false) (a 78)) "e"))) (let ((j false) (h "b")) 88)) (set! e (+ 99 "x")))))))
(fun (fun4 energy g x b e) (if (<= energy 0) -12 (block (set! energy (- energy 1)) (set! b (let ((z (+ (block "energy") (let ((d "e") (a "e")) "g")))) (let ((x (let ((b "e") (x "b")) "e")) (a (main "b" 93))) 88))))))
(fun (fun5 energy b a j) (if (<= energy 0) false (block (set! energy (- energy 1)) (>= (let ((f (isnum (set! a false))) (x (fun4 "b" (set! a 14) (set! a "energy") (< -71 74) 74)) (b (let ((h (set! energy "x"))) (* "b" 1)))) (* (set! x -40) (- -47 46))) (block (+ (let ((j "b")) 32) (let ((z "a") (g false) (c "energy")) "j")))))))
(fun (fun6 energy i h a j d c x) (if (<= energy 0) -44 (block (set! energy (- energy 1)) "c")))
(fun (fun7 energy y j d i g f x) (if (<= energy 0) false (block (set! energy (- energy 1)) (= (let ((e (<= (let ((j -55) (g 29)) "g") (block -79))) (x (block (block false "i" -91 -16 true) (let ((c "j") (i false)) false))) (d (set! j (set! energy "i")))) (let ((b (set! d "j")) (g (fun6 "f" 84 false -69 "x" -84 -1 "b")) (y (let ((z "energy") (a "i")) 71))) (isnum "x"))) (isnum (if (* "g" -10) (< "energy" "g") (block "i" true)))))))
(> (let ((d (block (let ((d (add1 (block (>= (let ((loop_var_173 -99)) (loop (if (> loop_var_173 (- -99 173)) (block (set! loop_var_173 (- loop_var_173 1))) (break "loop_var_173")))) -22) (our_code_starts_here (- -56 -64) (let ((i -76) (h "i") (e "h")) false) (if -98 false true) (let ((z -98) (j true) (f "j")) "z") (if true false true))))) (g (sub1 (block (let ((loop_var_83 "d")) (loop (if (< loop_var_83 (+ "d" 83)) (block (set! loop_var_83 (+ loop_var_83 1))) (break true)))) (let ((f (let ((x -46) (g false)) "d"))) (<= "f" "f")) (set! d true) (= (if -73 false true) true) (let ((a -99)) "d"))))) (let ((f (set! d (>= (let ((x false) (i "x") (g input)) "g") (set! d input)))) (g -38) (h 67)) (block (block true (if -11 "g" "g")) (* (let ((loop_var_158 input)) (let ((loop_var_153 "g")) (loop (if (> loop_var_153 (- "g" 153)) (block (set! loop_var_153 (- loop_var_153 1))) (break "h"))))) -20) (block (let ((loop_var_120 83)) (loop (if (> loop_var_120 (- 83 120)) (block (set! loop_var_120 (- loop_var_120 1)) (set! f "d") (set! f 23) (set! g "d") -39 "g") (break 18)))) (- input 92) (isnum "f") (<= "g" "d") (let ((h "f") (i -61) (f "f")) false))))) (let ((j (<= (our_code_starts_here (block (fun4 12 21 -51 true -81)) (let ((loop_var_68 -46)) (let ((loop_var_46 -96)) (loop (if (> loop_var_46 (- -96 46)) (block (set! loop_var_46 (- loop_var_46 1)) true false) (break true))))) (<= (let ((loop_var_25 -99)) (loop (if (> loop_var_25 (- -99 25)) (block (set! loop_var_25 (- loop_var_25 1))) (break -77)))) (- -13 -71)) (let ((loop_var_18 38)) (loop (if (> loop_var_18 (- 38 18)) (block (set! loop_var_18 (- loop_var_18 1))) (break -20)))) false) (add1 (let ((z (sub1 17)) (i (block true))) (let ((x "i") (a "z") (f true)) "a"))))) (f (set! j (fun7 (block (add1 -52) (let ((d false)) -52) (add1 88)) (> -34 (- -73 -79)) (block (let ((x -43) (e "x") (d "x")) "x") (let ((f -37) (h "j")) 92)) (<= (set! j 71) (block 61 "j" "j" 58)) (let ((c (+ -66 -48))) -91) (let ((loop_var_3 -43)) (let ((loop_var_84 -1)) (let ((loop_var_179 86)) (loop (if (> loop_var_179 (- 86 179)) (block (set! loop_var_179 (- loop_var_179 1))) (break "loop_var_179")))))) (< (let ((y false)) -80) (block -54)) (isbool (let ((loop_var_78 -62)) (let ((loop_var_1 70)) (loop (if (> loop_var_1 (- 70 1)) (block (set! loop_var_1 (- loop_var_1 1)) (set! j "j") (set! j "j")) (break "j")))))))))) (isnum (< (let ((f (block true "f" 29 "f")) (h (let ((loop_var_53 "f")) (loop (if (< loop_var_53 (+ "f" 53)) (block (set! loop_var_53 (+ loop_var_53 1)) (set! j -32) "f") (break -52)))))) (let ((loop_var_53 "f")) (loop (if (> loop_var_53 (- "f" 53)) (block (set! loop_var_53 (- loop_var_53 1)) (set! j "f") (set! j 0)) (break 86))))) (* (let ((b true)) "f") (let ((loop_var_122 "f")) (let ((loop_var_41 "f")) (let ((loop_var_39 -74)) (loop (if (> loop_var_39 (- -74 39)) (block (set! loop_var_39 (- loop_var_39 1))) (break 46)))))))))) true)) (i (block (block (+ (let ((c true) (a (let ((y (set! d "d"))) (block 17 false 89 false "y")))) (let ((x (let ((g "c") (d -16)) input)) (j (let ((c true) (g "d")) false)) (z (block "x" true))) (* "x" -1))) (let ((loop_var_44 -84)) (loop (if (< loop_var_44 (+ -84 44)) (block (set! loop_var_44 (+ loop_var_44 1)) (add1 64)) (break (+ input 90)))))) (+ (if "d" (- (block false "d" 4) (block false 94)) (let ((loop_var_10 -80)) (loop (if (> loop_var_10 (- -80 10)) (block (set! loop_var_10 (- loop_var_10 1)) (set! d 14) 11 -22 8) (break "loop_var_10"))))) (let ((loop_var_194 (* 16 93))) (loop (if (< loop_var_194 (+ (* 16 93) 194)) (block (set! loop_var_194 (+ loop_var_194 1))) (break (let ((f 69) (j "d") (g "d")) "f")))))) (<= (let ((c (< (sub1 -26) (* 34 14))) (e (< (block false false -99) (- 62 -79))) (i (let ((j (let ((loop_var_4 -9)) (loop (if (< loop_var_4 (+ -9 4)) (block (set! loop_var_4 (+ loop_var_4 1)) (set! c "c") false) (break "d"))))) (g (let ((z false) (e -81)) -22)) (f (let ((g "g")) "e"))) (> -94 "g")))) (block (let ((loop_var_168 93)) (let ((loop_var_84 -77)) (let ((loop_var_136 -1)) (loop (if (> loop_var_136 (- -1 136)) (block (set! loop_var_136 (- loop_var_136 1)) (set! c 45) (set! i -42)) (break "loop_var_136")))))))) (block (+ (let ((loop_var_87 28)) (loop (if (< loop_var_87 (+ 28 87)) (block (set! loop_var_87 (+ loop_var_87 1)) (set! d 42) (set! d -45) -23 80) (break "loop_var_87")))) (let ((a false) (j "a") (i 55)) "i")) (block (block -7 true "d" 57 87) (let ((y -71) (z "d")) "y") (let ((d -96) (f "d")) 9) (let ((i 70)) -41)))) (>= (let ((f false) (h (<= (let ((loop_var_197 25)) (loop (if (< loop_var_197 (+ 25 197)) (block (set! loop_var_197 (+ loop_var_197 1))) (break -100)))) (block 30)))) (block (let ((f -43) (j false) (z "f")) "f"))) -75) true) (let ((b (isbool (let ((h (let ((a (let ((h 63) (c 8) (i "h")) "i")) (b (let ((loop_var_152 input)) (loop (if (> loop_var_152 (- input 152)) (block (set! loop_var_152 (- loop_var_152 1)) (set! d -33) (set! a "a") (set! a "a") 59 "a") (break "loop_var_152"))))) (x (isnum true))) (let ((d true)) "b")))) (let ((e (let ((x 28) (e "h") (b false)) "d"))) (main "h" "h"))))) (c (set! d (fun3 (let ((i (sub1 20)) (j (isbool "b"))) (let ((a "d") (j "a")) -19)) (let ((e (+ 61 -79)) (j (<= "e" "e")) (y (sub1 "e"))) (let ((y false)) "e")) false (let ((loop_var_23 input)) (loop (if (< loop_var_23 (+ input 23)) (block (set! loop_var_23 (+ loop_var_23 1)) (set! b false) (set! d "b") "b" "d" "d") (break "d")))))))) (block (* -4 (set! d (block 76 39))) (+ (set! c (* 26 -58)) (set! c (+ -10 1))))) (add1 94))) (e (> (* (block (sub1 (let ((d (<= 68 input)) (j (isnum true))) "i")) (- (- (let ((y "d")) "i") -97) (- (- 8 "i") (- "i" 48))) (sub1 (block (add1 "i") (= false "d") (block "d" "d" "d" "i"))) (* (+ (fun6 37 "i" false "i" true -69 "i" true) (let ((i false) (b false) (x "d")) "i")) (+ (let ((h "i") (a "h") (x true)) "a") (set! i input)))) (set! d (+ (let ((f (let ((i "i") (c "d") (g "i")) -69))) -94) (+ (block "d" 9) "i")))) (let ((b (block (isnum (block (* "i" -16) (>= 27 -63))) (let ((f (= (let ((f "i") (b false) (z false)) -60) (add1 -73))) (j (- (let ((g 34) (h "i") (a false)) "g") (let ((loop_var_77 4)) (loop (if (> loop_var_77 (- 4 77)) (block (set! loop_var_77 (- loop_var_77 1)) "i") (break "i"))))))) (let ((h (* 6 88)) (z (= 66 -59))) (let ((f "j") (c -89)) true))) (> (* "i" (let ((z "i")) "i")) (fun1 (set! d "i"))))) (c (isnum (>= (let ((z (let ((loop_var_157 "i")) (loop (if (< loop_var_157 (+ "i" 157)) (block (set! loop_var_157 (+ loop_var_157 1)) false) (break true))))) (d (block "b" "d" "i" "i" -44))) (let ((f -77)) "f")) "i"))) (y (block (= (<= (let ((g -80)) 0) (let ((h true) (z true)) input)) (= (set! b -10) (block -4 "d" input 27))) (- (let ((loop_var_144 -72)) (loop (if (< loop_var_144 (+ -72 144)) (block (set! loop_var_144 (+ loop_var_144 1)) (set! c -39) "i") (break "loop_var_144")))) (let ((d "c") (c (let ((z "b") (b true)) "d")) (e (- "i" -70))) (+ "i" "e"))) (>= (let ((y (isnum "b"))) (block 45 -40 "i")) "i")))) (* (let ((b (>= (let ((a 54)) -42) -25))) (set! y (let ((a "c") (g "b") (c "i")) "c"))) (block (block (let ((c "i") (e "c") (j "b")) "d") (let ((f "c") (d false)) false) (let ((f "d")) "i")) (- (* input 93) (* -19 "i")) (>= (- 69 36) -14) (block (let ((c false) (b "i")) "b") (add1 5) (<= "i" "i") false (let ((loop_var_107 "i")) (loop (if (> loop_var_107 (- "i" 107)) (block (set! loop_var_107 (- loop_var_107 1)) -32) (break "i"))))))))))) (let ((loop_var_168 (set! i "i"))) (let ((loop_var_22 (let ((a "i") (g "d")) "a"))) (let ((loop_var_136 (block true "e" "i"))) (loop (if (< loop_var_136 (+ (block true "e" "i") 136)) (block (set! loop_var_136 (+ loop_var_136 1)) (set! i (* (- (block (let ((h -39) (e "i")) -17) (= "e" true) (set! e true) (set! d 0)) "i") (block (* (+ 10 "i") (- "i" -18)) (block (let ((j false) (g "e") (h true)) "i") (<= "i" 99) (>= 38 "i") (block 34))))) (set! d (- (- (let ((h (set! d "i")) (i (- 83 35))) (+ -76 -48)) (add1 -42)) -20))) (break (fun3 (let ((d "e") (g (main -84 -53)) (c (< "loop_var_136" (block "g" -13 -94)))) (* (+ "g" "i") (block "i"))) (if (block (let ((e "e") (i input) (y "e")) "e") (fun5 -6 "d" -40 -78) (set! loop_var_136 false) (add1 63) (let ((b true) (i "i")) -84)) (let ((z (<= "i" input))) (let ((g "loop_var_136")) "g")) (let ((x true) (g (set! loop_var_136 "d")) (z (let ((a "e") (i input)) "x"))) (* "i" -24))) (block (>= (* 9 94) (fun4 97 "loop_var_136" -51 "d" "loop_var_136")) (isbool (= "d" "e")) (fun4 (- "loop_var_136" "i") (add1 12) (block true 67 "e" "e" -51) true (let ((i false) (d 43) (e true)) "loop_var_136")) (let ((e (let ((y "d") (f "d")) input)) (c (let ((i "e") (a "loop_var_136") (x "i")) true)) (b (let ((y 66) (e 49) (a 18)) 43))) (>= -100 78)) (< (set! d 36) (fun1 64))) (set! i (block (isnum true) (isbool "d"))))))))))) (+ 65 (let ((a (let ((h (add1 (- (block -40) (let ((loop_var_124 input)) (let ((loop_var_57 36)) (loop (if (< loop_var_57 (+ 36 57)) (block (set! loop_var_57 (+ loop_var_57 1))) (break "loop_var_57")))))))) (d (set! h (block (set! h (let ((c false) (j "c")) 15)) (let ((d (sub1 39))) (block false true true)) (- (- "h" "h") (let ((b "h")) 24)) (add1 (block 69 true "h" "h")) (let ((j true) (x false) (y (let ((b -62)) true))) (+ "h" -55)))))) (* (block (- (let ((e "h") (d true)) 24) (let ((loop_var_144 "h")) (loop (if (< loop_var_144 (+ "h" 144)) (block (set! loop_var_144 (+ loop_var_144 1)) (set! h "h") (set! h 25)) (break 74))))) (set! d (let ((loop_var_80 "d")) (loop (if (> loop_var_80 (- "d" 80)) (block (set! loop_var_80 (- loop_var_80 1)) "h" 65 20) (break -62))))) -25 (add1 (block false "d" false 32))) (let ((d (isnum (>= 32 38))) (y (<= (* 0 "h") input))) (block (let ((loop_var_195 25)) (loop (if (> loop_var_195 (- 25 195)) (block (set! loop_var_195 (- loop_var_195 1)) "h" 81 "h") (break -68))))))))) (c (let ((a (> (+ (let ((loop_var_73 "a")) (let ((loop_var_132 "a")) (loop (if (> loop_var_132 (- "a" 132)) (block (set! loop_var_132 (- loop_var_132 1)) (set! a "a") (set! a -14) (set! a "a")) (break "loop_var_132"))))) 75) (block (if (block false "a" true) (let ((e true) (i 73)) "i") "a"))))) (block (isnum (block (<= "a" "a"))) (block (block (block "a") (let ((a false) (c false) (h "a")) true) (set! a "a") (- -26 -92)) (* (* "a" "a") (set! a "a")) (sub1 (set! a 12))) (let ((loop_var_47 -57)) (loop (if (< loop_var_47 (+ -57 47)) (block (set! loop_var_47 (+ loop_var_47 1))) (break (add1 "loop_var_47"))))) (sub1 (let ((f (- "a" input))) (block "f" true -70))))))) (sub1 (block (sub1 "c"))))))