(fun (our_code_starts_here energy i) (if (<= energy 0) -13 (block (set! energy (- energy 1)) (set! i (add1 (* (set! energy "energy") (if 7 43 "i")))))))
(fun (main energy e g a b z) (if (<= energy 0) false (block (set! energy (- energy 1)) (let ((e (let ((e (> (let ((z "z") (b "g")) "energy") (block 1 -30 -13 45 -81))) (a (fun2 (block -27 -23 66) (- "b" -23)))) (= (isbool "e") (let ((d "energy")) "z")))) (a true)) (> (sub1 (* "e" "energy")) (set! a 3))))))
(fun (fun1 energy h g c i e f z) (if (<= energy 0) -71 (block (set! energy (- energy 1)) (let ((x (+ (let ((y (>= 57 "h")) (j (set! z true)) (h (set! f "energy"))) (if true "c" -68)) (set! e (set! h -4)))) (y (<= (fun2 (let ((h "i") (y 58)) 69) (block "h" -55 "e" "x")) (- (* -80 7) (set! x -23))))) (let ((h (+ (let ((y 88) (e "y")) "x") (block false 52 "i" true "g")))) (let ((a (let ((f "i")) "i")) (y (let ((y false)) true)) (b (let ((h "y") (j "e") (g "a")) 100))) (- "c" "z")))))))
(fun (fun2 energy e) (if (<= energy 0) 40 (block (set! energy (- energy 1)) (let ((y (< (let ((d true) (z -82)) (let ((f "d") (b false) (d "energy")) 57)) "energy"))) (let ((y (let ((e (* 98 79)) (f (isnum "y"))) (let ((e false) (d "y") (i -70)) -12)))) (if (* 7 "e") (+ "e" 72) (let ((g true) (c false) (a "y")) "y")))))))
(fun (fun3 energy i d x) (if (<= energy 0) 90 (block (set! energy (- energy 1)) (set! d (block (+ (* "d" "i") (block true "x" "i" "d" "energy")) (>= (- "d" -90) (set! d -48)) (let ((b (<= 55 17))) (block "d" -45)))))))
(let ((loop_var_57 (add1 24))) (let ((loop_var_30 (let ((h true) (c -54) (d true)) "c"))) (loop (if (< loop_var_30 (+ (let ((h true) (c -54) (d true)) "c") 30)) (block (set! loop_var_30 (+ loop_var_30 1)) -4 (if (+ (let ((x (+ (- (- 43 34) (* 68 -24)) (sub1 (if 49 22 41))))) (+ (+ (sub1 -93) "x") (block (sub1 "x")))) (block true (+ 13 45))) (fun3 (let ((c (- (+ (* -36 -51) (block -87)) (- (+ 74 41) (block true 10 -19 false 45)))) (d (let ((y (block (let ((g true)) "g") (fun2 "c" "c") (sub1 69) (let ((j 22) (c true) (d "c")) "c")))) (set! c (block -5 61 false))))) "c") (if (block (- (if 99 48 47) (- -88 -1)) (let ((d (- 49 54))) (let ((z "d") (b 71)) false))) -10 (our_code_starts_here (let ((b (main -59 false true 89 true false))) (let ((d "b") (a false)) -54)) (if (let ((x false)) 1) false (let ((j true) (d 14)) "j")))) (<= (block (let ((x (block -68 7 false true))) (< 2 -8)) (let ((b (block false -92 8)) (j (fun3 76 33 true -85)) (c (* -51 -70))) (add1 "c")) (< (let ((j false) (c 13)) "c") (- 76 5)) (let ((g (block 2 true))) (set! g -8)) (if (< -64 68) (fun3 -58 67 true -59) (our_code_starts_here 94 false))) (add1 (let ((a (if -10 37 -4)) (y (>= -74 "a"))) (fun2 "a" -53)))) (* (+ (+ (add1 19) (block true 46 70 51)) (fun3 (+ 28 -18) (block -45 false -95 39) (main -80 false false -92 true false) -70)) (block (block (fun1 -79 -80 36 true 75 43 70 false) true true (= true true)) (+ (if true 81 66) (let ((e false) (f true)) -77))))) (block (let ((h (* (fun1 (let ((e -67) (c "e") (h -42)) 56) -18 3 (block -52 false) (fun3 -72 79 false -16) (* 16 4) (+ 80 47) (main -8 true false 81 false true)) (+ (add1 3) (let ((h true) (i false) (e 19)) -24)))) (z (set! h (block (let ((g true) (x true) (j "x")) "h") (block true "h" true) (isnum false))))) (> (- (- "h" "h") (* "h" -35)) (sub1 (if "z" "h" "h")))) (+ (- (let ((a -76) (e (* -69 61)) (x (main "a" false false -73 false false))) (add1 2)) (* (* 88 -20) (if 80 -30 -68))) (* (* (* -52 -41) (fun2 21 13)) (let ((g 27)) (let ((d true) (i 69)) -13)))) (if (let ((j (let ((z false)) (set! z 25))) (e (block (let ((j false) (f false)) "f") (let ((e "j") (x "e")) true) (<= -94 "j")))) (set! e (isnum input))) (block (let ((e (add1 -97))) (+ "e" "e")) (>= (- -80 44) (let ((b true) (i "b") (j -3)) "j")) (let ((f (block true 40 true true false)) (y (= -52 -44)) (e (isnum "f"))) (let ((i false) (d 5) (y 22)) false)) (- (add1 -30) (sub1 -88))) (block false (let ((b (+ 73 -73))) (let ((f false) (b -93)) true)) (fun3 (block false 0) (our_code_starts_here 67 false) (isbool true) (block -16))))))) (break (let ((g (add1 (let ((a true) (b (block (* (* "loop_var_30" 17) (set! a "loop_var_30")) (let ((y (+ "loop_var_30" "loop_var_30")) (h (<= 91 33)) (b (+ "loop_var_30" -31))) (let ((x "y") (d "x")) true)) (* (- 52 "loop_var_30") (let ((i "loop_var_30") (c "loop_var_30")) "loop_var_30")) true))) (add1 (let ((h (sub1 "loop_var_30"))) (block "b" "a" "loop_var_30"))))))) (block (isnum (let ((d (block (sub1 12) (block true 23 -5) (block false true "g" 66))) (j (>= (sub1 "loop_var_30") (let ((e "g")) "e")))) (let ((y (isnum false)) (z (* 8 "d")) (d (if "loop_var_30" false true))) "y"))) (let ((d (set! g (block (let ((a -14) (x "loop_var_30")) -87) (let ((x -13) (e false)) "loop_var_30") (block true "g" "g" "loop_var_30" "g") (>= "g" -25) (set! g "loop_var_30")))) (z (< (- "d" (block false true true "loop_var_30")) (let ((g (block true -19))) (set! d -75))))) (block (let ((j (let ((b 72) (a -23) (c "z")) false))) (set! d "d")) (isnum (let ((b "loop_var_30") (a "b")) "z")) (main (let ((j "d")) "j") (let ((e "g") (z false)) false) (block false) (block 60) (main "d" false true "g" true "z") (let ((d "z")) "d")) (block (set! z "loop_var_30") (set! d "z")) (let ((g (set! g false)) (j (add1 "g"))) (block "g" "z")))) "loop_var_30")))))))