(fun (our_code_starts_here energy z h g b y) (if (<= energy 0) -17 (block (set! energy (- energy 1)) 22)))
(fun (main energy y a b j h x e i) (if (<= energy 0) false (block (set! energy (- energy 1)) true)))
(fun (fun1 energy b) (if (<= energy 0) true (block (set! energy (- energy 1)) (let ((j (block (* (our_code_starts_here 3 true false "b" false true) 52) (>= (+ 33 "energy") (- 88 -95)) (set! b (* "energy" -55)) (set! b (block -45 -91 false)))) (e (- (* (let ((e "j") (c false) (i "e")) "b") (block -76 "energy")) (if (block "energy" 38) (- -18 "b") -78)))) (let ((x (> (block true 40) (if -9 "b" "e")))) (block (let ((g true)) true)))))))
(fun (fun2 energy z g b y) (if (<= energy 0) true (block (set! energy (- energy 1)) (main energy (isbool (set! b (block "y" true))) (let ((a false) (b (let ((h (<= "y" 90)) (f (- -64 61)) (d (let ((i "b")) 94))) (isnum "a"))) (f 57)) (let ((h (> "y" 52))) false)) (fun1 (set! g (block "energy")) (block (set! z "b"))) (block (let ((h 22)) (block false "z" 12 "z" -49)) (block (+ 97 -74) (let ((c "b")) -75) (* "y" -45)) (let ((h (let ((y -9) (i false)) "y")) (i (* -10 -38)) (j (block 86 "g" true "y"))) (fun3 59 true "b" "b" -8 -45 "energy")) (< (let ((c "b") (g false) (z -57)) "energy") (- -96 "z"))) (let ((x (block (isbool "b"))) (d (set! b (- 7 -46))) (g (< -68 (let ((d "z") (z true) (f "z")) -86)))) (block "g")) (let ((z (block (block 54 39) (sub1 "y") (>= "g" 66))) (x (block (let ((h "g") (d -49) (z "z")) -32) true (set! z false))) (j (isnum (if "y" "z" false)))) (* (- "y" "z") (let ((x true) (z "y")) -74))) (set! energy -49) -73))))
(fun (fun3 energy e j c z x i) (if (<= energy 0) 95 (block (set! energy (- energy 1)) (- (- (* (block "z" 38) (set! c "e")) "x") (add1 (set! i (set! z -17)))))))
(- (block (- (let ((x (= (let ((y (* (let ((c true) (a false)) 49) (let ((loop_var_129 -47)) (let ((loop_var_70 input)) (loop (if (< loop_var_70 (+ input 70)) (block (set! loop_var_70 (+ loop_var_70 1)) -59) (break "loop_var_70"))))))) (g false) (b (let ((d (let ((z "y") (a false) (i 72)) "g")) (c (isbool "g"))) (block 71 "d" "y")))) (isnum (<= "y" "b"))) (let ((loop_var_65 (let ((h false) (i "h") (z -38)) input))) (loop (if (> loop_var_65 (- (let ((h false) (i "h") (z -38)) input) 65)) (block (set! loop_var_65 (- loop_var_65 1)) (fun2 -22 75 true -10 62) (let ((d false) (g -24) (a -31)) true) (>= -80 94)) (break (= "loop_var_65" "loop_var_65"))))))) (a (isbool (block (<= (let ((z "x")) -26) (block "x" -84 -30)) "x"))) (d (block (sub1 (+ (- 8 35) (add1 -72))) 14 (let ((loop_var_74 (if true 48 68))) (loop (if (< loop_var_74 (+ (if true 48 68) 74)) (block (set! loop_var_74 (+ loop_var_74 1)) -33) (break (block "loop_var_74"))))) (our_code_starts_here (* (- 9 -30) (block -69 24 -41)) (let ((loop_var_141 14)) (loop (if (< loop_var_141 (+ 14 141)) (block (set! loop_var_141 (+ loop_var_141 1)) (set! x "x") (set! a false) true) (break true)))) (<= (let ((loop_var_3 23)) (loop (if (< loop_var_3 (+ 23 3)) (block (set! loop_var_3 (+ loop_var_3 1))) (break "loop_var_3")))) 81) (set! a (* 92 -91)) (let ((g (let ((i -87) (a "a")) "a")) (a (<= -82 -74)) (f (isnum "x"))) (= "a" false)) (let ((y (< 98 -27)) (e (* -35 -51))) (block "y" "e" "e" true))) (let ((loop_var_26 (add1 42))) (loop (if (< loop_var_26 (+ (add1 42) 26)) (block (set! loop_var_26 (+ loop_var_26 1)) (if input "x" "x")) (break (>= "loop_var_26" "loop_var_26")))))))) (set! x (add1 (sub1 (block -31))))) (* (let ((loop_var_104 (- -22 100))) (loop (if (> loop_var_104 (- (- -22 100) 104)) (block (set! loop_var_104 (- loop_var_104 1)) (block (= false true) (let ((a false) (e "a")) 49)) (block (* -73 -18) (>= 47 -94) (let ((i false) (c false)) -96) (block false) (sub1 -28)) (if (let ((c -44)) 64) (sub1 25) (let ((z false) (f -12)) 39))) (break (block (set! loop_var_104 "loop_var_104") (block "loop_var_104") true (let ((j -50) (c 28)) 54) (sub1 66)))))) (let ((f (let ((loop_var_110 (let ((b -83) (f true) (e true)) -19))) (loop (if (> loop_var_110 (- (let ((b -83) (f true) (e true)) -19) 110)) (block (set! loop_var_110 (- loop_var_110 1)) (+ 75 -98) (+ 44 18)) (break (* input -1))))))) (our_code_starts_here (let ((loop_var_60 "f")) (loop (if (> loop_var_60 (- "f" 60)) (block (set! loop_var_60 (- loop_var_60 1))) (break 18)))) (isbool (let ((y false) (i "f") (a -100)) "y")) (>= (- "f" 97) (* "f" 16)) (let ((loop_var_72 "f")) (loop (if (< loop_var_72 (+ "f" 72)) (block (set! loop_var_72 (+ loop_var_72 1)) -32 "f" 3) (break input)))) (>= (+ "f" -85) (block false -80)) (if (let ((i false) (e false)) "f") (= true true) (let ((loop_var_136 "f")) (loop (if (> loop_var_136 (- "f" 136)) (block (set! loop_var_136 (- loop_var_136 1)) (set! f false) (set! f false) true false true) (break true))))))))) (+ (let ((d (let ((f (block (our_code_starts_here (+ -45 45) (>= 29 34) (block true) (let ((z -68) (g false) (x true)) 63) (let ((f false) (i -35)) "f") (>= 61 -26)) (+ (sub1 -7) (let ((c true) (f -6) (z "c")) 24)) (let ((f (if true true false)) (j (add1 -48))) (>= "j" "j")) (block (>= -87 -100) (* -3 100) (let ((i 18) (b "i")) true)) (isnum (let ((loop_var_108 -55)) (loop (if (> loop_var_108 (- -55 108)) (block (set! loop_var_108 (- loop_var_108 1)) true) (break false)))))))) (> (- (let ((i false) (a "i")) 8) (+ 26 30)) (let ((h 31) (x (let ((y "f") (a -61) (c true)) false)) (a (block -91 "h" false))) (let ((j true)) input))))) (f "d") (h (block -27 (set! d (let ((loop_var_146 13)) (loop (if (< loop_var_146 (+ 13 146)) (block (set! loop_var_146 (+ loop_var_146 1))) (break false)))))))) (let ((loop_var_152 87)) (loop (if (> loop_var_152 (- 87 152)) (block (set! loop_var_152 (- loop_var_152 1)) (set! h (let ((h (block "f" 95 "f")) (x (isbool "h"))) (our_code_starts_here -65 "x" "d" -22 "h" true))) (set! h (set! h (* 28 74)))) (break (add1 (+ "loop_var_152" "loop_var_152"))))))) (+ (sub1 (let ((loop_var_50 (sub1 -35))) (loop (if (< loop_var_50 (+ (sub1 -35) 50)) (block (set! loop_var_50 (+ loop_var_50 1))) (break (set! loop_var_50 -98)))))) (block (- (+ (sub1 33) (let ((x false) (h 98)) "h")) (let ((d (let ((g 2) (a "g")) true))) (let ((b -51) (d 93)) "d")))))) (let ((loop_var_152 (let ((f -52)) 62))) (let ((loop_var_90 (if -46 -67 72))) (loop (if (< loop_var_90 (+ (if -46 -67 72) 90)) (block (set! loop_var_90 (+ loop_var_90 1))) (break (+ (if (fun1 (- input "loop_var_90") (let ((g -79) (z "g")) true)) -70 (+ (let ((e 19) (c false)) 43) "loop_var_90")) (- (set! loop_var_90 (* "loop_var_90" input)) (* (+ 66 0) (* "loop_var_90" "loop_var_90"))))))))) (< (let ((x (- (let ((loop_var_77 (block true true -65))) (loop (if (< loop_var_77 (+ (block true true -65) 77)) (block (set! loop_var_77 (+ loop_var_77 1)) (* -47 45)) (break (block input))))) (block (* 85 (block 49 input)) (fun3 (- 91 58) (let ((loop_var_22 97)) (loop (if (< loop_var_22 (+ 97 22)) (block (set! loop_var_22 (+ loop_var_22 1)) true) (break false)))) (let ((loop_var_200 -35)) (let ((loop_var_159 43)) (loop (if (> loop_var_159 (- 43 159)) (block (set! loop_var_159 (- loop_var_159 1)) true false) (break true))))) (block false 90 input true false) (- 25 78) (+ 13 -10) (let ((e false)) -9)) true (let ((z (let ((h false) (c "h") (i -69)) -48)) (i (sub1 "z")) (j (let ((f false) (b -2)) "f"))) (let ((i "j")) "i"))))) (i (set! x (let ((i (* (let ((g 10) (z "x")) "x") (let ((x -22)) 95)))) (block true (= true true))))) (c (* (block (isnum (block true true "i")) (* (add1 "x") (if "i" "x" 1)) (block "x" (< 15 "x") (let ((h "i")) true) (+ "x" -16))) -15))) (let ((i (isbool (let ((i (let ((f 14) (g "i")) true)) (d (>= "c" "c")) (f (let ((a false)) "i"))) (let ((f "i") (j false) (x 34)) false)))) (f (block (* (* 34 "c") (let ((c "c") (g false) (i "g")) "c")) (- (+ "c" "x") (let ((x true)) "x")))) (x true)) (* (let ((loop_var_126 "x")) (loop (if (< loop_var_126 (+ "x" 126)) (block (set! loop_var_126 (+ loop_var_126 1)) 59) (break -52)))) (let ((x (let ((z 70)) false)) (e (block "x" false -47))) "c")))) (* (* (block (let ((j (< -38 68)) (c (block input -78 "j" 89)) (a true)) (- "c" "c")) false (- (let ((loop_var_150 -81)) (loop (if (< loop_var_150 (+ -81 150)) (block (set! loop_var_150 (+ loop_var_150 1))) (break -28)))) (if 54 34 input)) (block (isnum true) (block true false true -81) (< -90 -35) (let ((f 1) (x "f") (i true)) false) (let ((g true)) "g")) 31) (block (block (if false input 21)) -99 (let ((loop_var_143 -100)) (loop (if (> loop_var_143 (- -100 143)) (block (set! loop_var_143 (- loop_var_143 1))) (break true)))) 78)) (+ (let ((loop_var_91 -24)) (let ((loop_var_98 (fun3 -25 false true false -7 -61 -72))) (loop (if (> loop_var_98 (- (fun3 -25 false true false -7 -61 -72) 98)) (block (set! loop_var_98 (- loop_var_98 1))) (break (block -57)))))) (let ((f (block -43 (let ((h false) (e "h")) 41) (add1 22) (if 27 -68 -16) (sub1 91)))) (sub1 (sub1 "f")))))) (block (block (let ((d (< (fun3 (let ((a -46) (x true)) input) (> 85 52) false (let ((loop_var_5 2)) (let ((loop_var_12 -89)) (loop (if (> loop_var_12 (- -89 12)) (block (set! loop_var_12 (- loop_var_12 1)) false false) (break true))))) (block true -38) (- -34 -71) (* 20 -76)) (add1 (- -60 -51)))) (z (add1 -29))) (let ((g (>= (set! z 21) (* 26 -36))) (i (>= (- "z" "z") (let ((g 14) (c false) (y "c")) "g"))) (f (let ((g (* "z" 83)) (d (< -60 "z"))) (let ((loop_var_116 "z")) (loop (if (< loop_var_116 (+ "z" 116)) (block (set! loop_var_116 (+ loop_var_116 1)) (set! g "g") "g" "g" "z") (break "z"))))))) false)) (let ((f (block -22)) (e (+ (block (let ((g true) (e false) (y "f")) "f") (- "f" -22) "f" (let ((loop_var_101 -100)) (let ((loop_var_176 "f")) (loop (if (> loop_var_176 (- "f" 176)) (block (set! loop_var_176 (- loop_var_176 1)) true true) (break true))))) (let ((c "f")) -81)) (let ((loop_var_25 -41)) (loop (if (> loop_var_25 (- -41 25)) (block (set! loop_var_25 (- loop_var_25 1))) (break "f"))))))) (set! f (let ((f (let ((g true)) "f")) (x (our_code_starts_here -73 false false -43 true true)) (c true)) (block "f")))) (= (let ((y (if (isbool true) (let ((z -37) (a true)) -75) (let ((e false) (f -8)) "f")))) (block -83 (let ((j "y") (d true) (e true)) "j") (< "y" "y") (set! y input))) -39) true) (let ((e (* (let ((loop_var_39 -82)) (let ((loop_var_108 (if false 97 47))) (loop (if (< loop_var_108 (+ (if false 97 47) 108)) (block (set! loop_var_108 (+ loop_var_108 1))) (break (block "loop_var_108" true 35)))))) (block (if (let ((y false)) -66) (if true -52 2) -74)))) (h (- (+ (let ((y 71)) (let ((loop_var_98 6)) (let ((loop_var_23 -87)) (loop (if (> loop_var_23 (- -87 23)) (block (set! loop_var_23 (- loop_var_23 1)) "e" "e") (break "y")))))) (block false (let ((loop_var_96 65)) (loop (if (> loop_var_96 (- 65 96)) (block (set! loop_var_96 (- loop_var_96 1)) 43 input) (break "loop_var_96")))) (block 83 -13 "e" true false) (block "e" "e" true 35))) input)) (z (fun3 (* (let ((f (let ((f -9) (x true)) "e")) (h (isnum true)) (a (our_code_starts_here -92 "h" "h" "e" "h" false))) (let ((loop_var_17 "e")) (let ((loop_var_48 -59)) (loop (if (< loop_var_48 (+ -59 48)) (block (set! loop_var_48 (+ loop_var_48 1)) "a" "f") (break "h")))))) (let ((loop_var_185 -83)) (let ((loop_var_178 -83)) (loop (if (> loop_var_178 (- -83 178)) (block (set! loop_var_178 (- loop_var_178 1))) (break 68)))))) (< (+ (if false 74 79) (+ "h" -26)) (let ((loop_var_199 62)) (loop (if (< loop_var_199 (+ 62 199)) (block (set! loop_var_199 (+ loop_var_199 1))) (break "h"))))) (block (let ((loop_var_172 "h")) (loop (if (> loop_var_172 (- "h" 172)) (block (set! loop_var_172 (- loop_var_172 1)) 27) (break "e")))) (> (- -19 "e") "e") false) (> (* (* "e" 32) (let ((loop_var_15 -51)) (let ((loop_var_94 97)) (let ((loop_var_155 "e")) (loop (if (< loop_var_155 (+ "e" 155)) (block (set! loop_var_155 (+ loop_var_155 1)) -95 input) (break "loop_var_155"))))))) (let ((y (+ 67 "h")) (e (let ((b true) (a false)) "h"))) (set! e "e"))) -11 (let ((y (if (block 94 "e" input) (block -8 26) (block true "e"))) (g (let ((loop_var_189 -40)) (loop (if (> loop_var_189 (- -40 189)) (block (set! loop_var_189 (- loop_var_189 1)) 29 -56) (break "loop_var_189"))))) (j (isnum (> "y" "h")))) (sub1 (- "h" "y"))) (block (isbool (set! h true)) "h")))) (+ (if (let ((b (let ((a "z")) input)) (i (* -52 "h")) (j (> input "e"))) (block "h" 1)) (+ (block 17) (sub1 91)) (* (let ((loop_var_36 input)) (loop (if (> loop_var_36 (- input 36)) (block (set! loop_var_36 (- loop_var_36 1))) (break -58)))) (* 22 "e"))) (our_code_starts_here (let ((loop_var_188 "h")) (let ((loop_var_101 "e")) (let ((loop_var_188 "e")) (loop (if (< loop_var_188 (+ "e" 188)) (block (set! loop_var_188 (+ loop_var_188 1)) "e") (break "loop_var_188")))))) (let ((loop_var_2 40)) (let ((loop_var_166 -25)) (loop (if (< loop_var_166 (+ -25 166)) (block (set! loop_var_166 (+ loop_var_166 1)) (set! h false) (set! h "z") "z" false) (break false))))) (set! h (<= "e" input)) 20 (block (<= input "h")) (fun2 (- 39 input) (let ((i -61) (h "e") (c "h")) -81) (block input 67 true) (let ((loop_var_42 "e")) (let ((loop_var_24 -33)) (let ((loop_var_136 "e")) (loop (if (> loop_var_136 (- "e" 136)) (block (set! loop_var_136 (- loop_var_136 1)) (set! e -44) (set! e "e") "h" "h" "e") (break -84)))))) (* 95 "h"))))) (let ((j (let ((d (if (sub1 (let ((loop_var_171 91)) (loop (if (< loop_var_171 (+ 91 171)) (block (set! loop_var_171 (+ loop_var_171 1))) (break -49))))) (let ((loop_var_180 -80)) (loop (if (< loop_var_180 (+ -80 180)) (block (set! loop_var_180 (+ loop_var_180 1))) (break 84)))) (if (let ((loop_var_187 -80)) (loop (if (< loop_var_187 (+ -80 187)) (block (set! loop_var_187 (+ loop_var_187 1))) (break 82)))) input (* 69 -82))))) (+ (block (let ((a false) (z "a")) "a") (block "d" "d" false "d") (<= 49 87) (let ((loop_var_149 -49)) (loop (if (< loop_var_149 (+ -49 149)) (block (set! loop_var_149 (+ loop_var_149 1)) (set! d true) (set! d true) false) (break true)))) (+ input 77)) (block (block "d") -67 (let ((loop_var_123 input)) (loop (if (< loop_var_123 (+ input 123)) (block (set! loop_var_123 (+ loop_var_123 1)) (set! d false) (set! d true) (set! d false)) (break true)))) (- 29 -10))))) (a (let ((i (set! j (let ((loop_var_125 "j")) (let ((loop_var_131 2)) (loop (if (< loop_var_131 (+ 2 131)) (block (set! loop_var_131 (+ loop_var_131 1)) (set! j false) (set! j true) true false true) (break false)))))))) (> (let ((loop_var_153 "j")) (loop (if (< loop_var_153 (+ "j" 153)) (block (set! loop_var_153 (+ loop_var_153 1)) 18 -47 "j") (break "loop_var_153")))) (- (sub1 "j") (let ((loop_var_198 27)) (let ((loop_var_178 -96)) (loop (if (< loop_var_178 (+ -96 178)) (block (set! loop_var_178 (+ loop_var_178 1)) 92) (break -37))))))))) (g (let ((j (set! a (- (let ((i "j")) "i") (* "j" -25))))) (let ((f (sub1 (+ "j" "j")))) (block (let ((loop_var_97 "f")) (loop (if (< loop_var_97 (+ "f" 97)) (block (set! loop_var_97 (+ loop_var_97 1)) "j" "f") (break "f")))) (isbool false) (let ((loop_var_152 58)) (loop (if (> loop_var_152 (- 58 152)) (block (set! loop_var_152 (- loop_var_152 1)) "a") (break "a")))) (- -63 -13) (let ((c "a")) 46)))))) "a") (block (* (- (let ((i (let ((d 55)) true)) (a (let ((loop_var_31 -26)) (let ((loop_var_175 67)) (loop (if (< loop_var_175 (+ 67 175)) (block (set! loop_var_175 (+ loop_var_175 1)) (set! i 63)) (break -87))))))) (* "a" 77)) (let ((i (main -81 true true false false false -44 80 -20)) (e (<= -70 -43)) (z (let ((x false) (z 96) (i "z")) "i"))) (set! i -18))) (block (let ((j (<= -65 -100))) (= -5 -90)) (sub1 (let ((a true) (i -81) (z false)) "i")))) (add1 (let ((loop_var_173 (let ((j false)) input))) (let ((loop_var_151 (our_code_starts_here 3 false true 29 true false))) (let ((loop_var_175 (our_code_starts_here -25 false false -45 true true))) (loop (if (< loop_var_175 (+ (our_code_starts_here -25 false false -45 true true) 175)) (block (set! loop_var_175 (+ loop_var_175 1)) (- -3 26)) (break (sub1 -57))))))))))) (* (block (fun2 (add1 (let ((loop_var_136 (let ((x false) (b 88) (z true)) -49))) (loop (if (> loop_var_136 (- (let ((x false) (b 88) (z true)) -49) 136)) (block (set! loop_var_136 (- loop_var_136 1))) (break (sub1 "loop_var_136")))))) (* -98 (let ((b (isnum true)) (d (set! b (set! b "b"))) (y true)) (set! y (add1 -46)))) (let ((loop_var_65 (let ((e -22) (z false) (a "e")) "e"))) (let ((loop_var_116 (our_code_starts_here -48 true true -60 false true))) (loop (if (< loop_var_116 (+ (our_code_starts_here -48 true true -60 false true) 116)) (block (set! loop_var_116 (+ loop_var_116 1)) (let ((i false)) (if -35 "i" false))) (break (let ((z (set! loop_var_116 "loop_var_116"))) (let ((g false)) "g"))))))) (add1 (let ((i 9) (d (set! i (block 58 false 82 "i")))) (let ((loop_var_62 53)) (let ((loop_var_95 "d")) (loop (if (< loop_var_95 (+ "d" 95)) (block (set! loop_var_95 (+ loop_var_95 1)) (set! i -12) (set! d -49)) (break "loop_var_95"))))))) (add1 -31)) (- (let ((j (= (> (let ((z true)) 72) (let ((b -78) (h true) (z false)) 29)) (let ((e (block false -13 -95 input)) (h (= 20 "e"))) "h")))) (block (set! j (let ((d "j") (x 32) (i -89)) "j")) (- (let ((f true) (d false)) -53) 71) (* (* 49 -72) (add1 -58)) (+ (let ((loop_var_173 80)) (let ((loop_var_24 9)) (loop (if (> loop_var_24 (- 9 24)) (block (set! loop_var_24 (- loop_var_24 1)) (set! j 69) (set! j 73)) (break "loop_var_24"))))) (let ((loop_var_49 input)) (let ((loop_var_46 30)) (loop (if (> loop_var_46 (- 30 46)) (block (set! loop_var_46 (- loop_var_46 1)) (set! j 10) (set! j -55) -76 65) (break "loop_var_46")))))))) (- (add1 (block (let ((g -99) (c true) (j "g")) 27) (block false true) -40)) (+ (block (block false input true) (block 44) (>= -30 93) (fun3 100 true false true 55 -75 77)) (let ((j (isnum false)) (c (block true 70 93 72)) (z (let ((x false) (d "c")) "j"))) (- 3 97))))) (- (sub1 (block (isnum (isbool true)) (let ((e true)) (block "e" "e" -87)))) (add1 (block (block false (+ input 78) (let ((loop_var_2 -92)) (let ((loop_var_147 39)) (let ((loop_var_94 -12)) (loop (if (< loop_var_94 (+ -12 94)) (block (set! loop_var_94 (+ loop_var_94 1))) (break true)))))) (block 20 60 -20) (> -45 10)) (let ((g (block true -96 -2)) (i (our_code_starts_here "g" true true "g" true true))) (block "i" false "g")))))) (let ((loop_var_49 (+ -33 32))) (loop (if (> loop_var_49 (- (+ -33 32) 49)) (block (set! loop_var_49 (- loop_var_49 1)) (+ (block (isbool (block true)) (* (let ((j 14) (g false) (f "j")) "f") (block 42 22)) (let ((c (> 19 -87)) (i (set! c -97))) (set! c true)) (fun3 (let ((y false) (e -71)) 56) (block 100 -2 54 33 true) false (let ((c -38) (d -95)) true) (let ((z false)) 57) (* -88 7) (let ((y false) (x -71) (j true)) 95)) (* (fun3 input true false true input -56 -21) (block 25 62))) (block (let ((g (let ((c 41)) input))) (fun3 -25 true false true -26 "g" "g"))))) (break (block (+ (block true (- "loop_var_49" 56) "loop_var_49") (let ((y (let ((j 56) (e true)) "loop_var_49")) (d (block true))) (let ((z 71) (e "z")) "y"))))))))))