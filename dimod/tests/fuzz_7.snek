(fun (our_code_starts_here energy z c j x) (if (<= energy 0) -32 (block (set! energy (- energy 1)) (our_code_starts_here energy (let ((y (isnum (main "x" true false true 75 "z"))) (b (let ((i (+ 29 37))) "c")) (x (let ((b (if true true false))) (* 29 -78)))) (<= (block -30 "c" 41 true "z") (block "z" false -59))) (set! z "j") -11 (let ((h "c") (b (let ((d (isbool true)) (g (>= "j" "j"))) (<= "energy" 36))) (e (= (block -98 "b") (if "energy" true true)))) (set! e (isbool true)))))))
(fun (main energy c f e a d) (if (<= energy 0) true (block (set! energy (- energy 1)) (let ((c (block (set! e (block "e" false))))) (< (set! d (- -31 88)) (let ((e "d") (d (let ((y "c")) true))) (sub1 "d")))))))
(fun (fun1 energy e z i) (if (<= energy 0) true (block (set! energy (- energy 1)) (block (block (let ((b (+ "e" 53))) (let ((j "z")) -16))) (block (< (add1 3) 60) (> (sub1 "energy") (let ((a "e") (j "i") (b "z")) "energy")) (set! i true) (block (+ "energy" -68) (block 48 -50) (let ((f "e")) -94)) "e") (let ((h (let ((h (let ((e "i") (a "z") (x "e")) "i")) (y (sub1 "z"))) (block "i" true 7))) (j (block (>= "e" 15) (block "h" "e" 13 "h" "h") (sub1 "z") (block "energy" true true "i"))) (d (< 15 (block false -4)))) 10) (isbool (isnum (<= 66 "energy"))) (let ((z (<= (sub1 "e") (let ((i 100)) 51))) (j (let ((e (- 25 -34)) (b (- "z" 54)) (h (if -22 false "i"))) (let ((g -100) (z true) (f -64)) 55))) (f false)) (<= (block "z" 73 -31) (block false "z" -10 "e")))))))
(fun (fun2 energy d c b x e) (if (<= energy 0) 13 (block (set! energy (- energy 1)) (block (let ((c (block "e" (* "energy" "d") (let ((x "e") (j false) (g "x")) "d")))) (+ (let ((j 50) (x false)) -99) (let ((h "e") (z false) (j "e")) -36))) (set! x (if (set! x "d") 89 (- -15 -15))) (let ((d (let ((i (+ -31 62))) (let ((f "e") (j -82)) true)))) (our_code_starts_here (block -25 "d" false -36) (block false) (fun3 14 53 -21 "e" -94 "e" true "d" "d") (fun2 -51 "b" "c" "energy" "e" -75) (let ((c "d") (j "c") (b 47)) true)))))))
(fun (fun3 energy b a g e f z y h) (if (<= energy 0) 53 (block (set! energy (- energy 1)) (let ((i (= (set! energy (fun2 -76 "b" "a" "g" "e" "f")) (let ((b (- "energy" "f")) (h 3) (a (let ((y true)) "b"))) (let ((e "f") (z 62) (h "a")) "a")))) (d "h")) (sub1 -71)))))
(fun (fun4 energy i) (if (<= energy 0) false (block (set! energy (- energy 1)) (let ((f (* (set! energy (+ "i" "energy")) (- (- 21 "i") (block false "i" true "i")))) (a (let ((g (if (block true false -81 "i") (set! f -51) (sub1 34))) (j (if (isnum true) (let ((h 32) (j false) (a 44)) true) (<= "g" 69))) (z (block (let ((z false) (x "z") (h "x")) "j") 71 (let ((g "j") (f "g") (j "j")) "i") (let ((b "j") (d false)) false)))) (set! energy (+ 12 "energy"))))) (let ((c (let ((g (let ((h 94)) "h"))) (main "a" true true true "energy" -26))) (x (set! a (> "f" 23))) (z (block (<= "a" "a") (>= "f" "energy")))) (> (+ 21 "energy") (let ((i "c") (c "a") (z 56)) 37)))))))
(let ((z (let ((a (- (let ((loop_var_28 (+ 56 -3))) (let ((loop_var_14 (fun3 36 -8 -95 true 27 false true false false))) (loop (if (< loop_var_14 (+ (fun3 36 -8 -95 true 27 false true false false) 14)) (block (set! loop_var_14 (+ loop_var_14 1)) (add1 (if (let ((h -30) (e "h")) true) (block 66) (if 97 37 82))) (fun3 (let ((z (block true 96 false 51))) (sub1 48)) (add1 (+ -33 15)) (fun2 (if true -22 -25) 63 (fun2 80 87 37 -65 false 37) (add1 33) (let ((d input)) true) (if false -61 42)) (<= (fun3 84 53 83 true 32 true true false true) (fun3 -12 37 61 true -1 true true true true)) (our_code_starts_here (block -89 35 false 28) (block -13 true) (sub1 82) (let ((g 83) (f -70)) -7) (= false true)) (> (fun3 41 95 -56 true -46 true false false false) (+ 50 -73)) (let ((d (>= -29 12)) (b (set! d "d")) (y (- -60 -33))) (set! y true)) (block (sub1 -97) (block -55 true) (let ((f false)) -55) (let ((j false) (h "j")) false)) (let ((d (= -94 -3)) (i (- -71 -60)) (c (>= "i" "i"))) false))) (break (set! loop_var_14 "loop_var_14")))))) (let ((a (block (< (our_code_starts_here (block 15 -5) (block false) (let ((y 88)) -49) (let ((loop_var_167 27)) (loop (if (< loop_var_167 (+ 27 167)) (block (set! loop_var_167 (+ loop_var_167 1))) (break -51)))) (let ((i -73) (b true) (z 75)) "b")) (block true (fun2 -76 -10 45 -15 false 80))) (sub1 (let ((z (let ((h false) (d "h")) "h")) (d (let ((d "z") (x "z") (a 35)) true)) (c (let ((z 67) (x "z")) "z"))) (let ((loop_var_81 12)) (loop (if (> loop_var_81 (- 12 81)) (block (set! loop_var_81 (- loop_var_81 1)) (set! c "c") -6 "c") (break "loop_var_81")))))) (+ (fun2 (add1 22) (block -100) (let ((x true) (d -67) (f "d")) 21) (let ((c true) (x 32) (e false)) "x") (>= -76 -28) (block true -43 -84)) (let ((f (block -92 -47 97)) (e "f")) (let ((y false) (f true)) -36))) (> (* -48 (- -1 -95)) (* (let ((g false)) -81) (let ((d false)) -48))) (if (let ((i (if -67 -93 -45))) (+ "i" 28)) (block 42) (let ((j (block 19 -76)) (g (fun4 "j" true))) (+ 26 "j")))))) (set! a (block (let ((a (* "a" 6)) (d (block 10 "a")) (f (let ((loop_var_133 -12)) (loop (if (> loop_var_133 (- -12 133)) (block (set! loop_var_133 (- loop_var_133 1)) (set! a true)) (break true)))))) (+ 93 100))))))) (i (= (fun4 (let ((e (< (- (- "a" "a") (block true true "a")) -33)) (b (if (let ((i (let ((loop_var_28 94)) (loop (if (> loop_var_28 (- 94 28)) (block (set! loop_var_28 (- loop_var_28 1))) (break "e"))))) (z (let ((loop_var_65 40)) (loop (if (< loop_var_65 (+ 40 65)) (block (set! loop_var_65 (+ loop_var_65 1))) (break "loop_var_65")))))) true) (add1 (* "a" "a")) (- (let ((loop_var_148 "a")) (let ((loop_var_66 "a")) (loop (if (> loop_var_66 (- "a" 66)) (block (set! loop_var_66 (- loop_var_66 1))) (break "loop_var_66"))))) (let ((loop_var_54 "a")) (loop (if (< loop_var_54 (+ "a" 54)) (block (set! loop_var_54 (+ loop_var_54 1))) (break 79))))))) (c (set! e (let ((loop_var_34 65)) (let ((loop_var_56 "a")) (let ((loop_var_96 "a")) (loop (if (< loop_var_96 (+ "a" 96)) (block (set! loop_var_96 (+ loop_var_96 1)) (set! a "a") (set! b "b") -92) (break 27))))))))) (let ((j (>= (* "a" 86) (let ((f "c") (e input)) 69))) (b (block (let ((f "a") (x true)) true))) (g (set! c (set! j true)))) (+ (sub1 "a") (- -25 77)))) (set! a false)) (let ((i (block (isnum (= (block false 100) "a")) (< (block (* "a" 65)) (let ((i (sub1 -51)) (f (+ 97 "a"))) (let ((loop_var_64 "i")) (loop (if (< loop_var_64 (+ "i" 64)) (block (set! loop_var_64 (+ loop_var_64 1)) (set! i "i") "i" "a") (break "a")))))) (block false (- (* 73 -15) (* "a" "a")) (add1 (let ((c true) (a 71)) -18))))) (y (let ((y (block (let ((loop_var_112 "i")) (let ((loop_var_90 -8)) (loop (if (> loop_var_90 (- -8 90)) (block (set! loop_var_90 (- loop_var_90 1))) (break true))))) 69))) true))) (< (+ (let ((y (let ((b true) (f "a")) -33)) (h (block "y" true "y" 76)) (z (block false "y" "y" 79 true))) (let ((x 79) (a -16)) "x")) -84) 97)))) (y (let ((loop_var_32 -72)) (loop (if (< loop_var_32 (+ -72 32)) (block (set! loop_var_32 (+ loop_var_32 1))) (break (if (block (fun3 (our_code_starts_here "loop_var_32" "i" -44 29 true) (let ((x "i") (i 34) (b true)) "loop_var_32") (* -88 "loop_var_32") (>= -18 "a") (* 87 "loop_var_32") (set! i "i") (< 47 -36) (= "i" "i") (<= 40 81)) (let ((z (let ((c false) (i "c") (f "i")) "f")) (y 61)) (set! y false)) (= (< "a" 33) (isbool input))) "a" (- (block (isbool "i") (let ((i -55) (x "a")) 97) (let ((j 4)) "j") (fun1 "a" 80 "i" -91) (set! loop_var_32 "loop_var_32")) (- (block "a") (let ((g true) (z "i")) "loop_var_32")))))))))) (+ (- "a" (* (let ((loop_var_125 "a")) (loop (if (< loop_var_125 (+ "a" 125)) (block (set! loop_var_125 (+ loop_var_125 1)) (set! y (set! y -73)) (- 51 "y")) (break "a")))) -17)) "y")))) (- (let ((x (= (let ((c "z") (b (block (isbool (let ((a false)) true)) true (> (let ((loop_var_104 "z")) (loop (if (> loop_var_104 (- "z" 104)) (block (set! loop_var_104 (- loop_var_104 1))) (break 88)))) (let ((loop_var_65 -96)) (let ((loop_var_52 -49)) (let ((loop_var_124 -26)) (loop (if (< loop_var_124 (+ -26 124)) (block (set! loop_var_124 (+ loop_var_124 1))) (break 69)))))))))) (block (block (let ((loop_var_194 61)) (loop (if (< loop_var_194 (+ 61 194)) (block (set! loop_var_194 (+ loop_var_194 1))) (break "z")))) (= -49 "c")) (< (if -20 "z" "c") (let ((loop_var_37 -13)) (loop (if (< loop_var_37 (+ -13 37)) (block (set! loop_var_37 (+ loop_var_37 1))) (break -51))))) (sub1 (- -24 "z")))) (+ (block true (isnum (= true false)) (block (add1 "z") (< 39 43) (let ((loop_var_120 "z")) (loop (if (> loop_var_120 (- "z" 120)) (block (set! loop_var_120 (- loop_var_120 1)) (set! z "z") (set! z "z") (set! z "z")) (break 10)))))) (let ((loop_var_194 (let ((a false)) -43))) (let ((loop_var_185 (block -48))) (loop (if (< loop_var_185 (+ (block -48) 185)) (block (set! loop_var_185 (+ loop_var_185 1)) (set! z (sub1 "z")) (set! z (if false "z" 16)) (let ((e "z") (y false)) "e") (block false false false false 32)) (break (block true false 7 "z")))))))))) (block (> (+ (block (let ((i "z") (y "z") (e "z")) "e") (isnum false) (- "z" "z")) (block (* "z" "z"))) (let ((g (let ((d (let ((loop_var_15 "z")) (loop (if (> loop_var_15 (- "z" 15)) (block (set! loop_var_15 (- loop_var_15 1)) (set! z true) false "x") (break "x"))))) (e (set! z -33))) (let ((b "d") (y input)) "z")))) (sub1 (let ((f "z")) "f")))) (block (- -13 (block (let ((loop_var_96 -21)) (let ((loop_var_115 42)) (let ((loop_var_17 "z")) (loop (if (> loop_var_17 (- "z" 17)) (block (set! loop_var_17 (- loop_var_17 1)) (set! z input) (set! z true) (set! x "x")) (break "x")))))) (<= -61 "z") (let ((i false)) -98)))) (* (let ((f (* (block "z" 73 -41) (block 97 "x" "z" "z")))) (* 1 (* "f" "f"))) (block (let ((loop_var_147 "z")) (loop (if (> loop_var_147 (- "z" 147)) (block (set! loop_var_147 (- loop_var_147 1)) (set! z input) (set! z true) (set! x true) true false) (break true)))) (- "z" (let ((b "z") (f true)) "b")) (let ((loop_var_123 64)) (loop (if (> loop_var_123 (- 64 123)) (block (set! loop_var_123 (- loop_var_123 1))) (break "z")))) (let ((d (block -56 false -79 -57)) (h "x")) (let ((i -53) (b "z") (e 15)) "b")))) (> (* (let ((loop_var_73 -81)) (let ((loop_var_175 "z")) (let ((loop_var_93 35)) (loop (if (< loop_var_93 (+ 35 93)) (block (set! loop_var_93 (+ loop_var_93 1))) (break -81)))))) (- (block -31 "z" "z") (let ((loop_var_64 -57)) (let ((loop_var_36 27)) (let ((loop_var_154 -55)) (loop (if (< loop_var_154 (+ -55 154)) (block (set! loop_var_154 (+ loop_var_154 1)) (set! x "z") -20 -84) (break "z")))))))) (let ((loop_var_36 (let ((b true)) "z"))) (loop (if (< loop_var_36 (+ (let ((b true)) "z") 36)) (block (set! loop_var_36 (+ loop_var_36 1)) (set! z "z") (set! x -79) (set! z (set! z "z"))) (break (fun3 -93 "z" "z" false "loop_var_36" "x" "x" "x" true)))))))) (block (block (= (let ((e (let ((d (block true false false false "z")) (z (isnum false)) (g "z")) (let ((loop_var_112 24)) (loop (if (> loop_var_112 (- 24 112)) (block (set! loop_var_112 (- loop_var_112 1))) (break "g")))))) (b (- (let ((loop_var_53 30)) (loop (if (> loop_var_53 (- 30 53)) (block (set! loop_var_53 (- loop_var_53 1)) (set! e "e") (set! z "e") (set! e "z") "z" -60) (break "loop_var_53")))) (let ((d true)) 46))) (c (- (- "e" 15) (let ((y true)) 74)))) (let ((a (* "z" "c")) (g (let ((d "a") (e false)) true)) (x (* -6 "c"))) "g")) (isnum (<= (let ((loop_var_46 62)) (loop (if (> loop_var_46 (- 62 46)) (block (set! loop_var_46 (- loop_var_46 1)) "z") (break -94)))) "z")))) (+ (our_code_starts_here (sub1 (let ((loop_var_61 "z")) (loop (if (> loop_var_61 (- "z" 61)) (block (set! loop_var_61 (- loop_var_61 1)) (set! z "z")) (break "loop_var_61"))))) (<= (let ((a (add1 -18)) (e (set! a "z"))) (let ((i -64)) 74)) (let ((z (* "z" "z")) (i (let ((z input) (e "z")) "z"))) (+ 31 -51))) (set! z (+ (let ((c "z") (f true)) -39) -5)) (let ((f (<= (let ((loop_var_93 "z")) (let ((loop_var_150 6)) (loop (if (> loop_var_150 (- 6 150)) (block (set! loop_var_150 (- loop_var_150 1)) (set! z "z")) (break "z"))))) (+ -28 "z")))) (set! z (set! z 75))) (block false)) (* (add1 (let ((g (> "z" -80)) (c (block 61 false 55)) (h (block 25 "c" input "c" "z"))) (let ((loop_var_196 "z")) (loop (if (> loop_var_196 (- "z" 196)) (block (set! loop_var_196 (- loop_var_196 1)) (set! h "c") (set! c 13) (set! z 10)) (break "c")))))) (block "z" (= (let ((loop_var_184 -59)) (let ((loop_var_195 -24)) (let ((loop_var_71 -14)) (loop (if (> loop_var_71 (- -14 71)) (block (set! loop_var_71 (- loop_var_71 1)) (set! z -45)) (break 15)))))) (let ((b false) (z "z") (e -61)) "e")) (- (* "z" -78) "z") (<= (let ((f 12) (z true)) "f") (set! z -100)) (let ((f true)) (let ((y false) (f 10) (c "f")) 78))))) (sub1 (let ((j (let ((loop_var_163 (if false "z" -47))) (let ((loop_var_198 (block true 24))) (loop (if (< loop_var_198 (+ (block true 24) 198)) (block (set! loop_var_198 (+ loop_var_198 1)) (set! z (if "z" false false)) (set! z false) (<= -93 "z") (set! z false)) (break (< "loop_var_198" "z"))))))) (y (set! j (block (- 54 -11) (let ((loop_var_35 "z")) (loop (if (> loop_var_35 (- "z" 35)) (block (set! loop_var_35 (- loop_var_35 1)) "z" 65 "z") (break -17))))))) (b (block (= (let ((a -73) (i 93)) true) (let ((a false)) "a"))))) (- -86 (fun2 (set! y "y") "y" (let ((loop_var_138 -42)) (let ((loop_var_133 "z")) (let ((loop_var_19 63)) (loop (if (< loop_var_19 (+ 63 19)) (block (set! loop_var_19 (+ loop_var_19 1)) 61) (break -81)))))) (let ((loop_var_183 -53)) (loop (if (> loop_var_183 (- -53 183)) (block (set! loop_var_183 (- loop_var_183 1)) (set! b "z") (set! j -28) "y" -68) (break "y")))) (let ((loop_var_50 "z")) (loop (if (> loop_var_50 (- "z" 50)) (block (set! loop_var_50 (- loop_var_50 1)) (set! y false) (set! y true)) (break false)))) (+ "z" "y"))))) (let ((g (> (+ (let ((loop_var_155 "z")) (let ((loop_var_198 "z")) (let ((loop_var_188 "z")) (loop (if (> loop_var_188 (- "z" 188)) (block (set! loop_var_188 (- loop_var_188 1))) (break 93)))))) 65) (add1 (* (let ((g "z") (z 66)) "g") (fun2 "z" "z" "z" 2 false "z"))))) (e (block (let ((b (- (block "z") (set! z "z"))) (j (set! b (let ((i true) (d "g") (e -11)) "g")))) (sub1 (our_code_starts_here "b" false "z" "b" false))) "g" (let ((loop_var_179 (* "z" "z"))) (let ((loop_var_156 (- "z" "z"))) (loop (if (> loop_var_156 (- (- "z" "z") 156)) (block (set! loop_var_156 (- loop_var_156 1))) (break (< "loop_var_156" "loop_var_156")))))) "g"))) (= (< (* -66 (let ((e 84) (j input) (d -17)) "e")) 91) (isbool (block (> 37 "z") (>= "z" "z") true (fun1 32 -10 true 56))))))))