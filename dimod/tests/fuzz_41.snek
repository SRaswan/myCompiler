(fun (our_code_starts_here energy e a c b g h j f) (if (<= energy 0) 68 (block (set! energy (- energy 1)) (set! c (sub1 (let ((h (block 78 "energy")) (e (add1 18))) (our_code_starts_here "e" false false false "a" "energy" true false -9)))))))
(fun (main energy b c j g h y) (if (<= energy 0) false (block (set! energy (- energy 1)) (fun3 energy (set! g (+ (sub1 "c") (sub1 "g"))) false (isnum (let ((a (set! energy true)) (h (= "c" 71))) true)) (isnum "y")))))
(fun (fun1 energy z a e i y) (if (<= energy 0) true (block (set! energy (- energy 1)) (let ((y (block (let ((a (let ((e "e") (g 91)) false)) (i 33) (z (>= "i" "i"))) (* "i" 95)) (let ((g (if "a" "e" "z")) (y (+ -68 -53))) (block "energy" true "i" "energy")) (< -92 1)))) (let ((a (let ((y "i") (i (let ((c -79)) 75)) (d (set! e "y"))) (- 89 -83))) (e (set! a (<= "i" 99)))) (let ((d (let ((d "a")) "y"))) (> "e" -81)))))))
(fun (fun2 energy f x d e b a) (if (<= energy 0) true (block (set! energy (- energy 1)) (if (let ((a (fun4 "e" (our_code_starts_here 15 true false "x" true "e" "d" "b" "a") (set! e "x"))) (j (let ((z (< 34 "e")) (x (isnum "x")) (b (+ "a" 94))) (block "a")))) (set! x false)) (block (let ((f (block false false "b" "energy")) (b (if true "f" "a")) (c (block true "b" "f" false false))) (< -97 "b"))) (= (if -44 (+ "a" 71) (set! b "e")) (block (= "d" "d") (set! b false) (+ 3 "a") (let ((y "d") (b -95) (j 0)) "a") 91))))))
(fun (fun3 energy x z j g) (if (<= energy 0) true (block (set! energy (- energy 1)) (let ((x (let ((b (let ((j (fun6 "z" 29)) (f (block true true "j" 94 true))) (set! j "j"))) (i (< (set! energy 70) (let ((h "g")) -41))) (h (- (- "b" -51) (* 32 44)))) (if (- "b" "energy") (if "b" "energy" 40) (sub1 42))))) (fun5 (block (block 62 "j" "x")) (> (sub1 "z") (let ((y 25)) "x")) (let ((a (add1 "x")) (e (set! z "j"))) (let ((x true)) "x")) (add1 (set! x 78)) (block (isbool true) (> "energy" "z") (block false true) (let ((x true) (b "x") (e -78)) "x")))))))
(fun (fun4 energy f b) (if (<= energy 0) 13 (block (set! energy (- energy 1)) (sub1 (* (+ "f" (let ((b 21) (g "b") (x true)) -19)) (block (let ((e true) (b true) (z -69)) false) (let ((y "b")) "f")))))))
(fun (fun5 energy i b d h) (if (<= energy 0) false (block (set! energy (- energy 1)) (set! b (isnum (= (block -98 -77 59 "h") (add1 "h")))))))
(fun (fun6 energy d) (if (<= energy 0) 3 (block (set! energy (- energy 1)) (let ((z (let ((e (<= (let ((a false) (y "a")) "energy") (set! energy 21))) (b (block (set! e "e"))) (z (let ((f (fun4 "d" "d" "e")) (x (add1 "f"))) (let ((x true)) false)))) "energy")) (h true)) (sub1 (let ((f (block "h" "energy" false 10)) (j (fun2 61 true "h" 100 false 84 -66)) (z (let ((c true) (y "j")) "c"))) (let ((x "j") (d true) (h -72)) 65)))))))
(fun (fun7 energy z j y c a g h e) (if (<= energy 0) -76 (block (set! energy (- energy 1)) (let ((x (>= "c" "a"))) (let ((z (sub1 (set! e 1)))) (+ (let ((y "g") (b "a") (f "z")) "j") (fun7 -42 89 "c" 25 -73 "g" "j" 75 6)))))))
(let ((loop_var_70 (if false -48 54))) (loop (if (< loop_var_70 (+ (if false -48 54) 70)) (block (set! loop_var_70 (+ loop_var_70 1))) (break (set! loop_var_70 (set! loop_var_70 (block true (block (= (set! loop_var_70 false) (let ((b -9)) false)) (block (set! loop_var_70 false) (let ((f false) (h "f") (i -27)) "f")) true) (block (< (let ((x 67)) false) (let ((i -94)) -90))) (let ((h (+ (* -66 81) (let ((a false) (g -100) (f -67)) "f"))) (b (fun6 (* "loop_var_70" "h") (block false false "loop_var_70")))) (> (+ 41 "b") (block "b" true "b"))))))))))