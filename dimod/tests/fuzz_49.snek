(fun (our_code_starts_here energy i f y x g j d) (if (<= energy 0) -58 (block (set! energy (- energy 1)) (block (if (set! i (let ((y "f") (i "y") (e -27)) "y")) (if "energy" (our_code_starts_here 8 "d" "j" "energy" 48 "j" "d" -77) (+ "f" -81)) (block (let ((z "j") (f true)) "x") (* "x" -44)))))))
(fun (main energy x i j b h y) (if (<= energy 0) false (block (set! energy (- energy 1)) (block (let ((g (if false (+ 88 "j") (our_code_starts_here "x" 70 "y" "x" -18 "y" "x" -91)))) -5) (sub1 (block (set! x true) (let ((c true) (i true) (a true)) "i") (let ((d -73) (z "b")) -77))) (* (if (isbool false) (block "x" "energy" false "y" "x") (if -47 -11 "j")) (* (if false -25 "i") (block -46 26 -80 -47))) (block (= 59 (let ((y false)) "h")) (- (let ((c false) (x "h")) "j") (block false "b" 34)) (* (block false -29) (block "x"))) (main (add1 (set! energy 96)) (let ((e (isbool "b")) (x (block "x"))) "x") (block (- "energy" 69) (let ((g "h") (d true) (c 57)) 35) (>= -11 11) (our_code_starts_here "energy" "energy" false -66 "x" false -88 -8) (let ((d "y") (x 86)) "energy")) "y" (* (block 8 -98) (- "h" "h")) (let ((z (set! j true))) (if false true false)) (isbool (block true "h" "b" 67 true)))))))
(fun (fun1 energy x y c e) (if (<= energy 0) 80 (block (set! energy (- energy 1)) -64)))
(fun (fun2 energy) (if (<= energy 0) false (block (set! energy (- energy 1)) (= false false))))
(fun (fun3 energy f a y) (if (<= energy 0) false (block (set! energy (- energy 1)) (block "a"))))
(fun (fun4 energy a f c) (if (<= energy 0) true (block (set! energy (- energy 1)) (>= (let ((g (let ((h (* "c" "energy")) (d (sub1 "energy"))) (< "a" -42))) (a (let ((x (- 86 37)) (d (+ -75 "a"))) -60))) -82) (set! c (let ((x (> 83 "a")) (z (= -19 41))) (let ((f false)) -8)))))))
(fun (fun5 energy g i b e c j) (if (<= energy 0) 54 (block (set! energy (- energy 1)) (fun5 energy "i" -28 (sub1 (let ((b (let ((c -35) (g "j") (i "g")) "e")) (y (let ((b -52)) "j"))) (if "b" -22 "c"))) (sub1 (block (set! e "j") (+ "energy" 88) (set! i "j") (block false "j" "j") (fun1 69 true "energy" true "j"))) (< (block (<= 30 54) (if false true "j") (set! b -13)) "g") (fun5 (* (+ -16 55) (add1 "e")) (set! c (block -61)) (- (* -11 "b") (let ((y -4) (b "j") (h 64)) "i")) (block (our_code_starts_here -21 "energy" "j" "e" "e" "j" -62 -49) (* -82 "c")) (+ (block "e" true true "b") "b") (isbool (block 41 32 true)) (block (block 20)))))))
(fun (fun6 energy h y d e g i) (if (<= energy 0) true (block (set! energy (- energy 1)) (let ((z 97)) (set! g (isbool (< 90 -41)))))))
(fun (fun7 energy x j d e y z c f) (if (<= energy 0) false (block (set! energy (- energy 1)) "c")))
(fun (fun8 energy h g y c i f z j) (if (<= energy 0) true (block (set! energy (- energy 1)) (fun4 energy "y" (fun1 "f" (isbool (< "g" -81)) (block (+ 27 12)) (isnum (fun8 -25 "j" true false "i" "z" -68 "h" true)) (< (let ((a "c") (c false)) 74) (+ 21 76))) (>= (let ((h (block "y" "y")) (x (block "g" false "c")) (d (let ((g true) (z 46)) "h"))) (let ((c "g") (f "j") (a true)) "z")) (let ((f (- -64 "g")) (c (set! f "g")) (y (if 80 79 "energy"))) (- "energy" -2)))))))
(block (isbool (let ((b (<= (+ (let ((b (let ((i (let ((loop_var_89 27)) (loop (if (> loop_var_89 (- 27 89)) (block (set! loop_var_89 (- loop_var_89 1)) 34 72) (break 27)))))) (> "i" 74))) (y (fun5 (block "b" -69 false 67 input) -56 (- -33 -70) (let ((x false)) -13) (add1 -40) (let ((h -58) (y "b") (i -30)) "y") (let ((y "b")) -73))) (i (block (let ((a "b")) input) (set! y -84) (> -39 "y") "y" (* "y" "y")))) (block (- 7 "i"))) (our_code_starts_here (block (<= 21 -81) (+ 50 62)) (block (< -52 39) (* 80 4)) (> (- 6 46) (let ((z false)) -54)) (let ((loop_var_28 -20)) (loop (if (< loop_var_28 (+ -20 28)) (block (set! loop_var_28 (+ loop_var_28 1)) -9 56 input) (break "loop_var_28")))) 40 (let ((a -99)) (let ((i "a") (a false) (d -23)) "a")) (* -7 (let ((z false)) 46)) 83)) (add1 (let ((loop_var_102 (block true 26))) (loop (if (> loop_var_102 (- (block true 26) 102)) (block (set! loop_var_102 (- loop_var_102 1)) (sub1 31)) (break (add1 "loop_var_102")))))))) (h (let ((i (* (set! b (our_code_starts_here (let ((loop_var_131 -52)) (loop (if (> loop_var_131 (- -52 131)) (block (set! loop_var_131 (- loop_var_131 1)) -34 -54) (break -1)))) (let ((h "b") (a "b")) 86) (let ((loop_var_172 -85)) (loop (if (< loop_var_172 (+ -85 172)) (block (set! loop_var_172 (+ loop_var_172 1)) (set! b "b") (set! b "b") "b") (break "b")))) (* -14 -52) (- -54 -94) (let ((z "b")) false) (* 4 86) (let ((e false)) 26))) (let ((z (if false (<= -44 42) (fun7 76 -20 true "b" 99 false false true 13)))) 92)))) (isnum (if (set! b (set! b false)) (= (- "i" -96) (add1 "i")) (let ((x (isbool true)) (g (* 7 "i"))) (let ((a false) (x "i") (i "x")) "a")))))) (y (* (sub1 (let ((x (>= (sub1 -5) (set! h -76))) (j (let ((c (let ((a false) (b 33) (c "b")) false))) (set! x true))) (h (let ((loop_var_7 -36)) (loop (if (< loop_var_7 (+ -36 7)) (block (set! loop_var_7 (+ loop_var_7 1)) -73 40 -30) (break "loop_var_7")))))) (let ((j false)) (let ((j false)) "h")))) (- (let ((f "h") (a (+ 65 (block -38 96 -43 18)))) (let ((b (isnum "b"))) (* 7 "a"))) 99)))) (let ((loop_var_194 (let ((d false) (a "h")) "y"))) (loop (if (> loop_var_194 (- (let ((d false) (a "h")) "y") 194)) (block (set! loop_var_194 (- loop_var_194 1)) (set! y (isbool (< (block "y" "y" "y" "b" "y") (+ input -52)))) (set! b (set! y (let ((h (fun2 "y")) (a (isbool false))) (<= "y" "h")))) (set! b (< (block (* "y" -61) "y") (* (+ "y" input) (let ((j "h") (a "h")) -20)))) true "b") (break "h")))))))