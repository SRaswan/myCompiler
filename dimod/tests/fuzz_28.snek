(fun (our_code_starts_here energy x e i) (if (<= energy 0) -49 (block (set! energy (- energy 1)) "i")))
(fun (main energy i y f c x j) (if (<= energy 0) true (block (set! energy (- energy 1)) (> (block (let ((z (+ 19 3)) (y (block "c" "j")) (j (let ((h -5)) -41))) (+ 95 "y")) (block false 97) (set! j (block "i" "f" 30)) (if (let ((z "x") (c -29) (f "z")) "y") (fun9 12 62 "i" "x") "f")) (* (set! x (fun3 "energy" "c" false false)) (let ((b (- "f" -29)) (e (block "f" "c" "j")) (z "i")) (+ -69 "j")))))))
(fun (fun1 energy x a j g f z) (if (<= energy 0) 51 (block (set! energy (- energy 1)) (let ((f (fun9 (fun1 (if "g" 61 -98) (let ((f "z") (h "g")) 34) (set! energy 72) (let ((i true)) false) (- 52 "j") (let ((h "g") (f "energy")) "g") (block true false "f" "z")) (block (sub1 47) (+ -25 "j") (block "z" -12 true "z") (main -11 true 56 "g" "z" "x" true) (set! g "j")) (set! energy (block 44 "j")) (set! x (>= -87 "x"))))) (block (sub1 (let ((b "z")) 97)) (let ((j "f") (d (- "j" "x")) (c (let ((z "f") (i -67) (a 28)) false))) (block false 54 "c" -94)) (set! z "x") (>= (block "j" -6) (set! g -25)) (our_code_starts_here "j" (set! j -25) -37 (set! f "z")))))))
(fun (fun2 energy i b y c z x) (if (<= energy 0) true (block (set! energy (- energy 1)) (let ((h (- (let ((c (block false))) (block "c" "energy" -1 "z" 89)) (block (let ((z -11) (y "x")) false) (- -100 "i") (> 18 -81) (let ((d 67) (e 95)) 77))))) (> (add1 (set! x -1)) (let ((a (block -5 true true false)) (y (block -89 "c"))) (- -75 "b")))))))
(fun (fun3 energy d i h) (if (<= energy 0) -64 (block (set! energy (- energy 1)) (add1 (our_code_starts_here (* "energy" (add1 85)) (block (= "energy" "energy") "i" (- "d" "d")) (let ((z (let ((e "d") (z true) (d true)) 67))) (fun6 80 -36 "z" 19 true)) (> (let ((f "energy") (b 33) (c "b")) "c") (* "d" "energy")))))))
(fun (fun4 energy g z i y e j) (if (<= energy 0) false (block (set! energy (- energy 1)) "i")))
(fun (fun5 energy j c g d a x y) (if (<= energy 0) false (block (set! energy (- energy 1)) (set! y (block (= (add1 75) (let ((z 98) (g "x")) 35)))))))
(fun (fun6 energy e y d z) (if (<= energy 0) 85 (block (set! energy (- energy 1)) (- (let ((h (<= (block -1) (if false "y" "y")))) (sub1 (* -18 24))) (sub1 (- (set! e 35) (let ((j false) (b "j") (h "b")) "z")))))))
(fun (fun7 energy b i x) (if (<= energy 0) true (block (set! energy (- energy 1)) (= (+ -38 -72) (- (set! energy (let ((c "x") (f -14)) "b")) (* (* 74 "b") 17))))))
(fun (fun8 energy b) (if (<= energy 0) -31 (block (set! energy (- energy 1)) (sub1 92))))
(fun (fun9 energy i c y) (if (<= energy 0) -10 (block (set! energy (- energy 1)) (fun9 energy (+ (set! c (+ "energy" 27)) (let ((a (let ((x true)) -47))) (let ((g false)) "a"))) (let ((a (sub1 (block -65 51 true false "y"))) (h (< (* "i" 27) "energy"))) (let ((d "a") (e "energy") (f (block "h" true false false "h"))) (+ 37 -88))) (set! c (let ((y false) (j (- 11 "i")) (e (isnum false))) (block "y" "y" "e" "e")))))))
(let ((d true) (j (let ((f (* (let ((h (let ((h (let ((loop_var_141 (* -50 19))) (loop (if (< loop_var_141 (+ (* -50 19) 141)) (block (set! loop_var_141 (+ loop_var_141 1)) (>= 13 23) true (if "d" true true)) (break (set! loop_var_141 "d")))))) (i (= (* (* -35 -27) (* 57 -100)) (add1 (let ((a true) (b true)) -48))))) "d")) (g (- (block (let ((a "h")) (block -88 86 "h" input false)) "h" (add1 (let ((c -16)) -56)) (> (let ((loop_var_41 15)) (let ((loop_var_70 57)) (loop (if (< loop_var_70 (+ 57 70)) (block (set! loop_var_70 (+ loop_var_70 1)) (set! d 38) (set! h -49) 38 87 -72) (break "loop_var_70"))))) (- 73 -73)) (let ((loop_var_79 35)) (let ((loop_var_25 -96)) (loop (if (> loop_var_25 (- -96 25)) (block (set! loop_var_25 (- loop_var_25 1))) (break "loop_var_25")))))) (block (< (* 77 -13) (let ((e 97) (j false)) -16)) (let ((a (block 50 false -92)) (x (- 61 0)) (h (- "a" "a"))) (let ((h true) (e "h") (z 19)) 70))))) (i (block (let ((z (let ((j (> "g" "g"))) -23)) (j (if (block true 33 false true) (isbool true) (let ((j "g") (a true) (i false)) true))) (f false)) (let ((d (+ 8 83)) (b (let ((x -9) (e "d") (b "d")) true)) (f (isnum true))) (let ((j "d")) false)))))) "g") (block (block (let ((i (add1 (let ((loop_var_133 -71)) (let ((loop_var_158 input)) (loop (if (> loop_var_158 (- input 158)) (block (set! loop_var_158 (- loop_var_158 1))) (break "loop_var_158"))))))) (j (let ((loop_var_105 82)) (loop (if (< loop_var_105 (+ 82 105)) (block (set! loop_var_105 (+ loop_var_105 1)) false) (break false))))) (g (sub1 (+ "i" 97)))) true)) (> (block (let ((h (let ((c 1) (d true)) false)) (d (let ((i true) (b 39) (g false)) 66))) (block -97))) (+ (block -95) (add1 (block "d" -37)))) (let ((loop_var_200 31)) (loop (if (> loop_var_200 (- 31 200)) (block (set! loop_var_200 (- loop_var_200 1)) (set! d (<= (let ((i 57)) "i") (let ((j false) (g -9) (h "g")) 18))) (set! d (let ((c 66) (d (> input "c"))) (= "c" -3))) (set! d (= (< -1 94) (let ((y -48) (j "y")) true))) (= (= 63 93) (isbool "d"))) (break (> (let ((e -63) (h "e") (d "h")) -46) (let ((i 90)) "loop_var_200")))))) (block (let ((e (> (- 36 76) (- 66 -98))) (b (let ((d (<= 65 100)) (g (block "d"))) (block false false "d")))) (= (let ((b 55)) true) "e")) (add1 (block (sub1 16) (let ((e false) (f 42)) -64) (let ((c -15) (a "d")) 19) 20)) 75 (let ((loop_var_172 (let ((j -47)) 89))) (let ((loop_var_181 (block "d" "d" 92 false input))) (let ((loop_var_160 (set! d -37))) (loop (if (> loop_var_160 (- (set! d -37) 160)) (block (set! loop_var_160 (- loop_var_160 1))) (break (let ((d 58)) "d"))))))) -59) -59))) (d (add1 (+ input (let ((x (+ (+ "f" (+ 50 "f")) (let ((b (> "f" 78))) (let ((j "f") (f "f")) 96)))) (a (+ (block (let ((e 33)) 97) -41 "d" (isnum "d") (sub1 input)) (let ((loop_var_15 2)) (loop (if (> loop_var_15 (- 2 15)) (block (set! loop_var_15 (- loop_var_15 1))) (break "loop_var_15")))))) (h (+ (+ (let ((a "d")) 67) (set! x "x")) (add1 (block 10 -66))))) (sub1 (block (block 56 "x" input "a")))))))) (block (isnum (let ((loop_var_21 (let ((x "d") (h false)) "f"))) (loop (if (< loop_var_21 (+ (let ((x "d") (h false)) "f") 21)) (block (set! loop_var_21 (+ loop_var_21 1)) (set! f "d") (set! d (let ((x (set! d "d"))) (let ((x true)) false))) true (> 95 (set! d "f"))) (break "d"))))))))) (block (let ((a (- (sub1 (let ((i (let ((f (block false)) (c (let ((x "f")) "d")) (h (let ((loop_var_71 -96)) (loop (if (< loop_var_71 (+ -96 71)) (block (set! loop_var_71 (+ loop_var_71 1)) (set! d -65) 61 76 -86) (break "loop_var_71")))))) (- "h" "h"))) (y (add1 (if "i" "i" input))) (h (block (let ((loop_var_177 -88)) (let ((loop_var_68 -49)) (loop (if (> loop_var_68 (- -49 68)) (block (set! loop_var_68 (- loop_var_68 1)) (set! y "d") (set! d "d") (set! i "d")) (break false))))) (block "i" "y" "i" 0 "j") (* 36 "i") (let ((loop_var_179 "i")) (loop (if (> loop_var_179 (- "i" 179)) (block (set! loop_var_179 (- loop_var_179 1)) "d") (break true)))) (= "d" false)))) 95)) (let ((i (fun2 (- (let ((z -45) (h "d")) -44) -74) (block (fun9 52 1 100 false)) (let ((x (sub1 -20)) (f (let ((loop_var_77 14)) (loop (if (< loop_var_77 (+ 14 77)) (block (set! loop_var_77 (+ loop_var_77 1))) (break false))))) (h (let ((loop_var_117 input)) (let ((loop_var_32 "x")) (loop (if (< loop_var_32 (+ "x" 32)) (block (set! loop_var_32 (+ loop_var_32 1))) (break "f"))))))) (> -32 "x")) (> (let ((d -14) (y "d")) "d") (let ((y 97) (z 63)) "z")) (let ((g (- -43 25)) (c (block 65 false "g" 87 "g")) (d (= "d" false))) (+ "c" "g")) (let ((d (block -16))) (block input 49 "j")) (- (+ -41 -68) (let ((x 84)) "x"))))) (- 86 (let ((f (let ((y "d") (e "i") (b "e")) false)) (h (> 15 "i"))) (let ((b "h")) "i")))))) (d (let ((f (+ (+ (let ((a "j") (z (fun5 "a" 70 -32 true "a" false "j" "j"))) (+ "z" 36)) (our_code_starts_here (* "a" -54) (let ((e "a")) 74) (let ((a -89)) -36) (<= "a" 16))) (set! j (set! a "a"))))) (>= (sub1 (- (+ "f" -21) (block input "j" 46 false -14))) (let ((loop_var_182 (let ((z true)) -55))) (loop (if (< loop_var_182 (+ (let ((z true)) -55) 182)) (block (set! loop_var_182 (+ loop_var_182 1)) (set! a -54) (set! f (block false 33 true -51)) (set! d (- 6 71))) (break (set! f 25))))))))) (add1 "a")) -68 (let ((b "d") (z (let ((g (let ((d (let ((loop_var_30 (block -65 true 1 -24))) (loop (if (> loop_var_30 (- (block -65 true 1 -24) 30)) (block (set! loop_var_30 (- loop_var_30 1)) (set! j (fun7 -100 false true "j")) (set! b (set! b "d")) (block false)) (break (block "b"))))))) (isnum (>= (set! j 57) (let ((g "b")) -15))))) (b (block (<= (* (block -95 -18 -81) (fun8 -46 true)) (let ((a (* 34 84))) (* "a" 37))) (<= (block (+ -1 10) (block "j") -81 (let ((x true) (g false) (f "d")) 21) (let ((loop_var_143 99)) (loop (if (> loop_var_143 (- 99 143)) (block (set! loop_var_143 (- loop_var_143 1)) (set! b input) (set! j -95) (set! j -26) -93 -29 -13) (break input))))) (add1 (let ((loop_var_160 -10)) (let ((loop_var_176 59)) (loop (if (< loop_var_176 (+ 59 176)) (block (set! loop_var_176 (+ loop_var_176 1)) (set! g 83) (set! j -90) (set! g -74) 96) (break "loop_var_176")))))))))) (set! g (let ((f (let ((loop_var_27 22)) (let ((loop_var_55 -48)) (loop (if (< loop_var_55 (+ -48 55)) (block (set! loop_var_55 (+ loop_var_55 1))) (break "loop_var_55"))))))) (let ((loop_var_132 "f")) (loop (if (> loop_var_132 (- "f" 132)) (block (set! loop_var_132 (- loop_var_132 1)) (set! g true) (set! g "g")) (break "d")))))))) (x (+ (let ((c (let ((a (add1 (let ((j false) (z -59)) "z")))) (let ((loop_var_121 -70)) (loop (if (< loop_var_121 (+ -70 121)) (block (set! loop_var_121 (+ loop_var_121 1)) (set! a "b") (set! b false) "b") (break true)))))) (x (* (* (sub1 -62) (sub1 78)) (set! d (+ 72 -96))))) (block (> (add1 "x") (block -2)) (isnum (let ((loop_var_134 -99)) (let ((loop_var_24 52)) (loop (if (> loop_var_24 (- 52 24)) (block (set! loop_var_24 (- loop_var_24 1))) (break "d")))))) (block (add1 "x") (let ((f "j")) 59) (let ((loop_var_170 -25)) (loop (if (> loop_var_170 (- -25 170)) (block (set! loop_var_170 (- loop_var_170 1)) (set! z "z") true true "c") (break false)))) (block "b" "x" "x" "x" true)) (let ((g (let ((loop_var_121 73)) (let ((loop_var_1 -54)) (loop (if (> loop_var_1 (- -54 1)) (block (set! loop_var_1 (- loop_var_1 1)) (set! x input) input 85 45) (break -86))))))) (> 51 -74)) (let ((d (fun8 "x" false)) (z (add1 "d"))) (+ input "z")))) (- (fun9 (add1 (let ((j "b") (y true)) 52)) (let ((f (+ -43 -99)) (e (let ((loop_var_60 96)) (let ((loop_var_10 input)) (loop (if (< loop_var_10 (+ input 10)) (block (set! loop_var_10 (+ loop_var_10 1))) (break 25)))))) (x (let ((a -3)) 44))) (block 57 29)) (block (<= -37 16) (block 38 72 input) (let ((x true) (i false)) true) (let ((b true)) -16)) (block (block -79 "d" 75 -31 false))) 55)))) (isbool (block (let ((c (fun2 (+ "x" "x") -27 (set! z false) (let ((loop_var_161 25)) (loop (if (< loop_var_161 (+ 25 161)) (block (set! loop_var_161 (+ loop_var_161 1)) (set! j "z")) (break "z")))) (if "d" "x" 72) "j" (let ((i false)) 94))) (b (add1 (- 71 input)))) (let ((g false) (h (+ 2 "x"))) (block "z" "c"))) (let ((loop_var_132 (+ "x" "x"))) (loop (if (> loop_var_132 (- (+ "x" "x") 132)) (block (set! loop_var_132 (- loop_var_132 1))) (break (set! d false))))) (add1 (let ((b (block true true true false)) (e false) (d (set! b false))) (block false "x" "x" -74))) (isnum (block (let ((j "j") (d -54)) "j") (>= "x" -56) (set! b "x") (set! x "j"))))))))