(fun (our_code_starts_here energy z a x d g e i h) (if (<= energy 0) -25 (block (set! energy (- energy 1)) (block (let ((x (set! a (let ((h "a") (c "h")) 3)))) (fun6 (if -28 -39 "energy") (set! d "g") -36 (let ((b "h")) -31) (let ((e false)) -18) (= -44 "i") (> -59 35))) (add1 (if (block true) (fun4 -17 "z" "e" "energy" "z" "x" -10 -29) (* 98 "energy"))) (add1 (fun1 (sub1 "h") (> "g" -29) (block "a" "a" 80 "x")))))))
(fun (main energy d b c g x) (if (<= energy 0) false (block (set! energy (- energy 1)) (<= (* (* (fun4 -83 "d" true 18 "energy" -22 50 "energy") (set! x -36)) 96) (block (block (+ "d" "b")) 2)))))
(fun (fun1 energy h c) (if (<= energy 0) -11 (block (set! energy (- energy 1)) (set! c (let ((h (let ((e (if true "energy" 49)) (f (set! h 28))) (= "f" "energy")))) (block (set! h "c") (let ((x "h")) "c") (block "c" -84 "c") "h"))))))
(fun (fun2 energy x j y z e f h b) (if (<= energy 0) false (block (set! energy (- energy 1)) (< (- (- (let ((j true) (h -23)) -60) (block -92)) (let ((i (let ((j 67)) true)) (e (set! y "i"))) (block 65 false -78))) (let ((b (if (= "j" "j") (let ((j -75) (e "x")) "j") (<= "energy" -51))) (c (= true (let ((h true) (j "h") (e false)) false)))) (if (let ((e "c") (h "b") (z "f")) "h") (block "f") (- "energy" 96)))))))
(fun (fun3 energy c b j y f e x d) (if (<= energy 0) false (block (set! energy (- energy 1)) (set! c (let ((y (set! b -55)) (x (set! f (let ((c 42) (f "d") (j "y")) 24)))) (let ((j (block "y" true true -27))) (block "x" -73 "f")))))))
(fun (fun4 energy g a y f d c h) (if (<= energy 0) -10 (block (set! energy (- energy 1)) 58)))
(fun (fun5 energy f y z j h e) (if (<= energy 0) true (block (set! energy (- energy 1)) "h")))
(fun (fun6 energy x g j h b e) (if (<= energy 0) true (block (set! energy (- energy 1)) (= (- "g" (block "e" (if -56 "e" "e") (let ((z false) (y 24) (b "h")) "b"))) (let ((a (- (block "e" "e" false false -60) (block -48)))) (block "j" (let ((x "e") (h true)) true) (+ "x" 26)))))))
(let ((loop_var_129 57)) (loop (if (> loop_var_129 (- 57 129)) (block (set! loop_var_129 (- loop_var_129 1))) (break (let ((f (- 88 (set! loop_var_129 (set! loop_var_129 (block (+ "loop_var_129" "loop_var_129")))))) (j (let ((f (let ((f (let ((d (let ((f true) (z (let ((y 63) (e "f") (j "f")) "f"))) (>= 37 "loop_var_129"))) (a (< (block "d" "loop_var_129") (+ 51 "loop_var_129"))) (h (if (block true false "loop_var_129" 18 true) (+ "f" 100) (let ((a "f")) -9)))) (let ((c (set! f "loop_var_129")) (j (<= -18 -97)) (f (<= "f" 79))) (* "c" "h"))))) (- (add1 (let ((f true)) 40)) (block (let ((c 62)) "f") (set! loop_var_129 "f") (- 93 -13)))))) (let ((j true) (f (let ((d (let ((y (block "j" "j" "j" 91 "f")) (d (block -9 "y" true)) (z (let ((a -90)) true))) (let ((e "z") (h "z")) -93)))) (our_code_starts_here (set! f -57) (= "j" true) (add1 -76) (sub1 "loop_var_129") (add1 "loop_var_129") false (block false -71) (fun4 "loop_var_129" "f" false "d" 75 -15 "f" "loop_var_129") (<= "loop_var_129" "f")))) (c (block (fun5 (our_code_starts_here "loop_var_129" "j" "f" "f" -27 true 89 "f" false) (let ((i 48) (g 36)) 28) (sub1 "f") (let ((b -14)) true) (> -74 -24) (block -14 false -80 "f") (< "f" "loop_var_129")) (let ((x (let ((b "j") (f 63)) false))) "f")))) (isnum (block (< "f" -83)))))) (x 98)) (block (let ((j (set! f "f")) (h (let ((i (set! j (block "j" false))) (g (>= (sub1 37) (block -50 "loop_var_129" "i" false -8)))) (set! f (block false))))) (= (let ((y (let ((i "f")) 72))) (let ((g 0)) "loop_var_129")) (set! j (fun4 0 100 false 62 "j" "f" "x" 46)))) (let ((h (> (block (let ((c -31) (j 62)) "j") false (block "j" -78)) (let ((g (our_code_starts_here "x" true "x" "x" "f" true 95 -71 false))) (- 9 98))))) (let ((a (fun1 (set! f "x") (let ((x -71) (c -14) (y "x")) "h") (set! j 27))) (e (- (* "f" 86) (let ((z input) (e 2) (h "e")) -2))) (z (let ((y (set! x false)) (c (- "f" -34)) (a (- 46 "loop_var_129"))) (let ((z "x") (j input) (i true)) true)))) (- (let ((a 70) (c "f")) -35) (let ((h "f")) "e")))) (block (<= (+ (- "x" "loop_var_129") (block 9 false 1)) (set! loop_var_129 39)) (isbool (isnum (<= "x" "x"))) (sub1 (* (- "x" "x") (add1 79))) false (add1 (add1 (block "loop_var_129")))) (- (- (let ((x (set! loop_var_129 "x")) (h (isbool false))) (let ((f "h") (g false)) "x")) (fun1 (block true 59 "f" "loop_var_129" "x") (block true false) (let ((d "loop_var_129") (g "d") (c "g")) "f"))) (set! x (let ((f false) (c (<= 5 "f")) (h (if "f" -8 94))) (sub1 83)))) (+ (* (+ (let ((f 57) (i -55)) "f") (+ -77 "loop_var_129")) (* (+ "f" "x") (block "loop_var_129"))) (+ (block (* -11 -15) (fun1 28 false "x") (<= "x" 38) (let ((c "j") (b "f") (x "loop_var_129")) "j") (sub1 "loop_var_129")) (set! f (+ -83 "x"))))))))))