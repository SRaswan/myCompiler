(fun (our_code_starts_here energy) (if (<= energy 0) 13 (block (set! energy (- energy 1)) (let ((z (set! energy (our_code_starts_here (block false true true false 91)))) (b (let ((i (block 54))) (= (block false 91 false "energy" false) (block "energy" "z" "z" true))))) (sub1 (* 95 (if false 97 -89)))))))
(fun (main energy i) (if (<= energy 0) true (block (set! energy (- energy 1)) (= (let ((i (set! energy (set! i false)))) (* (let ((e -52)) 85) (if "i" "energy" "energy"))) (+ (- (* "energy" -39) (set! i "energy")) (our_code_starts_here (- 89 -100)))))))
(fun (fun1 energy) (if (<= energy 0) false (block (set! energy (- energy 1)) (> "energy" (+ (our_code_starts_here (let ((b true)) "energy")) (* (sub1 35) (block "energy" -33 41)))))))
(isnum (< (let ((a (< (- (block (block (+ 45 -40) (- 41 12) (<= -16 58) (add1 51)) (> (+ input 92) (* 76 -74)) (let ((e true)) (>= -32 -97)) (sub1 (if -91 -72 70))) (* (* 61 (let ((i 77) (z true) (h "z")) "i")) (let ((y (> -37 48))) 67))) (let ((f (let ((f (fun1 (sub1 -54))) (h (set! f (isnum true)))) (let ((f (block 57 "f" 84 "f" "f"))) "h"))) (i (let ((j (block (block "f" 39 -70) (block "f") (let ((a "f") (f input)) "f") (block true "f" "f" "f") (let ((f 15) (c 42) (x "c")) -12))) (y (set! j (let ((b true) (j 89)) input))) (d (- "j" (block input)))) (>= (block "j") (block 51 "f" false 49 -55)))) (h (+ (* (set! f 69) (block 44)) (let ((h (- -1 -23))) (let ((loop_var_91 60)) (loop (if (< loop_var_91 (+ 60 91)) (block (set! loop_var_91 (+ loop_var_91 1)) "h" 58) (break "loop_var_91")))))))) (let ((a (block (if "i" "h" "h"))) (x (main (let ((f false) (b false) (a false)) input) (let ((j 49)) -49)))) (let ((j (let ((a -44) (f "f") (c "i")) 75))) (block "i" true -58)))))) (d (let ((d (isbool (= (let ((h (sub1 -92)) (x (let ((b false)) -81))) (let ((a 52) (e true)) "e")) true))) (g (block (let ((loop_var_95 (- 98 96))) (loop (if (< loop_var_95 (+ (- 98 96) 95)) (block (set! loop_var_95 (+ loop_var_95 1)) (set! d (block 99 "a")) (set! d (= -90 53)) true) (break (<= 75 95))))) (* (add1 (set! a -96)) (sub1 (let ((a 80) (e 34)) -38))) (let ((a (let ((h (fun1 17))) (let ((f true) (y -47) (e 69)) -5))) (g (* 19 (* "a" -75))) (x (<= (let ((loop_var_22 "a")) (let ((loop_var_9 -88)) (loop (if (> loop_var_9 (- -88 9)) (block (set! loop_var_9 (- loop_var_9 1)) "g") (break "loop_var_9"))))) (let ((a -93) (b "a")) "a")))) (let ((h (* -25 -77))) (let ((loop_var_28 "g")) (loop (if (> loop_var_28 (- "g" 28)) (block (set! loop_var_28 (- loop_var_28 1)) (set! g true) true) (break "d")))))) (let ((loop_var_18 (let ((z 100)) input))) (loop (if (< loop_var_18 (+ (let ((z 100)) input) 18)) (block (set! loop_var_18 (+ loop_var_18 1)) (set! a (our_code_starts_here 22)) (set! d (block 94 9 input))) (break (block false true 96 input)))))))) (* (* 45 (- (- "g" 14) (block 89 "a" false "g" "g"))) (- (add1 (- "g" "g")) (- -14 (let ((y "a")) "g")))))) (c (block (let ((e (>= (let ((loop_var_91 "d")) (let ((loop_var_89 -65)) (loop (if (> loop_var_89 (- -65 89)) (block (set! loop_var_89 (- loop_var_89 1))) (break "d"))))) (add1 (set! a "d")))) (y (> (let ((loop_var_197 "d")) (let ((loop_var_138 "d")) (loop (if (< loop_var_138 (+ "d" 138)) (block (set! loop_var_138 (+ loop_var_138 1)) "d" "d" -96) (break "loop_var_138"))))) (let ((c (add1 "d"))) 4)))) (let ((loop_var_24 (set! y 44))) (loop (if (> loop_var_24 (- (set! y 44) 24)) (block (set! loop_var_24 (- loop_var_24 1)) (set! y (- 36 43)) (set! y (+ -97 -53)) (set! e (let ((c "e")) "d"))) (break (set! e "d")))))) (block (set! d (set! a (>= 50 -49)))) (let ((loop_var_13 (let ((h "a") (e "d") (i "a")) -49))) (loop (if (> loop_var_13 (- (let ((h "a") (e "d") (i "a")) -49) 13)) (block (set! loop_var_13 (- loop_var_13 1)) (* (block true 59) (if 28 32 -45)) (our_code_starts_here (add1 "d")) (set! d (* "d" "d"))) (break (* (let ((d "a")) "loop_var_13") (let ((e -47) (f false) (h "e")) 22))))))))) (block (isnum (block (let ((e true) (d (set! e "d")) (a (let ((x "a") (f input) (g 73)) true))) (let ((y "c") (c "a") (b "d")) -91)) (block (* -2 input) (let ((a "c")) 50) (let ((loop_var_139 16)) (loop (if (> loop_var_139 (- 16 139)) (block (set! loop_var_139 (- loop_var_139 1)) (set! a 73) -25 "c") (break 91)))) (* -79 "c")) (block (set! c "d") (let ((j -69) (z "a")) 66) (let ((loop_var_141 "c")) (loop (if (< loop_var_141 (+ "c" 141)) (block (set! loop_var_141 (+ loop_var_141 1)) "a") (break "a")))) "a" (> "d" -58)))) (<= (block (+ "c" (let ((y "d")) "c"))) (let ((loop_var_44 (* 96 38))) (loop (if (> loop_var_44 (- (* 96 38) 44)) (block (set! loop_var_44 (- loop_var_44 1))) (break (block "loop_var_44" "a" "loop_var_44" "a" "loop_var_44")))))) (let ((f (if (* (sub1 -3) (let ((g 88) (a 23) (i "g")) "d")) (set! d (>= "c" -6)) (block true (fun1 75))))) (let ((loop_var_172 (set! a 41))) (loop (if (> loop_var_172 (- (set! a 41) 172)) (block (set! loop_var_172 (- loop_var_172 1))) (break (let ((f false)) -22)))))) (block (let ((g (+ -45 (- -46 -84))) (e (let ((y (+ "g" "c")) (h (>= 40 "g"))) (let ((loop_var_86 -1)) (let ((loop_var_109 81)) (loop (if (> loop_var_109 (- 81 109)) (block (set! loop_var_109 (- loop_var_109 1))) (break -96)))))))) (let ((loop_var_20 56)) (loop (if (< loop_var_20 (+ 56 20)) (block (set! loop_var_20 (+ loop_var_20 1))) (break "e")))))) (block (add1 (+ (block "c" -42 "d" "d") (block 0))) (<= (let ((d (let ((y "a") (z "d")) "c")) (h (block "a")) (j "a")) (block 22 "j" -11 51 "d")) (if (block false 62 "a" false) (let ((a 45) (d "c") (b -24)) "d") (block "d" "d" "c"))) (+ "d" (* (sub1 -67) "d")) (let ((f (let ((loop_var_161 -89)) (loop (if (< loop_var_161 (+ -89 161)) (block (set! loop_var_161 (+ loop_var_161 1)) (set! c "a") (set! c false) (set! a true) true "a") (break "a"))))) (g (let ((loop_var_180 "d")) (loop (if (> loop_var_180 (- "d" 180)) (block (set! loop_var_180 (- loop_var_180 1)) (set! a "a") (set! d true) false "a") (break true)))))) (sub1 (- "d" "d")))))) (let ((z (< (let ((d (let ((f (sub1 (if true 23 66)))) (<= (- "f" "f") (* 97 "f"))))) (- (let ((loop_var_178 -6)) (loop (if (< loop_var_178 (+ -6 178)) (block (set! loop_var_178 (+ loop_var_178 1)) (set! d 53) (set! d -77) -30 17 5) (break "loop_var_178")))) (block (block "d" 63 "d" "d") (+ input -79) (if "d" 92 21)))) (add1 (+ (sub1 -88) (+ (+ -30 6) (block input -92 83 -22)))))) (x (let ((z (<= (- (let ((a (let ((x -81) (j true) (g true)) "x")) (z (sub1 "a"))) (set! z "a")) (our_code_starts_here (set! z 75))) (- (set! z -65) (* (block 14 -9 66) (let ((loop_var_57 -86)) (loop (if (< loop_var_57 (+ -86 57)) (block (set! loop_var_57 (+ loop_var_57 1)) (set! z input) (set! z -12) 69) (break "loop_var_57"))))))))) (>= (let ((loop_var_117 (* -84 12))) (loop (if (< loop_var_117 (+ (* -84 12) 117)) (block (set! loop_var_117 (+ loop_var_117 1)) (set! z (+ 74 -67)) (set! z (block "z" 22))) (break (let ((b true) (y -37)) "y"))))) (let ((y (our_code_starts_here -46))) (- (sub1 "y") (block "z" "y" false "y" 80)))))) (i (+ (sub1 (* (let ((z (sub1 95)) (c (<= -92 "z"))) (let ((x "z")) "x")) (let ((loop_var_101 5)) (let ((loop_var_56 -18)) (loop (if (< loop_var_56 (+ -18 56)) (block (set! loop_var_56 (+ loop_var_56 1)) 76 input -49) (break -25))))))) (let ((h (let ((h (let ((loop_var_101 46)) (loop (if (< loop_var_101 (+ 46 101)) (block (set! loop_var_101 (+ loop_var_101 1))) (break false))))) (x (+ (set! x -62) (* -25 -81))) (g (- (+ 47 "x") (- "x" "x")))) (set! g (let ((c true) (y input)) "y"))))) "h")))) (let ((j (* (let ((i (let ((g (- "i" 37))) (let ((loop_var_37 -80)) (loop (if (> loop_var_37 (- -80 37)) (block (set! loop_var_37 (- loop_var_37 1))) (break -19)))))) (e (isbool (isnum "z")))) (let ((g (block 81)) (a (block "e" true true))) (set! x 76))) (* (let ((loop_var_24 -2)) (let ((loop_var_45 "i")) (let ((loop_var_76 -51)) (loop (if (< loop_var_76 (+ -51 76)) (block (set! loop_var_76 (+ loop_var_76 1))) (break "loop_var_76")))))) (block (our_code_starts_here "i")))))) (block (let ((i (let ((loop_var_11 input)) (loop (if (< loop_var_11 (+ input 11)) (block (set! loop_var_11 (+ loop_var_11 1)) (set! z -23)) (break "j"))))) (e (= (if "j" "z" true) (let ((loop_var_88 input)) (loop (if (< loop_var_88 (+ input 88)) (block (set! loop_var_88 (+ loop_var_88 1)) (set! x "x") (set! i false) true) (break true))))))) (let ((d (block -44 "i" true "i" -99)) (c (- 78 -96)) (h (let ((h "c")) false))) "i")))))))