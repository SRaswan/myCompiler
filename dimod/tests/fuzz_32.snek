(fun (our_code_starts_here energy z e f b g j a x) (if (<= energy 0) -33 (block (set! energy (- energy 1)) (- (let ((d (fun4 (* "energy" "z") (let ((a "x") (g 77) (c false)) -73) (block 51 "e" "x" "x" -87) (<= "f" -86) -37 (let ((i -98) (c false)) "b")))) (block (let ((i "g") (j -29) (h false)) true) (set! b "f"))) (block false (sub1 (+ -25 63)) (+ (let ((c "energy")) 22) (block "j" "energy" false 47)))))))
(fun (main energy e z c y) (if (<= energy 0) true (block (set! energy (- energy 1)) (let ((j (>= "energy" (block (let ((z true) (a "c") (j true)) "e"))))) (set! energy (fun6 (block false 59 10) (let ((g true) (a "z") (h true)) "c")))))))
(fun (fun1 energy i z f x) (if (<= energy 0) -15 (block (set! energy (- energy 1)) (let ((b (isnum (let ((g 98) (j (= "z" false))) (= -76 18)))) (h (let ((g -91) (f (< (let ((h 63)) 13) (let ((z "i") (x true)) "i")))) (= (if "z" false false) (isbool false)))) (x (let ((b "x")) (sub1 (let ((j 56) (b "z") (d "h")) "j"))))) (add1 2)))))
(fun (fun2 energy b a j) (if (<= energy 0) 9 (block (set! energy (- energy 1)) (- (if (fun3 (let ((y false) (c "a")) "energy") (* 66 "j") (* "energy" -16) (block "a" "a" false) (let ((z "b")) "a") (set! energy "a") 48 (> "energy" 36)) (* -43 (set! b -18)) (block (* 47 5) (block -12 14) (if false -14 80))) "energy"))))
(fun (fun3 energy i a y f c e d) (if (<= energy 0) 17 (block (set! energy (- energy 1)) "a")))
(fun (fun4 energy a z f b g) (if (<= energy 0) true (block (set! energy (- energy 1)) (let ((z (let ((j (<= "energy" (set! f "a")))) (let ((j (let ((b false)) "b")) (h (= true false)) (e "g")) (block 32 "f" false)))) (f (block (let ((f (let ((d -54) (f true)) "z")) (z (= "a" -56))) -100) (block (fun5 "a") (< 2 "a") (sub1 29) (isnum "z")) (let ((d (let ((j true)) "a")) (e (set! z 82))) (< -62 "e")) (sub1 (* "z" "g")) (block (+ "z" "a") (< -12 96) (set! b "f")))) (b (<= (let ((e "z") (x (if 72 -39 "z")) (y (set! energy "z"))) (add1 92)) (block (set! g 39) (= "energy" -9) (+ 7 11) (set! g true) (block true 26 19))))) (>= (* (fun2 "f" false "energy" 79) 13) (+ (block "b" "a" "g") (let ((b true) (h "z") (e true)) 38)))))))
(fun (fun5 energy) (if (<= energy 0) 74 (block (set! energy (- energy 1)) (block (block (block (block false) (let ((g 68)) false) "energy" (set! energy -1))) (+ (sub1 (- "energy" "energy")) (let ((z (fun4 -68 70 "energy" true -19 false)) (x (block true "z" "z" true false))) (let ((a true) (e -81) (x "energy")) -29))) (- (if (set! energy false) (fun3 "energy" "energy" "energy" true false false "energy" false) (let ((a -60) (z 52)) -43)) (fun2 (block "energy") (let ((j "energy") (f 23)) true) (fun2 "energy" true "energy" 10) (block false -64 -7 false "energy")))))))
(fun (fun6 energy y) (if (<= energy 0) false (block (set! energy (- energy 1)) (block (= (= (block false true) (let ((e true) (g "y")) "e")) (let ((z (let ((f -82) (x 97)) false)) (e (let ((h true) (y "energy") (a "z")) -90)) (d (let ((b false) (e -10) (y "z")) 31))) false)) (+ -22 (set! energy (let ((c -45) (z "energy")) -16))) (let ((d (block (block "energy") (= false false) true (isnum false) (let ((y "y") (h true)) true)))) (let ((c (>= 15 "y")) (h (let ((x "c") (y "energy") (i 39)) "d"))) (- "energy" 25))) (block (set! energy (if false true false))) false))))
(fun (fun7 energy j x y e a) (if (<= energy 0) 93 (block (set! energy (- energy 1)) (block (block (>= (let ((i "j")) 7) (let ((f -100)) "j")) (block (set! y 15) (let ((y true)) true) (let ((c "j") (e "c")) 62) (add1 "energy")))))))
(fun (fun8 energy z a f g d x) (if (<= energy 0) 15 (block (set! energy (- energy 1)) (let ((b (if (let ((d (let ((x "a") (d "z") (z true)) "energy")) (z 12)) (= "x" true)) (set! a (set! energy 75)) (block (= true "x") (+ "g" -37) (let ((a true) (h "a")) "d") (let ((g "a") (c "z") (a "g")) "c")))) (c (* (let ((b (> "z" "g"))) (let ((b "f") (d "z")) "g")) (let ((j false)) (+ 79 18)))) (g (set! b (fun6 75 (let ((h "d")) "f"))))) (+ (set! f (* "z" "c")) (* "energy" (- "g" "z")))))))
(fun (fun9 energy a j) (if (<= energy 0) false (block (set! energy (- energy 1)) (fun6 energy false))))
(isbool false)