(fun (our_code_starts_here energy d f c e g) (if (<= energy 0) 41 (block (set! energy (- energy 1)) (if (add1 (sub1 (- "energy" "c"))) (let ((e (+ (- "c" 78) (block "c" 65 "g" -31))) (h (<= (fun1 -9 "g" "f" "e" true true false -84 "c") (- 72 "d"))) (y (set! e (> 62 -82)))) (block (add1 -13) (block "g") (let ((c "g")) false) (set! e "f"))) (let ((g (let ((z (block 64 "energy"))) "g")) (z (let ((f (isbool "g"))) "energy")) (c (block (set! e true) (+ -62 2)))) (block (add1 "f")))))))
(fun (main energy a f d b g x z i) (if (<= energy 0) true (block (set! energy (- energy 1)) (isbool "d"))))
(fun (fun1 energy f z j a g c e d) (if (<= energy 0) -34 (block (set! energy (- energy 1)) (- (+ (block (<= -67 "d") (block "f" "d" true false) (sub1 46)) (let ((a (- "d" -2))) (let ((e -99)) "j"))) (let ((a (fun5 (let ((c "energy") (e "energy") (y true)) "d") (block false true "a") (block true) (fun4 65 false "e" "c" "d" "j" 80 "z" "g") (let ((y "z") (a 2)) false) (- -23 -1))) (z (block (set! a false) (block -7) (sub1 66))) (d (add1 (* "j" "j")))) 53)))))
(fun (fun2 energy y a) (if (<= energy 0) false (block (set! energy (- energy 1)) (let ((y (block true)) (g (= (+ (let ((a true)) -2) (block "y" true "energy" -51)) (let ((j (= false "y")) (g (fun1 "y" false "a" "y" "y" "j" "j" "y" 66)) (z (fun1 "a" "j" "energy" "y" false false true "energy" -89))) (block "z" false "energy" "g")))) (f (set! y "g"))) (< (block (set! a 76) (+ "y" "a")) (let ((b true) (y "energy") (d (if -1 -46 "a"))) (block "y" false "y" "a" -2)))))))
(fun (fun3 energy d c e b) (if (<= energy 0) 17 (block (set! energy (- energy 1)) (block true (block (< (fun7 "d" "b" false "c") (add1 -36)) (set! d (add1 "c")) (if (- "d" "energy") "b" (set! energy "b"))) (if (block (set! e true) "e") "d" (our_code_starts_here (set! d "energy") (sub1 -14) (* 8 68) (fun6 "d" "c" false -93 "b" true -97 "c" true) (block 78 "b") (block "energy" "c" "c" "b" 38))) (block (let ((h (* "d" -58))) (* -77 -77)))))))
(fun (fun4 energy d b f z j a x e) (if (<= energy 0) -6 (block (set! energy (- energy 1)) (let ((f (block (add1 (sub1 27)))) (j (let ((z -81)) (block (let ((b "f") (f true) (y "b")) 66) (= "z" "z") (block "a") (block "e" -88 -17)))) (b (isnum (fun2 (+ "energy" -72) (* "d" -94) (* "f" "a"))))) (let ((j (set! d (set! e "b"))) (i (< 17 (+ "energy" 42))) (g (let ((f (- "d" "a"))) (let ((f "f") (e -84) (b true)) "b")))) (fun4 (block true true false 36) (>= -39 "j") (> -29 -32) (fun6 "j" "j" "b" "f" true true 5 -8 "z") (fun1 "j" true "a" "b" true "j" "b" -23 79) 87 (fun3 "d" "x" false false 74) (block "f" "x" "i" false) (set! b true)))))))
(fun (fun5 energy b h j g y) (if (<= energy 0) false (block (set! energy (- energy 1)) (>= (let ((a (>= (+ 57 -40) (if true "energy" 36))) (c (block (let ((h "g") (e false)) 9) (> -15 "b"))) (g (block (set! h 11) (set! h 40) (let ((c "h") (a 31) (x true)) 33) (add1 79) (sub1 "b")))) (set! y (let ((g false)) "g"))) (- (+ (let ((j "g")) "g") 72) (set! energy (set! g "energy")))))))
(fun (fun6 energy a g j i d c f z) (if (<= energy 0) false (block (set! energy (- energy 1)) (block (let ((d (- -18 (let ((j 60) (z 58)) -12))) (e (let ((j (> "a" "d"))) (> "f" 36)))) (add1 (let ((a "g")) -64))) (block (+ (let ((x "f") (a -81)) -34) (- "a" "z")) (let ((g (block 52 "energy" "f" "d" "energy")) (i (set! j "energy"))) (isbool false)))))))
(fun (fun7 energy a f c) (if (<= energy 0) 36 (block (set! energy (- energy 1)) (let ((f (let ((j (block (block 54 "f" "f" "energy") (add1 10) (let ((x 46) (z "c") (j "f")) false))) (d (set! j (block "c" "a"))) (h (let ((i (let ((h 31)) true)) (a (+ "energy" "d"))) (< 47 "energy")))) (+ (let ((h "f")) -54) (* "d" -49))))) (- (block (>= "a" -28) (set! f 79) (<= -65 "f") (sub1 -73)) (let ((d (let ((y "f") (i "f") (z "c")) "f"))) (let ((a -60)) -15)))))))
true