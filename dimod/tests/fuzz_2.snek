(fun (our_code_starts_here energy) (if (<= energy 0) -99 (block (set! energy (- energy 1)) (set! energy (our_code_starts_here (set! energy (add1 -85)))))))
(fun (main energy d g y c j e h) (if (<= energy 0) true (block (set! energy (- energy 1)) (set! c (let ((b -31)) (block (set! energy "y")))))))
(fun (fun1 energy) (if (<= energy 0) true (block (set! energy (- energy 1)) (< (let ((j (set! energy (let ((a -81)) false))) (h (let ((y (= "j" "j")) (c (<= "energy" "energy")) (j (block 19))) (block "j" true "j" "energy" "j"))) (x (let ((h (set! energy true)) (j (>= "energy" -61)) (z (set! j "energy"))) (let ((j false) (d true) (x 53)) true)))) (if (+ "energy" "energy") "energy" (fun2 "energy" "energy" -40 true true))) (add1 "energy")))))
(fun (fun2 energy z x e d) (if (<= energy 0) -79 (block (set! energy (- energy 1)) (set! x (* (our_code_starts_here (block 18)) (- -42 (* "energy" "x")))))))
(fun (fun3 energy h y a b) (if (<= energy 0) false (block (set! energy (- energy 1)) (set! b (>= (let ((g (isnum true)) (i (+ "b" "b"))) (let ((i "g") (j "a") (e -12)) "energy")) (* -43 (let ((c 23) (i -59)) -19)))))))
(fun (fun4 energy g c f a e j x d) (if (<= energy 0) false (block (set! energy (- energy 1)) (fun5 energy (set! energy (* (set! f "e") (add1 3))) (+ (block (let ((c "x")) "e")) (let ((y (set! f 6))) (our_code_starts_here "g")))))))
(fun (fun5 energy y b) (if (<= energy 0) true (block (set! energy (- energy 1)) (= (set! y (block false (* -34 "b") (set! energy true))) (block (let ((y "y")) (block -27 true)) (sub1 (- "b" "energy")) (block (block true "energy") true (let ((i "b") (x "i")) 49) (= true true) (let ((f -82) (h false)) true)))))))
(let ((h (<= (block (let ((loop_var_133 (- -78 89))) (loop (if (> loop_var_133 (- (- -78 89) 133)) (block (set! loop_var_133 (- loop_var_133 1)) (block (add1 (+ 90 -35)) -16)) (break (block (>= (let ((z false)) -62) (let ((y "loop_var_133")) "loop_var_133")) (if (set! loop_var_133 -53) (set! loop_var_133 false) (isnum false)) (block (* "loop_var_133" "loop_var_133") (* "loop_var_133" -54) (let ((f "loop_var_133") (x false)) 13) (block false) (let ((c input) (f -92)) "c")) (* (let ((y -74) (g "loop_var_133") (i 81)) "g") (- -52 "loop_var_133")) (- (* 46 "loop_var_133") (add1 "loop_var_133"))))))) (* (if (let ((g (let ((d (add1 -60)) (c (> 12 "d")) (f (let ((y "c") (j "d")) "y"))) (+ "d" 30))) (a (< (let ((z "g") (c "g") (e false)) -67) (- "g" "g"))) (b (block (block true -53 "g" "a" "g")))) (+ (let ((loop_var_20 "b")) (let ((loop_var_76 "g")) (let ((loop_var_167 0)) (loop (if (> loop_var_167 (- 0 167)) (block (set! loop_var_167 (- loop_var_167 1))) (break "loop_var_167")))))) (- -21 "g"))) (our_code_starts_here (let ((z (block 92 true 24 false true)) (a (+ -99 -7)) (i (<= -7 66))) (let ((z "a") (g "z") (c true)) -37))) 63) (block (isnum (> (let ((e 36)) 38) (let ((f -90) (j false)) "f"))) (block (if (let ((loop_var_9 1)) (loop (if (> loop_var_9 (- 1 9)) (block (set! loop_var_9 (- loop_var_9 1))) (break 74)))) (let ((loop_var_69 42)) (loop (if (< loop_var_69 (+ 42 69)) (block (set! loop_var_69 (+ loop_var_69 1))) (break false)))) (let ((a true) (x 12) (c "a")) "a")) true (isbool (<= 33 82)) (let ((g false) (z (let ((d false) (a false)) false)) (f (block 38 true false "g"))) (block true)) (block (let ((c true)) true) (< 95 80) (block -39 false 61) (let ((i true) (z 62) (e "z")) true) -12)) (+ (our_code_starts_here -35) 52))) (let ((loop_var_161 (let ((j false) (f -9) (z false)) -37))) (let ((loop_var_187 (our_code_starts_here 50))) (loop (if (> loop_var_187 (- (our_code_starts_here 50) 187)) (block (set! loop_var_187 (- loop_var_187 1)) (- (our_code_starts_here -91) (* (block -48 -53 -91) (let ((c -60) (z true) (i "c")) 88)))) (break "loop_var_187"))))) (let ((loop_var_45 (let ((z 42)) -76))) (loop (if (< loop_var_45 (+ (let ((z 42)) -76) 45)) (block (set! loop_var_45 (+ loop_var_45 1)) (+ (fun2 (let ((g -33)) "g") (our_code_starts_here -40) (let ((a 84) (c "a") (e true)) "c") (isnum true) true) (sub1 (let ((b -50) (f false)) 23))) (block (block (= false false) (if true input false)) (let ((b (let ((e 23) (y false) (g -30)) "e")) (i (isbool true))) (- -83 "b")) (let ((y -3)) (block false)) (let ((h (block false)) (c (add1 -88)) (b (block false -85 "c" -37))) (block "b")) (let ((a (block -29 true -2 7)) (h false)) (block 2 12 -69 "a")))) (break (block "loop_var_45" (block (+ "loop_var_45" "loop_var_45")) (let ((b (let ((a false) (h "a") (b true)) true)) (j (let ((x true) (e "b")) "loop_var_45")) (x (= false true))) (add1 -82))))))) (let ((z 10) (a (* (set! z (block (let ((j -87) (g -1) (c true)) 45) (add1 "z") (* "z" "z") (block -78 60))) (+ (- (sub1 -66) (block "z" 49 "z" -3)) (fun2 (+ 72 -90) (let ((loop_var_193 88)) (loop (if (> loop_var_193 (- 88 193)) (block (set! loop_var_193 (- loop_var_193 1)) (set! z "z") (set! z 23)) (break "loop_var_193")))) (let ((c false)) 78) (let ((y false)) false) (> "z" -71)))))) (block (= true (let ((y false) (a (let ((z true) (e "y") (f input)) true))) (let ((i "a") (a 1) (b "a")) "y"))) (set! z (< (let ((b "a") (g -7) (i true)) "a") (set! a -20))) (add1 (sub1 (let ((d true) (i 2) (c true)) "z")))))) (let ((c (>= (block (block (- (block true 3 52 70) (let ((y true) (b 96)) "b"))) (block (let ((g (block true)) (a (block -2 80 22 "g" 64))) (let ((d 0)) "d")))) -2)) (h -87)) "h"))) (f (block (let ((y (- -73 (sub1 (add1 (let ((h (fun1 100)) (e (- -73 52)) (f true)) (let ((b 100)) "b")))))) (c (set! y (set! y (let ((f (* (block "h" "y") -7)) (g (add1 (* "f" "f"))) (a (set! g (let ((b "f")) "f")))) (block (< 88 47)))))) (f (block (let ((i (>= (block (let ((i -77)) "y") (isbool false) (<= 58 -49) true (block true 66 -82)) (let ((i "y")) "y"))) (h (set! y (+ (block "y") (- 74 "y"))))) (let ((d (let ((h (< 75 "y"))) "h")) (x (> (let ((loop_var_139 "y")) (loop (if (> loop_var_139 (- "y" 139)) (block (set! loop_var_139 (- loop_var_139 1)) (set! h "h")) (break 11)))) (+ 2 58)))) (let ((z "y")) (+ "d" -50)))) (= (set! y (fun5 (let ((b -78) (e true) (a input)) "y") (let ((a "y") (c "a") (e "h")) "c") (- 86 "y"))) (let ((i (let ((i (block "c" false input)) (f true) (a (let ((z "f") (h true) (c "i")) "h"))) (block 88))) (b (let ((loop_var_57 -49)) (loop (if (< loop_var_57 (+ -49 57)) (block (set! loop_var_57 (+ loop_var_57 1)) (set! c "y") "i" -31) (break 57)))))) (>= (add1 85) (* -66 -66))))))) (let ((y (let ((e (block (block (let ((h true)) "y") (let ((f "c") (d "c")) 92) -35))) (d (let ((b (let ((x (+ "e" "e")) (b (let ((j 41)) "c")) (i (main -74 60 "h" "b" -82 "h" "e" "b"))) (- "x" "y")))) (let ((d (block "f" 40 "b" "y" false)) (g (let ((x "b") (f true) (c true)) "b"))) (if 61 "g" "y")))) (x (* (let ((b (isbool "c"))) 45) (let ((e (+ "y" "d"))) (block input true -30))))) (let ((f "f") (x (block (block "h") (set! f -92))) (z (let ((g (<= 97 -9)) (y (sub1 -56)) (h (- "d" 50))) (if false false "c")))) (let ((c (let ((h true) (i "y")) "h"))) (sub1 -95))))) (a (add1 (let ((h (block (let ((h "f") (b true) (x "y")) "y") (< "y" -38) (block "c") (let ((c "y")) false) (let ((z "f") (h false)) true))) (e (- (let ((loop_var_59 "y")) (loop (if (> loop_var_59 (- "y" 59)) (block (set! loop_var_59 (- loop_var_59 1)) "y") (break "loop_var_59")))) (let ((loop_var_112 -21)) (loop (if (< loop_var_112 (+ -21 112)) (block (set! loop_var_112 (+ loop_var_112 1)) (set! h "y") (set! h 33) (set! y 18)) (break "loop_var_112")))))) (j (let ((b (+ 42 "y")) (z (let ((loop_var_27 72)) (loop (if (< loop_var_27 (+ 72 27)) (block (set! loop_var_27 (+ loop_var_27 1)) (set! h -49) (set! y "b") "b" 11 -85) (break 75))))) (x (let ((e "y")) false))) (>= -56 37)))) (set! j (set! e -29)))))) (let ((c (>= (our_code_starts_here (block "y" false -88 false "y")) (+ (sub1 -52) (block "a")))) (a (< (* (let ((x "y")) "y") (block "f" "c" "a" "y")) (add1 (sub1 "a")))) (y (* (block (let ((d "y")) false) (block true "y" -58) (block false "f" "y" input) (- -85 "y") (block "a" "h" "y")) (add1 (+ -6 -29))))) (let ((z -95) (j (let ((c (let ((c -74)) "f")) (d "z")) (* "z" "z"))) (d (+ (add1 "z") (add1 -6)))) (let ((loop_var_137 39)) (let ((loop_var_55 "a")) (loop (if (> loop_var_55 (- "a" 55)) (block (set! loop_var_55 (- loop_var_55 1)) (set! y "d") (set! y "z") "y" "y") (break "z"))))))))) (let ((x (- (block (block (let ((loop_var_118 -14)) (let ((loop_var_131 38)) (let ((loop_var_149 -70)) (loop (if (> loop_var_149 (- -70 149)) (block (set! loop_var_149 (- loop_var_149 1))) (break 19)))))) (< (let ((loop_var_13 -41)) (let ((loop_var_105 15)) (loop (if (> loop_var_105 (- 15 105)) (block (set! loop_var_105 (- loop_var_105 1)) 78 78 -30) (break -56))))) (let ((loop_var_93 -87)) (loop (if (> loop_var_93 (- -87 93)) (block (set! loop_var_93 (- loop_var_93 1)) (set! h -50) (set! h -93) (set! h 52) 21) (break "loop_var_93"))))) (>= (let ((loop_var_125 45)) (let ((loop_var_22 75)) (let ((loop_var_174 32)) (loop (if (> loop_var_174 (- 32 174)) (block (set! loop_var_174 (- loop_var_174 1)) (set! h 67) (set! h -37) 26) (break 36)))))) (let ((x input)) -56))) (let ((g (let ((i (block 99 -7 false 90 -68)) (c (* "i" 37))) (>= "i" "i")))) (let ((c (let ((d -97) (h -85)) "d")) (y (isbool false))) (let ((loop_var_17 -49)) (let ((loop_var_76 "c")) (loop (if (< loop_var_76 (+ "c" 76)) (block (set! loop_var_76 (+ loop_var_76 1)) (set! h 25) "c") (break -87))))))) (block (set! h (* -73 76)) false (let ((x (our_code_starts_here -22)) (g (let ((loop_var_185 -100)) (loop (if (> loop_var_185 (- -100 185)) (block (set! loop_var_185 (- loop_var_185 1))) (break "loop_var_185")))))) (let ((z "g")) true)) (let ((z (* -73 38))) (let ((a true)) -32)) (let ((loop_var_138 33)) (loop (if (< loop_var_138 (+ 33 138)) (block (set! loop_var_138 (+ loop_var_138 1))) (break false))))) (* (let ((b (let ((g true) (e -55)) "h")) (h (let ((loop_var_15 13)) (loop (if (< loop_var_15 (+ 13 15)) (block (set! loop_var_15 (+ loop_var_15 1)) 90 -35 -75) (break "loop_var_15")))))) (let ((loop_var_142 -75)) (loop (if (< loop_var_142 (+ -75 142)) (block (set! loop_var_142 (+ loop_var_142 1)) (set! h "h")) (break -89))))) (* (- -57 -28) (+ -92 82)))) (our_code_starts_here (let ((j (= (isbool "h") (let ((i "h")) false)))) (add1 -91))))) (y (let ((c (- (block (let ((x (block false "x" "h" "x" true)) (c (sub1 62))) (set! x "x")) (block (* "x" "x") (let ((e input) (f true) (d input)) "x") (add1 -47) (let ((c "h") (e "x") (d true)) -29)) (+ (block 97 input 33 "x") "x")) (- (let ((c (isnum "h")) (z (block "h"))) (block true 69)) (let ((loop_var_146 "x")) (loop (if (> loop_var_146 (- "x" 146)) (block (set! loop_var_146 (- loop_var_146 1))) (break "loop_var_146")))))))) (>= (- (let ((b (let ((loop_var_162 -38)) (let ((loop_var_68 66)) (loop (if (< loop_var_68 (+ 66 68)) (block (set! loop_var_68 (+ loop_var_68 1)) (set! h true)) (break "h")))))) (g (> "x" -28)) (c (let ((j "h") (y "g") (z "y")) "x"))) (+ "c" "x")) (let ((d false) (a (add1 "c")) (e (block true "a" 65 "a" true))) (let ((x "x")) 94))) "c")))) (>= (set! x (set! y (+ (* "x" 61) (- "x" 97)))) (our_code_starts_here (* "x" (our_code_starts_here (let ((b "y") (d true)) 32)))))) true)) (z (block (block (* (let ((loop_var_98 (let ((g -12) (d input)) -76))) (loop (if (> loop_var_98 (- (let ((g -12) (d input)) -76) 98)) (block (set! loop_var_98 (- loop_var_98 1)) (set! h (- (fun2 -5 25 31 false false) -88)) (set! h (+ (let ((j -84) (x -77)) "j") (fun2 -8 43 52 "h" true))) (set! f (* -47 44)) -59 (let ((j (block true 25 -82 "h" 52)) (g (block false false "f" "h" true))) (let ((j "h") (x "j") (e "j")) 43))) (break (fun2 (our_code_starts_here "loop_var_98") (- "loop_var_98" "loop_var_98") (+ 10 "loop_var_98") false (fun3 "loop_var_98" "loop_var_98" 95 "loop_var_98" 75)))))) (* (+ (* (let ((e "f") (f "e") (c -41)) 42) (block -7 -61 14 -31)) (- (let ((c -9) (g -56)) "g") (let ((loop_var_134 30)) (loop (if (> loop_var_134 (- 30 134)) (block (set! loop_var_134 (- loop_var_134 1)) (set! f 73)) (break "loop_var_134")))))) (+ (block (let ((c 85)) input) 29) (* (block -70 true "h" -22) (+ -77 13))))) (block (isnum (let ((loop_var_41 (let ((f input) (j -67)) -83))) (loop (if (< loop_var_41 (+ (let ((f input) (j -67)) -83) 41)) (block (set! loop_var_41 (+ loop_var_41 1)) (set! h (<= 91 -38)) (set! h "f") (set! h (> -80 -4)) (let ((z -30) (b 66) (g "z")) true) (let ((a -13) (i 51)) input) (let ((y false)) false)) (break (block "loop_var_41" "h" "h")))))) true (let ((h (let ((h (let ((g (let ((y 46) (e 47) (c -66)) 53)) (z (block true))) (< -16 "g"))) (c (our_code_starts_here (+ 27 -45)))) (set! h (let ((loop_var_78 "c")) (loop (if (< loop_var_78 (+ "c" 78)) (block (set! loop_var_78 (+ loop_var_78 1)) (set! h -95) 80 "c") (break 85))))))) (c (block (= (let ((loop_var_176 -98)) (loop (if (< loop_var_176 (+ -98 176)) (block (set! loop_var_176 (+ loop_var_176 1)) (set! f "h") (set! h false) "f") (break true)))) (let ((d "h") (x "f") (g "x")) "h")) (let ((x (isnum false))) (>= 44 18)) (* (set! h "h") (let ((z false)) "h")) (block (+ "h" "h") (isbool "h") (sub1 "h")) (let ((x "h") (c (- 79 -90)) (d (> "h" "h"))) (let ((x 20)) "f")))) (z (sub1 (+ (let ((loop_var_74 "h")) (let ((loop_var_12 31)) (loop (if (< loop_var_12 (+ 31 12)) (block (set! loop_var_12 (+ loop_var_12 1))) (break "h"))))) (let ((i "h")) "i"))))) (+ (let ((b (* "z" 70)) (c (block 32 false false false "z"))) "b") (add1 "z"))) (+ (let ((z (let ((b (let ((d -77) (a "d") (e "a")) 16))) (<= 65 "b"))) (g (>= (- -85 -17) (let ((x -90) (y false)) "x"))) (d (- (sub1 80) 77))) (block (let ((z "d")) "g") (let ((x -25) (y false)) "g") (let ((g "h")) "f") (isnum input) (block 81 false "d"))) (block (let ((a (block -69))) (set! f "h")) (= (* -18 -68) -77) (let ((loop_var_60 83)) (let ((loop_var_152 17)) (loop (if (> loop_var_152 (- 17 152)) (block (set! loop_var_152 (- loop_var_152 1))) (break "loop_var_152"))))))) (block (<= (+ (let ((y -7)) "y") (our_code_starts_here -87)) (- 55 -82)) (let ((f (our_code_starts_here 99)) (y (add1 (let ((loop_var_60 85)) (loop (if (< loop_var_60 (+ 85 60)) (block (set! loop_var_60 (+ loop_var_60 1)) (set! f 53) (set! h 18) (set! f 52)) (break "loop_var_60"))))))) (let ((j (<= "y" "y")) (a "j") (y (fun1 14))) (<= -32 82))) (set! h (add1 (let ((f "h") (z 6)) 62))) (let ((loop_var_77 (set! f -79))) (let ((loop_var_122 (let ((a false)) -99))) (loop (if (> loop_var_122 (- (let ((a false)) -99) 122)) (block (set! loop_var_122 (- loop_var_122 1)) (block -61 "f") (block "h" true -5 false)) (break (block false))))))))) (let ((j (isnum (block (set! f (block (let ((a true) (x -49) (e -24)) -74) (let ((j 28) (y "h")) false) (- 87 16) (sub1 -30))) (block (+ (our_code_starts_here 58) (+ 23 -43)) (set! f (let ((f -17)) "h")) (>= (+ 40 -99) (block -69 58))) (let ((b (let ((y (let ((loop_var_184 -16)) (loop (if (< loop_var_184 (+ -16 184)) (block (set! loop_var_184 (+ loop_var_184 1)) "h" "f") (break "h"))))) (i (* -93 -60)) (h (let ((j true) (y 64)) -30))) (let ((a -22)) "h")))) (let ((h "b") (d (* "h" "b"))) (fun2 "b" 27 "b" false "f"))) (let ((j (let ((loop_var_110 45)) (loop (if (> loop_var_110 (- 45 110)) (block (set! loop_var_110 (- loop_var_110 1)) (set! h true) false "h") (break "h"))))) (g (let ((loop_var_88 -71)) (loop (if (> loop_var_88 (- -71 88)) (block (set! loop_var_88 (- loop_var_88 1)) (set! f "h") (set! f false)) (break true))))) (y (<= (+ 85 -53) (sub1 -60)))) (let ((j (let ((f -26) (g -89)) "f"))) (block true))))))) (if (* (sub1 (let ((d (let ((loop_var_30 -1)) (let ((loop_var_177 -65)) (let ((loop_var_165 62)) (loop (if (< loop_var_165 (+ 62 165)) (block (set! loop_var_165 (+ loop_var_165 1)) (set! j "h") false) (break false))))))) (i (let ((g input) (e 70) (y "g")) input)) (b (- 83 84))) (let ((b true) (x true)) "b"))) (sub1 (+ (- 93 8) -18))) false (>= (sub1 (- (let ((f "h")) 12) (let ((loop_var_157 -11)) (loop (if (> loop_var_157 (- -11 157)) (block (set! loop_var_157 (- loop_var_157 1))) (break 82)))))) (let ((loop_var_123 -13)) (loop (if (< loop_var_123 (+ -13 123)) (block (set! loop_var_123 (+ loop_var_123 1)) (set! j (sub1 9))) (break (let ((h "loop_var_123")) 53))))))))))) (< (sub1 (if (> (add1 (set! z (* -40 -75))) (+ -74 (let ((b (>= -26 69))) 80))) (let ((loop_var_59 (set! f 87))) (loop (if (> loop_var_59 (- (set! f 87) 59)) (block (set! loop_var_59 (- loop_var_59 1)) (set! z (block (block -29 true -13 "h") (+ -50 86))) (set! f (+ (let ((x -73) (h "h")) 42) (* -29 27)))) (break (let ((i (set! h "z"))) (- 86 20)))))) (- (block true (let ((e "h") (j "e")) (< -43 70)) "z" (let ((c 78)) (fun2 -79 "c" -56 "f" true)) (let ((h 81) (i (> "h" "h")) (e (let ((b "h")) false))) (- -41 "h"))) -72))) (let ((a (block 46))) (let ((g (< (* (let ((z (let ((f "a")) false)) (c (let ((i -8) (b true) (y "a")) false))) (let ((e "a") (a "a")) 57)) (block (>= "a" 9) (< "a" "a") (let ((loop_var_69 -19)) (loop (if (< loop_var_69 (+ -19 69)) (block (set! loop_var_69 (+ loop_var_69 1)) (set! a "a") 30 "a" -93) (break "a")))) -41 (let ((g true)) "a"))) (block (let ((c -82)) (< "c" -63)) (block (> 94 "a") (let ((loop_var_188 "a")) (loop (if (< loop_var_188 (+ "a" 188)) (block (set! loop_var_188 (+ loop_var_188 1)) true "z" false) (break "h")))) (block -87 "h" -30 "a") "h" (block -43 "a" "f" "a")) (block true (< -99 32) "a" "h" (let ((b false)) "a"))))) (x (isnum (block (* (let ((y "f")) -86) (block 54)) (>= (our_code_starts_here -18) (sub1 "a"))))) (z (block (- (let ((b (+ -9 "a")) (y (let ((j false)) "b"))) (let ((loop_var_37 "y")) (loop (if (> loop_var_37 (- "y" 37)) (block (set! loop_var_37 (- loop_var_37 1)) (set! x "a") (set! f -96) (set! b 48) "a") (break "a"))))) (add1 (let ((loop_var_30 46)) (loop (if (< loop_var_30 (+ 46 30)) (block (set! loop_var_30 (+ loop_var_30 1))) (break "loop_var_30")))))) (< (block (block "a")) (set! g (let ((h true)) "a"))) (add1 (let ((a (let ((loop_var_12 -96)) (loop (if (> loop_var_12 (- -96 12)) (block (set! loop_var_12 (- loop_var_12 1))) (break "f"))))) (d (block false input "x" false "h")) (g (let ((z true) (g "h") (j "a")) -43))) (block false 85 true "a"))) (>= (let ((loop_var_30 "a")) (loop (if (> loop_var_30 (- "a" 30)) (block (set! loop_var_30 (- loop_var_30 1))) (break "a")))) (let ((loop_var_51 56)) (loop (if (< loop_var_51 (+ 56 51)) (block (set! loop_var_51 (+ loop_var_51 1)) 94 -20 27) (break "loop_var_51")))))))) (block (let ((loop_var_21 (set! z "a"))) (loop (if (< loop_var_21 (+ (set! z "a") 21)) (block (set! loop_var_21 (+ loop_var_21 1))) (break (let ((x "h") (y 86) (z -13)) "z"))))) (sub1 (block (let ((b -21) (e "f") (a 70)) -68))) (set! g false))))))