(fun (our_code_starts_here energy a f z d g) (if (<= energy 0) -94 (block (set! energy (- energy 1)) (if (block (let ((d (block true)) (f (let ((c 78)) "a"))) (isnum "d"))) (let ((z true)) (set! f (let ((f 93) (h "z")) -54))) (block (isnum (= true false)) (let ((f (block "energy" "z"))) (+ 80 74)) (block (let ((b 92) (d true) (z false)) "g") (set! f 23) (let ((e true) (c true) (b "energy")) -12)))))))
(fun (main energy) (if (<= energy 0) false (block (set! energy (- energy 1)) (block (let ((d (let ((i (<= "energy" 42))) (> "energy" "energy"))) (y (set! energy true)) (g (* (if "energy" 26 -34) (let ((y false) (a 32)) -69)))) (>= (let ((f -14) (b false) (y 3)) -3) (set! energy "g"))) (let ((f (= (block true true true -66 false) (= "energy" 59))) (g (let ((j "energy")) (set! energy 62))) (h (>= (if "f" "energy" "g") (block "f" true "energy")))) (let ((d (- 66 -81)) (j (let ((z 40)) 8)) (z (let ((g true) (i "f") (z "i")) "g"))) (block "energy" -51 4 false true)))))))
(fun (fun1 energy h i a x j) (if (<= energy 0) -95 (block (set! energy (- energy 1)) (our_code_starts_here energy "energy" (set! energy (block (* "h" -81) (+ -23 15))) (* (let ((x (+ -64 82)) (j (let ((y -51) (f false) (x "h")) "x"))) (block "j" -27 -14)) (set! i (let ((b "h") (h "x")) "a"))) (our_code_starts_here (- (block false -97) (let ((x -8) (a true) (y "energy")) -75)) (let ((f "h") (x (block true "f" true false -63)) (e (- "a" "h"))) (add1 -80)) (* (set! j "energy") (let ((i 1) (x "x")) "x")) "j" "i" (<= (block 83) -42)) (>= (sub1 (* 53 -43)) (block false (let ((h false) (x 44) (z "h")) "h") (<= "x" "a") (let ((z "x") (d true)) "x")))))))
(let ((c (block (main (- (- -44 (fun1 (add1 (block false 61)) (let ((j (let ((y -50) (e -49) (b true)) "y")) (i (let ((c -11) (x 22)) true))) (block "i" -64 -20)) (+ (let ((loop_var_157 47)) (loop (if (> loop_var_157 (- 47 157)) (block (set! loop_var_157 (- loop_var_157 1)) 18 -48 -16) (break "loop_var_157")))) (let ((d -100)) 53)) (let ((j (let ((i false)) -54)) (x (sub1 -99))) (block true -5)) (block (isnum false) (let ((d -83) (y false) (z false)) 90)) (<= -68 (block 81 true -77)))) (+ (block 65 (let ((g (if -90 true true)) (z (let ((h "g") (d 65) (b "g")) 42)) (a (let ((a -54)) true))) (block 94 "z")) (let ((a (>= -36 23)) (x (let ((j -69)) false)) (h (let ((f 21) (d 19)) "x"))) (= -66 57)) (let ((a (block 15 true)) (b (>= -74 -48))) (our_code_starts_here 77 33 91 35 26 "a"))) 26))) (isbool true))) (z (block (isbool (let ((loop_var_150 (let ((z true)) 23))) (let ((loop_var_13 (our_code_starts_here 0 -14 -9 -90 50 false))) (loop (if (> loop_var_13 (- (our_code_starts_here 0 -14 -9 -90 50 false) 13)) (block (set! loop_var_13 (- loop_var_13 1))) (break (block (<= (block "loop_var_13" "c" "c" -54) (- "loop_var_13" 33)) (isnum (if "loop_var_13" input true)) (> (set! c 21) (+ "loop_var_13" "loop_var_13")))))))))))) (let ((loop_var_162 (let ((c -58)) -75))) (loop (if (< loop_var_162 (+ (let ((c -58)) -75) 162)) (block (set! loop_var_162 (+ loop_var_162 1)) (set! c (= (isbool (let ((c (* (- 85 68) (* -47 62)))) (> (fun1 -89 "c" -15 -87 "c" true) (+ "c" "c")))) (let ((g (if (block (- -18 -59) (block true)) (block "c" 89 (set! c -27)) (let ((d (- 72 -85))) (if "z" "d" "d")))) (z (<= (let ((d (let ((x "g") (a true) (h "x")) "z"))) (- "g" 30)) (+ (sub1 "g") (+ "g" "g"))))) (block (- (* "g" "g") (* -82 "g")) (block (isnum true) (let ((d false) (z "g")) "z") (block false 93 true)) (- (block 97 "c" "z" 67) (let ((a 96)) "g")) (let ((f (- "g" -24))) (block -18)) (block (if -42 false true)))))) (isnum true) (let ((d (isbool (block (>= (set! c 25) (let ((f -43) (a false) (g "f")) 95)) (>= (let ((c "c") (d -33)) -25) (let ((f -20) (c -39)) -11)) (let ((h (let ((y "z") (x -46) (e false)) -17)) (e (block "h" "c" true -87))) (block true input)))))) (>= (add1 (block (set! z true) (sub1 -25) (> 5 80) (block true 5))) (block (- (block 40 48) (- 33 -40)) (= (main -95) (= 45 44)) (let ((c (isbool "d"))) (> 2 15)) (block (let ((j true) (i 52)) "i") (- -81 81) (+ 40 54) (let ((i 87)) "i"))))) (block (- -49 (let ((b (block (if true -66 -7) (let ((f -67) (x "c")) false) (let ((f true) (g input)) -74))) (f (set! z (if "b" 4 78)))) 47)) 20 (set! c (isnum (let ((f (- 48 63)) (c (+ "f" "f")) (y (let ((i true)) "c"))) (let ((h 89) (d "f")) true)))))) (break (= (<= (- (block (block 53 "z" true -46 "c") (sub1 -81)) (- (set! loop_var_162 10) (let ((b 72)) 43))) (let ((j (let ((z (set! loop_var_162 -61)) (h (set! c "c")) (d (>= 16 "loop_var_162"))) (block "loop_var_162" "h" "d" "c"))) (d (- (- 44 "loop_var_162") (let ((f "c") (z "z")) -12)))) (set! loop_var_162 (block -14 true "z" "loop_var_162" "loop_var_162")))) (main (+ (block false -62 (fun1 "loop_var_162" "loop_var_162" 66 "loop_var_162" 7 "z")) (set! loop_var_162 (+ -52 "loop_var_162"))))))))))