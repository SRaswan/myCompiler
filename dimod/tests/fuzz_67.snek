(fun (our_code_starts_here energy f z e c g h j) (if (<= energy 0) 81 (block (set! energy (- energy 1)) (+ "f" (let ((b (let ((a (let ((y "e") (h "c") (z -71)) true)) (e (set! a "h")) (j (let ((d true) (a "energy") (f 3)) true))) (block "h" "h" "e" "energy")))) (- (+ "energy" "energy") (fun3 56 -51 -74)))))))
(fun (main energy f g d c e j) (if (<= energy 0) true (block (set! energy (- energy 1)) (set! j (>= (add1 (+ 22 "j")) (- (* "j" "j") "energy"))))))
(fun (fun1 energy y i h f d c a) (if (<= energy 0) -43 (block (set! energy (- energy 1)) (- (set! c (- (- -78 "c") (* "h" -86))) (+ (set! c 47) (* (let ((h 93) (f "i") (d "y")) -40) (let ((h "y")) -17)))))))
(fun (fun2 energy a b c g y) (if (<= energy 0) -55 (block (set! energy (- energy 1)) (set! g (set! a (- "energy" (- "energy" "energy")))))))
(fun (fun3 energy d z) (if (<= energy 0) -2 (block (set! energy (- energy 1)) "d")))
(fun (fun4 energy y j h c) (if (<= energy 0) false (block (set! energy (- energy 1)) (block (isnum (let ((e false) (f (let ((d -83)) -12)) (a (if "c" false true))) (= "e" "a")))))))
(fun (fun5 energy e a i b g f y) (if (<= energy 0) false (block (set! energy (- energy 1)) (block true (let ((f (set! energy "g")) (b (let ((j (sub1 "b")) (f (let ((x false)) "f")) (z (- 6 "e"))) (let ((z "y")) "g"))) (y (fun9 (fun9 -67 "f" "b" true "b" "g") (< "b" -93) (set! i "f") (set! e true) (let ((c true)) "a") (= 75 "a")))) (= (let ((e false)) "y") (< 45 "a"))) (let ((b (< (block -15 -18) (+ "a" "b"))) (z (- 4 (set! b "b")))) (let ((z (= 62 "i"))) (= 51 77)))))))
(fun (fun6 energy) (if (<= energy 0) 89 (block (set! energy (- energy 1)) (block (let ((f (+ (if "energy" "energy" -88) (block true 58 -77))) (z (set! energy (block "energy" false "f")))) (let ((b (let ((h false)) true)) (i (fun8 68 true "f" "f" false))) (add1 "f")))))))
(fun (fun7 energy x j f c b h a g) (if (<= energy 0) true (block (set! energy (- energy 1)) (set! f (set! h true)))))
(fun (fun8 energy g h b z) (if (<= energy 0) 93 (block (set! energy (- energy 1)) (- (let ((j (set! g (= 51 24))) (i (- 75 (+ -48 "g")))) (block (block "z"))) (let ((d (block (block -57 true true false 84) (* -52 "z"))) (f (let ((y (let ((e "h") (d "d") (a "h")) "b"))) -67)) (a (set! d (let ((f "h")) 88)))) (set! b (fun8 -67 false "d" 5 true)))))))
(fun (fun9 energy d y h x z) (if (<= energy 0) -14 (block (set! energy (- energy 1)) (block (block (- -58 (* "energy" "energy")) (block (block "x" "energy" true false) (let ((d -84) (b false)) -24) (block 41 98 true 15 "x") (set! h "z"))) "h" (let ((a (block (set! y true) (let ((d true)) false) (if "z" "z" "d") (let ((a 58)) true) "h"))) (add1 (block 14 true "energy"))) "z" "z"))))
(let ((loop_var_35 -66)) (loop (if (> loop_var_35 (- -66 35)) (block (set! loop_var_35 (- loop_var_35 1))) (break (let ((y (let ((z true) (b (block (block (> (- "loop_var_35" 76) (block "loop_var_35")) (>= (* "loop_var_35" "loop_var_35") (let ((e true) (i "loop_var_35")) 6)) "loop_var_35" (if (let ((f "loop_var_35") (a -77)) 35) (let ((a true)) "z") (= "z" "z"))) (our_code_starts_here (add1 (let ((h "loop_var_35") (g "h") (a false)) "h")) (let ((f -96) (a (let ((x "loop_var_35") (d -42)) true)) (j (block true "loop_var_35"))) (let ((y "z") (x false) (g "y")) 56)) (block (let ((z 17)) "z") (set! loop_var_35 true)) (+ (let ((b "loop_var_35") (y true) (x "b")) "loop_var_35") (let ((f false) (z false)) "loop_var_35")) (let ((f (* "loop_var_35" 44))) (set! f "z")) (isnum (block -10 true)) (block (block 62) (block 49) (let ((h "loop_var_35")) input) "z") (let ((h (let ((e 69) (g "e")) -13)) (x (add1 64))) (< -25 -6))))) (j (fun9 (- (block (set! b "z") (our_code_starts_here -63 "loop_var_35" "z" -51 "z" "z" true true)) (let ((f (fun9 "loop_var_35" false "z" true -51 true)) (b true)) (if input "loop_var_35" -24))) (< (set! loop_var_35 (* "b" 45)) (fun2 (set! b 92) (>= 67 69) (set! b false) (block "z" -27 "z" "loop_var_35" "z") (let ((c -71) (h true) (g true)) false) false)) (fun5 (sub1 (set! z -74)) "b" (block (let ((i -32) (b 27)) true) (+ 47 -30) "loop_var_35") (- (let ((a "loop_var_35")) 0) (block true 82 "z" "loop_var_35" "b")) (block (let ((e -56) (x "b") (d -54)) 27) "z" (< -57 "b")) (isbool (set! z "z")) (<= (+ 12 48) (let ((g "z") (f "g")) -34)) (+ (block true true "z" input) (set! z "loop_var_35"))) (>= (+ (block "z" "b" false -23 85) (- "loop_var_35" "loop_var_35")) (block (block "z" -90) "loop_var_35" (let ((i "loop_var_35") (a "z") (z "a")) false) (block "z" 92 "z" "loop_var_35" "loop_var_35"))) (block (block (let ((g 68) (e true) (a true)) -85) (set! z "loop_var_35") (let ((a "b") (y true) (x "z")) -29)) (let ((a (isbool "z")) (c (let ((e "z") (x "z")) true))) (set! loop_var_35 -68))) (> (block false (let ((e "b") (y 62) (i 63)) input) (+ "loop_var_35" -2)) (add1 (block -63 "z" "loop_var_35")))))) (block (set! z (set! j (isnum "z"))) (fun1 (* "loop_var_35" 98) true (+ (let ((f "z")) "loop_var_35") (let ((c true)) "loop_var_35")) (let ((d (fun3 -78 "j" "b")) (a (block false "b" "d")) (i (set! b "d"))) (let ((g false)) "g")) (set! j (let ((a -65) (i input)) input)) (set! loop_var_35 (let ((c "z") (j false)) 44)) (block (set! loop_var_35 true)) (let ((e (let ((f "z")) false)) (b (if "e" "j" "loop_var_35")) (c (let ((e "z") (x "e")) "j"))) (add1 -17))) (block "loop_var_35" (set! j "loop_var_35") (sub1 (* "j" "loop_var_35")))))) (d (>= (let ((c (let ((a (block (let ((g true) (z "y")) false) (+ "y" "y") (- -46 "loop_var_35")))) (set! y -79)))) (let ((g (block false))) (- (fun3 20 "y" 83) (let ((z true) (y -67) (b false)) -16)))) (block (let ((x (let ((d (let ((b false) (f -37)) -31)) (e (* -98 17))) (sub1 66))) (e (let ((e (isnum false)) (j (let ((e "e") (z false)) "z")) (d (fun7 "y" 13 -42 -71 "x" "x" "e" "j" 80))) (+ -43 "x")))) (let ((h (+ -31 "e")) (y (set! h -46)) (g (let ((a 19) (b input) (h false)) false))) (block true))) (let ((y (main (let ((c true) (f -41) (e "loop_var_35")) "y") (fun5 32 8 "loop_var_35" "loop_var_35" false false false -100) (< -55 "loop_var_35") (set! loop_var_35 "y") (< 65 -59) (let ((y false)) -51) (block 64)))) (block (let ((c -44)) true) true)) (let ((z (let ((b (* -34 "loop_var_35"))) (add1 -76)))) (let ((c (let ((b 6)) true)) (z -36) (x (block "c" "c" 18 33 "c"))) (sub1 "z"))))))) (if (> "y" (fun2 (block (sub1 27)) (= (* "y" "y") (* 62 16)) (let ((y (set! y input)) (a (<= "loop_var_35" "loop_var_35"))) (<= -22 "loop_var_35")) (fun5 (fun1 "y" "d" -83 true input -25 "d" -4) (let ((z "d")) -5) (+ 28 "y") (* "loop_var_35" "y") (isbool "d") (set! y false) (block "d" "d" true) (+ 68 -31)) (let ((b (let ((b "d") (a 37) (j "loop_var_35")) "loop_var_35"))) (isbool "d")) (> (block "d" "d" "d" "loop_var_35") (if false "y" 25)))) (* (block -29 (sub1 (fun9 "y" "d" "d" "d" -15 "d")) (let ((c (fun8 "loop_var_35" true "loop_var_35" "loop_var_35" "d"))) (>= -76 input)) (>= (+ -19 "y") (let ((y "y") (h true) (b 59)) "b")) (* (block "loop_var_35" input) (let ((x 86) (i true) (y "d")) -65))) (isbool (= (block true) (>= 57 "y")))) (let ((i (fun2 (block (let ((z "d")) "d") (- -74 "y") (+ "loop_var_35" -4)) (let ((h (- "loop_var_35" -47)) (j (fun3 -18 -92 -17))) (> -49 "h")) (set! d (block true)) (> (set! y input) (sub1 "y")) (> "y" (add1 8)) (<= (let ((y true)) input) (- input input)))) (j (sub1 (fun8 (let ((y "y") (f "y") (c "i")) 59) (let ((j -89) (f "d") (i "j")) true) (+ "loop_var_35" "loop_var_35") "y" (block "i" "i")))) (y (let ((i (>= (sub1 "j") (let ((f "d") (a "j")) -1))) (z (let ((z (let ((c "i")) "y")) (i (set! d -87)) (b (isbool false))) (block "i" "loop_var_35" 27 "i" 45))) (g (let ((z (add1 "j")) (c (let ((d 48)) "d")) (e (block input "d" "d" true))) (let ((c "loop_var_35")) "j")))) (let ((b (>= "z" -88)) (z (let ((y "loop_var_35")) "g")) (e (block false true true "loop_var_35" "loop_var_35"))) -85)))) (let ((z (>= (set! y -70) (let ((j "i")) "y"))) (a (block (> "y" "y") (set! loop_var_35 -72) (= "i" false) (block false true -9 "z" 8))) (d (fun5 (* 100 "j") (block false "i" false 45) (- "j" "j") (- "y" input) (block 3 true true 42 "z") true (let ((i "i")) false) (if false -8 "j")))) (let ((e (isnum "d")) (c (fun6 input)) (x false)) (set! e -24))))))))))