(fun (our_code_starts_here energy f d b e h y) (if (<= energy 0) -48 (block (set! energy (- energy 1)) (+ (let ((d (fun3 (let ((c 10)) "e") (let ((y "h") (x 61)) 74) (isnum true)))) (* (if false "f" 52) (set! energy "energy"))) (set! b (let ((c -99) (i (+ "c" -25))) (our_code_starts_here "energy" true "c" -15 false -6 85)))))))
(fun (main energy a f x i c b d) (if (<= energy 0) false (block (set! energy (- energy 1)) (let ((a (isnum (<= (* 50 90) (let ((j false) (e true)) "x")))) (i (let ((x (+ (- 80 80) (add1 "a"))) (h (if (set! c -11) (let ((c "x") (y 80)) "a") (block -2 "d" "d")))) (let ((c (+ -32 77))) (add1 "x"))))) (set! x (isbool "i"))))))
(fun (fun1 energy h d) (if (<= energy 0) true (block (set! energy (- energy 1)) (= (add1 (let ((c (let ((j 85)) true)) (d (isnum "d"))) (+ -21 45))) (+ (block "d" (= "energy" "h") (let ((e -35) (z "d")) "z") (our_code_starts_here "h" false "energy" "energy" false "h" 21)) (let ((e (isbool true))) (set! h "h")))))))
(fun (fun2 energy b z) (if (<= energy 0) true (block (set! energy (- energy 1)) (let ((y (sub1 (let ((z (if false -13 "z"))) (+ 25 87)))) (f (let ((g (* 25 (* -51 "z"))) (d (set! g (set! y "energy")))) (fun3 (set! y "y") "d" (isbool false)))) (c "y")) (let ((e (* (set! z "f") (+ -56 -98)))) (<= (- "b" 20) (let ((g false) (e true) (a "c")) "c")))))))
(fun (fun3 energy h e) (if (<= energy 0) false (block (set! energy (- energy 1)) (set! e true))))
(fun (fun4 energy h j) (if (<= energy 0) true (block (set! energy (- energy 1)) (isnum (fun4 (block (+ "h" "h") (let ((g "j")) "g") (let ((b false) (i false) (z "i")) "z") (fun2 "h" -8 true) (let ((j "j") (g 3)) "g")) (let ((y (let ((a "h") (b true)) "a"))) (let ((c "j")) false)) (let ((y (let ((a false)) "j"))) (let ((h "h") (e "energy") (i true)) false)))))))
(let ((loop_var_24 (+ 10 -47))) (loop (if (< loop_var_24 (+ (+ 10 -47) 24)) (block (set! loop_var_24 (+ loop_var_24 1))) (break (let ((y (block (let ((c (let ((y true)) (* (- "loop_var_24" -26) (+ "loop_var_24" "loop_var_24")))) (f (* (- (+ "c" input) (block -45)) (block (let ((f "c") (c true) (e "c")) "c") (block false -5 false 82))))) false) (let ((f (set! loop_var_24 (- (* -20 "loop_var_24") (* "loop_var_24" "loop_var_24")))) (c (block "f" (block (set! f "loop_var_24")) (isnum true) (- (set! loop_var_24 "loop_var_24") (set! loop_var_24 "loop_var_24"))))) (- (block (set! c "f") (fun3 -98 "loop_var_24" false) (block false true -12) (let ((g 59) (i true) (y true)) "loop_var_24")) (let ((h (fun3 -38 17 true)) (f (set! h "h")) (e (- -51 "f"))) (let ((g 44) (x "c")) "c")))) (fun4 (set! loop_var_24 (sub1 (block 49 true input))) false (if (> -15 (block "loop_var_24" true "loop_var_24")) (let ((a (set! loop_var_24 false)) (b (let ((i false) (g "loop_var_24") (z "loop_var_24")) -37)) (g (block "a" -36 true -48))) (let ((i "a") (b -13) (e "i")) false)) true)) (block (block (< (set! loop_var_24 input) (let ((z false)) "loop_var_24")) (let ((y false)) (= "y" "y")))) (= (let ((x "loop_var_24")) (let ((b false) (j (* 83 "x"))) (* "loop_var_24" -77))) (add1 (let ((x (let ((h -68) (e "loop_var_24")) "h")) (y (let ((x "x") (j 14)) false))) (- 44 "loop_var_24"))))))) (if false -96 (+ (sub1 (- (block "loop_var_24" 58) (- 33 "loop_var_24"))) (set! loop_var_24 (let ((x (set! y true))) (block "y" "y" 55 58))))))))))