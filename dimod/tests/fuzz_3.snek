(fun (our_code_starts_here energy d f) (if (<= energy 0) -8 (block (set! energy (- energy 1)) (let ((z (add1 (set! energy "energy"))) (b (if (fun2 (block "f" false false -45 "energy")) (block (fun3 50 true false true false) (let ((e true) (j "f") (h "j")) "f") (if "f" "z" "energy")) (+ (let ((a "f") (y false) (g "y")) -64) (add1 34)))) (y (> (block (= false false) (block false true) (= false false) (+ -9 55)) (if (add1 "d") (let ((b -1)) "d") (- -79 8))))) (- (sub1 (let ((x -10) (h "z")) "h")) (block (let ((x 95) (e -10)) "z")))))))
(fun (main energy e c x h g) (if (<= energy 0) false (block (set! energy (- energy 1)) true)))
(fun (fun1 energy d z h f j) (if (<= energy 0) false (block (set! energy (- energy 1)) (isbool (fun1 (+ (- -33 47) (let ((c "d") (d "h") (i true)) "f")) (set! j (> "energy" "energy")) (isnum (block "j" 43 78 "energy" true)) (+ (- "energy" "energy") (if "h" "energy" 74)) (set! energy (let ((i "h")) false)) (let ((j (block "z" "d" "f" "h"))) (set! j "d")))))))
(fun (fun2 energy) (if (<= energy 0) 72 (block (set! energy (- energy 1)) (block (block (set! energy 36) (<= (* "energy" "energy") "energy") (* (+ 45 "energy") (block true -6))) (let ((x (= (block false false -4) "energy")) (c (isbool (>= -5 "energy"))) (y (set! x (isnum "c")))) (let ((z (block -28 false "y"))) (block -32 "z" true false))) (* (if (block false "energy" "energy") (add1 -53) (let ((i false) (d true) (j "energy")) 98)) (let ((f (let ((e -23) (d 46)) "e")) (z false) (i (let ((f "energy") (i true) (e "f")) "i"))) (if "energy" 60 "f"))) (+ (+ (- "energy" 67) (block true "energy" 26 "energy")) (set! energy (block false true 38 28)))))))
(fun (fun3 energy b y e x) (if (<= energy 0) -35 (block (set! energy (- energy 1)) (fun3 energy (set! x (set! y (fun1 "energy" true true "energy" "x" "b"))) (if (+ (block false "y" "energy") (block "b" "e" true 98)) "e" (let ((x (set! x -11))) (= false true))) (main (block (isnum "y") (set! y "b") (block false false 91 "y" "b") (our_code_starts_here 9 "energy" 44)) (set! e (* "b" "energy")) (block (sub1 "b")) (block (let ((j "b") (f 36)) "j") (< "b" "b") (* -75 -20)) (block (add1 "energy") (block true)) (if (let ((b "y") (a 47) (e true)) "energy") (set! x false) (let ((i "energy") (a false)) "e"))) (let ((h (add1 "b")) (b (isnum (let ((b "e")) "e")))) (= (let ((j 75) (y true) (x "b")) "b") (* 41 -76)))))))
(isbool (main (let ((b (let ((b (* 53 (sub1 (- (- -67 -41) (let ((loop_var_49 -5)) (loop (if (> loop_var_49 (- -5 49)) (block (set! loop_var_49 (- loop_var_49 1)) -33) (break "loop_var_49")))))))) (a (let ((j (block (block (let ((c false) (j false) (d false)) "c") (* -70 80) (if true false false) (<= "b" 69)) (let ((g (let ((b true)) false)) (c (>= "b" -71)) (i (>= "b" "b"))) (block 13 82 -13)) (- (block 49 -17 -65 4) (* -95 -99))))) (let ((i (let ((a (- -34 35)) (i (+ "b" 36)) (d (fun3 "j" true true false true))) (let ((b "b")) false)))) (* (* "b" 55) (let ((j "j") (a "i") (d -96)) -77))))) (j (block "a" (isnum (main (- -4 -98) (add1 "b") (let ((loop_var_141 -52)) (let ((loop_var_75 95)) (loop (if (< loop_var_75 (+ 95 75)) (block (set! loop_var_75 (+ loop_var_75 1)) "a" "b") (break "loop_var_75"))))) (if input "a" "a") (block true false "b" true) (block 9 true true "a" true))) (> "a" (let ((x (let ((j 13) (x true)) "x")) (d (- -56 67)) (e (- "b" -18))) (let ((f false)) 53)))))) (isnum (block (if (block true false true) (let ((g "b") (c false) (f input)) "a") (let ((i "j")) "b")) (isnum (block -72 true 81 "b" true)) (> (* "b" -94) (* -1 "b")))))) (h 3)) (add1 (block "b" (set! h (block (block "b") (<= "h" -92))) (set! h (let ((d (< 90 -30))) (let ((a "h")) "a"))) (add1 (let ((f (- -100 "h"))) (* 46 "h")))))) (let ((j false)) (let ((f (block (let ((x (let ((a (let ((x "j") (f true) (h "j")) 86))) (block "j")))) (if (let ((e 37) (c "e") (x 99)) "x") (set! j "x") (>= 19 -62))) (< (let ((loop_var_57 -12)) (loop (if (< loop_var_57 (+ -12 57)) (block (set! loop_var_57 (+ loop_var_57 1)) -31 -95) (break "loop_var_57")))) -5) (fun3 (- (fun2 -74) (block -26 71)) (let ((a (let ((loop_var_184 70)) (loop (if (> loop_var_184 (- 70 184)) (block (set! loop_var_184 (- loop_var_184 1)) (set! j -34) -18 51) (break "loop_var_184"))))) (e (add1 -82))) (>= "a" "a")) true (let ((f (= 98 67)) (y (let ((y true) (d false) (z input)) true)) (d (let ((loop_var_32 -98)) (loop (if (< loop_var_32 (+ -98 32)) (block (set! loop_var_32 (+ loop_var_32 1)) (set! f false) (set! y "y") "y" false false) (break "y")))))) false) (let ((h (let ((loop_var_148 30)) (loop (if (< loop_var_148 (+ 30 148)) (block (set! loop_var_148 (+ loop_var_148 1))) (break "loop_var_148")))))) (> "h" "h"))) (>= (* (set! j -30) (let ((j true) (b 38) (f "b")) 100)) 41))) (z (let ((loop_var_195 (fun3 -27 "f" true true true))) (loop (if (< loop_var_195 (+ (fun3 -27 "f" true true true) 195)) (block (set! loop_var_195 (+ loop_var_195 1)) (set! j (let ((f (let ((y -44) (j "y") (f "y")) "f")) (a (add1 97))) (set! f false))) (set! f (let ((z (let ((z -28) (x -72)) "z")) (h (+ -7 -9))) (set! h "f"))) (set! f (>= (set! f -46) (block -26)))) (break (let ((f (block "j" "j" 35)) (e (set! loop_var_195 true))) (let ((f false)) input)))))))) (* (let ((f (isbool (<= 91 68)))) (set! j (let ((loop_var_142 -79)) (loop (if (> loop_var_142 (- -79 142)) (block (set! loop_var_142 (- loop_var_142 1)) (set! z 46)) (break "loop_var_142")))))) (let ((z (let ((b (our_code_starts_here -68 94 3))) false)) (i (let ((h (let ((j 0) (h -90)) -54)) (c (let ((a true)) true))) (* "h" "h"))) (g (let ((f (isbool "z")) (g (<= -93 "i"))) (<= "i" -63)))) (if "g" 23 "i"))))) (let ((loop_var_119 (let ((y 47) (i true) (d "y")) -40))) (loop (if (< loop_var_119 (+ (let ((y 47) (i true) (d "y")) -40) 119)) (block (set! loop_var_119 (+ loop_var_119 1)) (* (let ((b (our_code_starts_here (block -12) (let ((y 77) (i true)) "y") (+ 85 40))) (x (add1 (let ((d false) (z -45)) -35))) (f (set! b (let ((y true) (x 51) (b false)) "x")))) "f") (sub1 21)) (sub1 (+ (* (fun3 -60 true false false false) -30) (block (let ((h -37)) 66) 25)))) (break (- (sub1 "loop_var_119") (+ (let ((f (if input -20 "loop_var_119")) (h (let ((h -42) (b true) (g -47)) -42))) (set! h -43)) 36)))))) (- (block (let ((h (let ((e (- (let ((d 32) (b "d")) "b") (- 78 -100)))) (let ((g (let ((h false) (x -46) (b "e")) "x")) (b (let ((d 4) (e -97)) false)) (e (block "e" "b" 98 -37 -20))) (let ((g 72) (z false)) "b"))))) (block (if (block -45) (block 100 -44 "h") (let ((j "h") (d 26)) true)) (fun1 (block -47 -80) (let ((f -58) (x 0)) true) (let ((c "h") (f 88)) "c") (block -21 -39 24) (let ((loop_var_86 33)) (loop (if (> loop_var_86 (- 33 86)) (block (set! loop_var_86 (- loop_var_86 1)) (set! h true) (set! h true)) (break "h")))) (sub1 99)) (let ((loop_var_18 55)) (loop (if (< loop_var_18 (+ 55 18)) (block (set! loop_var_18 (+ loop_var_18 1)) (set! h "h") (set! h "h") (set! h false)) (break "h")))) (add1 (let ((z 70) (j -14)) "j")) (let ((loop_var_40 -96)) (loop (if (> loop_var_40 (- -96 40)) (block (set! loop_var_40 (- loop_var_40 1))) (break 29))))))) (if (let ((loop_var_185 (if 56 -8 55))) (loop (if (> loop_var_185 (- (if 56 -8 55) 185)) (block (set! loop_var_185 (- loop_var_185 1)) (block (* 50 19) true) (> (if false 88 92) (our_code_starts_here -32 -87 26)) (let ((c (+ -28 81)) (z (fun2 55)) (x (> "c" "c"))) (= input true))) (break (if (add1 "loop_var_185") (let ((c "loop_var_185")) true) (let ((y -50) (f false) (g "y")) "f")))))) (add1 -8) (add1 (block -77 (fun1 (let ((loop_var_101 -98)) (loop (if (< loop_var_101 (+ -98 101)) (block (set! loop_var_101 (+ loop_var_101 1)) -34 15 -87) (break -76)))) (let ((loop_var_67 26)) (loop (if (> loop_var_67 (- 26 67)) (block (set! loop_var_67 (- loop_var_67 1))) (break false)))) (main 61 96 -43 20 false true) (let ((c false) (f "c")) -64) (let ((g 65) (f true)) "f") -10) (* (* 33 -67) (- -66 -69)) (let ((j (let ((b -59) (d "b")) "b")) (e (- 71 -62)) (z (<= "j" -28))) (set! e -51)))))) (block (let ((b (add1 98))) (let ((j (isbool (if (block -28 true -73 false) (>= "b" 3) (> -16 -87))))) (< (block (let ((h "b") (i false) (e "h")) 44)) (block (>= "b" "b") (sub1 "b") (> -67 -96) (add1 -57) (set! b -13))))) (let ((g (> (let ((loop_var_146 27)) (let ((loop_var_171 (fun2 74))) (loop (if (> loop_var_171 (- (fun2 74) 171)) (block (set! loop_var_171 (- loop_var_171 1)) (let ((a -46) (z true)) "a") 91 (let ((z input) (c "z") (i true)) -70)) (break (add1 "loop_var_171")))))) (+ 60 (block true (let ((i -29) (b "i") (e false)) "e") (let ((loop_var_70 -61)) (loop (if (< loop_var_70 (+ -61 70)) (block (set! loop_var_70 (+ loop_var_70 1))) (break -86)))) (block true false false true) (* 83 -64))))) (z (let ((j (let ((loop_var_196 (add1 46))) (loop (if (> loop_var_196 (- (add1 46) 196)) (block (set! loop_var_196 (- loop_var_196 1)) (set! g false) (set! g "g")) (break (block "loop_var_196" "loop_var_196" -4 true)))))) (b (let ((a (block (block "j" "g" false "j" false))) (e (block (let ((loop_var_60 -76)) (loop (if (< loop_var_60 (+ -76 60)) (block (set! loop_var_60 (+ loop_var_60 1)) "a") (break "a"))))))) (set! j (let ((b -20) (c true)) "b")))) (x (<= 11 (let ((x (< "b" "b"))) 78)))) 7)) (e (let ((g (let ((f (= (let ((loop_var_109 "z")) (loop (if (> loop_var_109 (- "z" 109)) (block (set! loop_var_109 (- loop_var_109 1))) (break true)))) (let ((c "z") (y "c") (f true)) false)))) (> -72 (* "z" "z")))) (i (let ((loop_var_101 (set! g 97))) (loop (if (> loop_var_101 (- (set! g 97) 101)) (block (set! loop_var_101 (- loop_var_101 1))) (break (block "g"))))))) (set! g (block (let ((j "z")) "z") (<= "z" "z") (block "i" false "z" -55)))))) (block (block (block (<= "e" -72) (let ((d "z") (f true)) 45) (* "e" -19) (add1 "e")) (let ((b "g") (h (<= -36 -45))) (>= "z" 23)) (let ((j (let ((y 12) (z "e") (h "g")) "h"))) (- -72 -37))) (add1 (block (block "e" "g" "g" "g" "z") (block "e") (let ((c 84) (j "g")) false) (let ((loop_var_179 "e")) (loop (if (< loop_var_179 (+ "e" 179)) (block (set! loop_var_179 (+ loop_var_179 1)) 83 "e" -93) (break "loop_var_179")))) (* 100 -79))) (let ((f (set! e (= true false))) (z (= (let ((loop_var_34 58)) (loop (if (< loop_var_34 (+ 58 34)) (block (set! loop_var_34 (+ loop_var_34 1)) "e") (break 100)))) (add1 "z")))) (set! z (let ((loop_var_65 "z")) (let ((loop_var_21 "z")) (let ((loop_var_198 45)) (loop (if (> loop_var_198 (- 45 198)) (block (set! loop_var_198 (- loop_var_198 1))) (break true)))))))))) (block true)) (<= (+ (add1 (* (block (fun2 30) (let ((d false) (g "d")) 35)) (block (isnum false) (let ((g true)) 9)))) (let ((x (let ((loop_var_110 (let ((d true) (x 60)) "x"))) (loop (if (< loop_var_110 (+ (let ((d true) (x 60)) "x") 110)) (block (set! loop_var_110 (+ loop_var_110 1))) (break true))))) (y (sub1 (+ (add1 56) (let ((j -73)) 79))))) (let ((a (let ((g (> 64 "y"))) (let ((z "y") (e "z")) "z"))) (z (set! y (let ((g false) (f 8) (d 67)) false)))) (if (let ((z -84) (f "y") (e "y")) true) (let ((loop_var_133 -99)) (let ((loop_var_177 "y")) (loop (if (< loop_var_177 (+ "y" 177)) (block (set! loop_var_177 (+ loop_var_177 1)) 50) (break -42))))) (sub1 "y"))))) (let ((y (>= (sub1 (- (block 18 false true 96 82) (+ -86 -10))) (* (sub1 (add1 -28)) (let ((i (block false 65 true 9 true)) (g false)) (sub1 -29)))))) (block (let ((loop_var_75 (+ 66 77))) (let ((loop_var_1 (let ((b -79)) "b"))) (loop (if (< loop_var_1 (+ (let ((b -79)) "b") 1)) (block (set! loop_var_1 (+ loop_var_1 1)) (set! y (* -84 91))) (break (add1 "loop_var_1")))))) (<= (+ (let ((z 64)) "z") (let ((x "y") (e -49)) -77)) (let ((a (let ((h false) (y true) (e -11)) 73)) (i (fun1 "a" "y" false 14 true -22))) (let ((z "i") (a "a") (b "i")) "a"))) (if (set! y (let ((j -23)) "j")) (if (set! y 47) (let ((g -30)) "g") (set! y -36)) (block (- 45 -15) (<= -37 -24) (let ((x false) (g input)) "x") (block "y" -90 22 true -36))))))))