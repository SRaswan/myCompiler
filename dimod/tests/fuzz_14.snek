(fun (our_code_starts_here energy i j h f x) (if (<= energy 0) 60 (block (set! energy (- energy 1)) (- (let ((e (block (block true "x") (if "j" -96 "f") (isbool "x")))) (our_code_starts_here (+ -43 "energy") (block false) (+ "h" "f") (let ((h "e") (d 23)) 4) (if "h" "j" "x") (let ((f true)) -17))) (block (let ((z (let ((y 27) (d true)) -38))) (let ((g -92) (c true)) true)) (let ((j (<= 40 "i"))) (block -69)) (let ((i true) (y (isbool true)) (g (set! energy 15))) "i") -97)))))
(fun (main energy f) (if (<= energy 0) false (block (set! energy (- energy 1)) (> (- (block (let ((h true) (b false)) "f") (let ((x true)) -41)) (block (block false 97) (let ((x true) (d false)) "energy") (let ((y true)) false) (block "f" "f" 64 83))) (let ((g (if (let ((j true) (y "energy") (h true)) -30) (set! f true) (isnum false))) (x true)) (if (block "x" 10 "g" "f") (let ((a true)) -88) (let ((e "g")) -50)))))))
(fun (fun1 energy y i g e z j h) (if (<= energy 0) false (block (set! energy (- energy 1)) (let ((d (block false (block (let ((c "g")) "energy") (- "z" "j") (>= "energy" "energy") (set! y true)))) (j (* (* (- -89 -88) (block false 2)) (block (add1 52) (let ((i -57)) 16) (block -21 -29 false 3 -17))))) (block (block (set! i false) (+ "y" "energy") (block -47) (* "h" "z") (<= "j" "z")) (< (* -26 47) (+ 41 "j")) (< (* "h" -33) "energy"))))))
(fun (fun2 energy g) (if (<= energy 0) true (block (set! energy (- energy 1)) (let ((i (* (block (set! energy "g")) (block (let ((f 37) (z 38) (d 70)) false) (let ((a false) (f "g")) false) (let ((b 66) (h 63)) true) (our_code_starts_here 13 false -1 -97 false -40) (let ((g true) (z "g") (e "g")) "g")))) (f (block (let ((h (+ "energy" 63)) (a (set! i false)) (d (let ((h true) (f "a")) "h"))) (> 27 -89)) (let ((e (block false)) (h (if "i" "e" true)) (z (sub1 -78))) (set! e "e")) (> (let ((e false) (a false)) -45) (add1 -71))))) "f"))))
(let ((y (isbool (let ((x (let ((g (let ((f (let ((h (let ((loop_var_137 -54)) (loop (if (> loop_var_137 (- -54 137)) (block (set! loop_var_137 (- loop_var_137 1)) true) (break true))))) (x (* (block 61) (add1 -65))) (j (isbool (let ((i "x")) "h")))) false)) (i (* (set! f (let ((d "f") (g -81)) 25)) (block (let ((loop_var_197 -60)) (loop (if (> loop_var_197 (- -60 197)) (block (set! loop_var_197 (- loop_var_197 1)) (set! f 78) -27 -51 96) (break -38))))))) (c "f")) (set! c (fun2 (let ((a "i") (g 59)) 27) (block "c" "f" false 51 "c"))))) (e (* (block (- (let ((loop_var_105 -16)) (loop (if (< loop_var_105 (+ -16 105)) (block (set! loop_var_105 (+ loop_var_105 1)) (set! g -54) (set! g -45) (set! g -96) 65 -58) (break 4)))) (block "g" 9 "g" -86)) (add1 (let ((f -78) (j "f") (g "j")) 7)) (let ((d (let ((x 42) (c "x")) "g")) (x 0)) (let ((loop_var_135 -50)) (loop (if (> loop_var_135 (- -50 135)) (block (set! loop_var_135 (- loop_var_135 1))) (break "loop_var_135"))))) (let ((j (let ((loop_var_17 24)) (loop (if (< loop_var_17 (+ 24 17)) (block (set! loop_var_17 (+ loop_var_17 1)) (set! g "g") true) (break false)))))) (* -55 38))) (add1 (- (let ((loop_var_59 -8)) (let ((loop_var_95 38)) (loop (if (> loop_var_95 (- 38 95)) (block (set! loop_var_95 (- loop_var_95 1))) (break 5))))) (let ((y "g") (c 0)) "c")))))) (block (let ((loop_var_121 (if "e" "e" "e"))) (let ((loop_var_2 "e")) (loop (if (< loop_var_2 (+ "e" 2)) (block (set! loop_var_2 (+ loop_var_2 1)) (set! g (let ((a "e")) false)) (set! g (<= -12 -44)) (<= "e" "e") (main -31 false)) (break (set! g false)))))) (set! e (= (block false false false) (let ((a "e") (g "a")) "g"))) (isbool "g") (- (* (let ((loop_var_46 -48)) (loop (if (> loop_var_46 (- -48 46)) (block (set! loop_var_46 (- loop_var_46 1)) (set! e "e") (set! g "e")) (break -81)))) "e") (block (add1 -93) (+ 12 87)))))) (a 13) (h (let ((e (sub1 (let ((h (isnum (let ((loop_var_168 44)) (loop (if (< loop_var_168 (+ 44 168)) (block (set! loop_var_168 (+ loop_var_168 1)) (set! a true) false input false) (break false))))))) (- (* "x" -2) (block 24 "a" "x" "h" "x"))))) (c (- (sub1 (+ (let ((loop_var_117 -87)) (loop (if (< loop_var_117 (+ -87 117)) (block (set! loop_var_117 (+ loop_var_117 1)) (set! x "e") (set! a "a") (set! x "x")) (break "x")))) (let ((y 68) (h -36) (b true)) -92))) (let ((b (block (set! e "x") (sub1 "e") (let ((d "x")) -16)))) (block (+ "e" -82) (isbool false) (> "x" 35) (let ((loop_var_146 "e")) (let ((loop_var_67 3)) (loop (if (< loop_var_67 (+ 3 67)) (block (set! loop_var_67 (+ loop_var_67 1)) (set! x "b") (set! a "x") "e" "e") (break "a")))))))))) (<= (let ((h (sub1 (block "e")))) (let ((h (let ((x 83) (d 87)) 42))) (let ((z true) (x "h") (i 12)) "e"))) (* (block (let ((a true) (d true)) -69)) (add1 (* "a" 4))))))) true))) (e (let ((c (isbool (block (<= (* 63 (let ((loop_var_119 9)) (let ((loop_var_163 -35)) (loop (if (< loop_var_163 (+ -35 163)) (block (set! loop_var_163 (+ loop_var_163 1)) (set! y 0) (set! y -38) (set! y -64) -35 -18 -43) (break "loop_var_163")))))) (set! y (* (* -15 99) (let ((f "y") (a "y") (y -15)) "y")))) (let ((loop_var_100 (let ((x "y") (c "x") (g "x")) -40))) (loop (if (> loop_var_100 (- (let ((x "y") (c "x") (g "x")) -40) 100)) (block (set! loop_var_100 (- loop_var_100 1)) (set! y true)) (break (< (+ "loop_var_100" "loop_var_100") (+ "loop_var_100" 89)))))) (<= (set! y (let ((f (let ((loop_var_169 -20)) (loop (if (> loop_var_169 (- -20 169)) (block (set! loop_var_169 (- loop_var_169 1)) (set! y "y")) (break "y")))))) (sub1 -65))) (* (* (* -80 5) (block 68 "y" 77)) (+ (let ((x "y") (i "x") (e -75)) "e") (let ((g -26) (h "g")) "g"))))))) (i (let ((f (let ((c (block (isbool (let ((b (let ((z false)) -35)) (d (let ((e "c")) -81))) "c")) (let ((loop_var_85 (let ((j "y")) -92))) (let ((loop_var_48 99)) (loop (if (> loop_var_48 (- 99 48)) (block (set! loop_var_48 (- loop_var_48 1))) (break (let ((h 64) (g 44) (f "y")) "g")))))) (block (let ((e (+ -72 -16)) (j (add1 46))) (block true false false true "y"))) (isbool (let ((h (let ((loop_var_48 -83)) (loop (if (< loop_var_48 (+ -83 48)) (block (set! loop_var_48 (+ loop_var_48 1)) -48 54) (break "loop_var_48"))))) (i false)) (let ((f -75)) "c"))))) (a (block (= -12 (sub1 (add1 -99))) (isnum (> -16 (- -61 -19)))))) (sub1 (let ((loop_var_147 (let ((i "c") (e -25) (g 51)) "e"))) (loop (if (> loop_var_147 (- (let ((i "c") (e -25) (g 51)) "e") 147)) (block (set! loop_var_147 (- loop_var_147 1)) (set! c (if false 9 -37)) (set! a (let ((x false)) -40)) (set! y (sub1 59)) (add1 -83)) (break (+ "loop_var_147" 22))))))))) (block (isnum (let ((f (main (* "f" -65) (if true true "c")))) (let ((y (isnum false))) (let ((b true)) "c")))) (set! c (>= (let ((h -24) (e (let ((j "c")) 17)) (y "f")) (let ((x false) (a -66) (g -14)) -76)) (let ((h (let ((loop_var_114 -76)) (let ((loop_var_92 44)) (loop (if (< loop_var_92 (+ 44 92)) (block (set! loop_var_92 (+ loop_var_92 1)) (set! f 72) (set! c "f") 13) (break -70))))))) (let ((loop_var_53 74)) (loop (if (< loop_var_53 (+ 74 53)) (block (set! loop_var_53 (+ loop_var_53 1)) "f" 66 50) (break 72))))))) (isbool (let ((loop_var_35 (add1 -70))) (loop (if (> loop_var_35 (- (add1 -70) 35)) (block (set! loop_var_35 (- loop_var_35 1)) (set! c (block false)) (set! f (<= 48 52)) (set! y (= 33 28))) (break (< -79 "f")))))) (add1 (+ (+ (sub1 "f") (set! c "f")) (block (let ((f "f") (b "y") (c "c")) false) (- "f" 62)))))))) (block (let ((d (let ((y (= (let ((z (let ((loop_var_174 "i")) (let ((loop_var_29 -98)) (loop (if (< loop_var_29 (+ -98 29)) (block (set! loop_var_29 (+ loop_var_29 1)) "y" "c" true) (break true))))))) (let ((loop_var_45 41)) (loop (if (< loop_var_45 (+ 41 45)) (block (set! loop_var_45 (+ loop_var_45 1)) (set! i "i")) (break -54))))) (- (+ "i" "i") (let ((loop_var_54 2)) (loop (if (> loop_var_54 (- 2 54)) (block (set! loop_var_54 (- loop_var_54 1))) (break "i"))))))) (d "y")) (sub1 (let ((d (isbool input)) (e (<= -8 "i")) (i (let ((loop_var_11 -71)) (loop (if (< loop_var_11 (+ -71 11)) (block (set! loop_var_11 (+ loop_var_11 1)) (set! y "d") (set! c "d") (set! c "e")) (break "d")))))) (- "i" "i"))))) (b (let ((b (let ((b (let ((g (block "i")) (z (< "d" "g"))) (let ((y 0) (f 66)) 73))) (d -33)) (let ((loop_var_12 "d")) (let ((loop_var_85 "i")) (loop (if (< loop_var_85 (+ "i" 85)) (block (set! loop_var_85 (+ loop_var_85 1)) (set! c "y") (set! y false) (set! c true)) (break true))))))) (f (let ((loop_var_177 (+ "i" 44))) (loop (if (< loop_var_177 (+ (+ "i" 44) 177)) (block (set! loop_var_177 (+ loop_var_177 1)) (sub1 -45) (* -36 "d")) (break (sub1 "i"))))))) (let ((loop_var_50 (if "y" "f" 43))) (let ((loop_var_195 (our_code_starts_here -28 false -10 -45 "y" 59))) (loop (if (> loop_var_195 (- (our_code_starts_here -28 false -10 -45 "y" 59) 195)) (block (set! loop_var_195 (- loop_var_195 1))) (break (fun1 "d" "y" true "y" -47 -38 "f" "y"))))))))) (let ((loop_var_72 (set! c 9))) (let ((loop_var_183 (if "d" "d" "i"))) (loop (if (< loop_var_183 (+ (if "d" "d" "i") 183)) (block (set! loop_var_183 (+ loop_var_183 1)) (block (let ((c 55) (i false)) "d") (< "d" 66) (if -20 27 "i") "i" (let ((c -30)) "y")) "c") (break (let ((j (main -11 "c")) (h (sub1 "j"))) (= true true)))))))) (let ((b (isbool (block (our_code_starts_here (sub1 97) (block -67 -98 "y" false) (block true 55 "i") "i" (>= -93 "i") (add1 35)) (let ((e (block true true)) (a (block false input)) (j (+ 35 -52))) (+ -29 62)) (> (* "i" "i") (let ((loop_var_38 29)) (loop (if (< loop_var_38 (+ 29 38)) (block (set! loop_var_38 (+ loop_var_38 1)) (set! y -39) (set! i -92) "i" -93) (break -54))))) (isbool (let ((b "i") (i -29)) "y"))))) (i (set! b (let ((loop_var_149 (* 49 "i"))) (loop (if (> loop_var_149 (- (* 49 "i") 149)) (block (set! loop_var_149 (- loop_var_149 1)) (set! c (let ((c 58) (i 71) (b "i")) "i")) (set! y (add1 "i")) -1 (let ((h "i") (x "i") (z "x")) -29)) (break (+ 16 "loop_var_149"))))))) (h (+ (+ (- (+ -6 -41) -10) (set! y (* "i" -24))) (set! y (let ((loop_var_167 76)) (loop (if (> loop_var_167 (- 76 167)) (block (set! loop_var_167 (- loop_var_167 1)) (set! c -84) (set! i -1) (set! c "i")) (break 39)))))))) (+ (let ((y (let ((f (- -27 "i")) (a (fun2 -49 true))) (block "c" "h" -85 -69 "i")))) (let ((c (= -67 "i"))) (block true 88))) (set! i (+ (set! i "h") (let ((b "i")) "i")))))))) (x (add1 (+ (let ((h (= (* (block (let ((c input)) -44)) (+ (set! e -55) "e")) (let ((loop_var_8 (block "e" "e"))) (loop (if (> loop_var_8 (- (block "e" "e") 8)) (block (set! loop_var_8 (- loop_var_8 1)) (add1 -65) (set! y "e")) (break (our_code_starts_here "loop_var_8" "y" "e" 2 false "loop_var_8"))))))) (c (let ((g (let ((i (block (block "y" false "h" -78 true) true (+ "e" 85)))) (if (block "h" "e") true (let ((e "e")) true)))) (f (isbool "g"))) (+ (block (let ((c true) (h false)) -30) "g" (<= 87 -36) (block "g" "h" "e" "f" -81) (let ((i false)) -85)) (block "e" (let ((loop_var_132 "e")) (let ((loop_var_83 -2)) (loop (if (< loop_var_83 (+ -2 83)) (block (set! loop_var_83 (+ loop_var_83 1)) (set! g "e") (set! e 68) (set! y -34)) (break 96)))))))))) (* "e" (set! e (- (let ((z "h") (f true) (b "e")) "e") "e")))) (* (- (- (let ((loop_var_160 "e")) (loop (if (< loop_var_160 (+ "e" 160)) (block (set! loop_var_160 (+ loop_var_160 1)) -86 "e" 93) (break -20)))) (set! y (let ((loop_var_47 "e")) (loop (if (> loop_var_47 (- "e" 47)) (block (set! loop_var_47 (- loop_var_47 1)) (set! y "e")) (break "loop_var_47")))))) (set! e (+ (sub1 -11) (block true "e" -12 "e")))) (if (let ((e "y") (c "y") (j (isnum (<= -16 "e")))) (block (isbool false) (let ((j "j")) "e") (set! j -68) (* "e" "e") (let ((loop_var_138 "e")) (loop (if (< loop_var_138 (+ "e" 138)) (block (set! loop_var_138 (+ loop_var_138 1)) "e") (break "e")))))) "e" "e")))))) (let ((loop_var_121 (+ "e" 7))) (loop (if (< loop_var_121 (+ (+ "e" 7) 121)) (block (set! loop_var_121 (+ loop_var_121 1)) (set! e (>= "x" (block (if (let ((x (set! y false))) (> -78 -12)) (< (set! e 21) (- "x" "x")) false) (<= (set! x (set! y 23)) (our_code_starts_here (let ((y false) (f true) (e "y")) "e") (< "x" 83) (* -89 -66) (let ((b "x")) "b") (let ((d "y")) false) (set! x "x"))) 15))) (set! e (let ((a (+ (block (let ((e (> "x" "e")) (a (isnum "y")) (j (+ 30 "x"))) (let ((y "a") (z -82)) "x"))) (block false (if (let ((x true)) "x") (set! x false) (let ((x "x") (d false)) true)) (set! x "x") (block (let ((c "y") (d "e") (i 69)) true) (sub1 -90)) (set! e (let ((g -100) (y -35) (c "y")) "y"))))) (h -76) (y (- (* (add1 (let ((h "y") (g 84) (e "e")) 73)) (* (block "y" false -29) (our_code_starts_here 48 true "x" "a" "y" "h"))) (block (add1 (let ((y "y") (a "a") (x false)) 39)) (block (let ((j "e") (g 76) (h "h")) -97) (= "y" "y")) (block (block "x" 20 "y" "e") "y" (let ((e "x") (z "h") (h true)) "a") (block "e" 30 -55 -57 "x")))))) (main (* (let ((b (= "e" "y")) (e (+ 70 42)) (a input)) (add1 "e")) (+ (set! a "h") (block true 27 true true -61))) (set! y (<= (block true "y" true 6 "a") (add1 -29)))))) (set! x (main (+ (let ((z (+ (let ((b "y") (c "y")) -71) (+ -77 30))) (d (block (if -69 67 "e")))) (* (- -77 -76) (let ((x false)) "z"))) (- -18 (if (- 55 -5) (set! y -81) (- 71 "x")))) (set! e (let ((h (let ((i (fun2 "e" "y")) (g (let ((g true) (d true)) true)) (x (>= "e" 59))) (let ((f "x") (e "x") (x "f")) "y"))) (y (set! h (block -40))) (e (block (let ((h 65)) "y") (set! y "y") (block "h" "y" -40 false) (let ((i 31)) "y")))) (block (let ((h 5) (f "y") (j "h")) input) (isnum "y") (set! x 81) (= false input)))))) (block (<= (let ((h (our_code_starts_here (our_code_starts_here -33 input -62 "x" "y" -70) (set! x false) (set! y "x") (block true false -77 "y" -79) (block true "e" "y" "y") (+ 93 "x")))) (if (block -93 "x" "y") 3 (* 97 "e"))) (sub1 (let ((b "y") (d (set! b "e"))) (sub1 "e")))) (let ((d (block (let ((j "e")) input) (let ((e (let ((f false) (e -37)) true)) (f (if "x" 26 "e"))) true) (let ((i (main 63 "y")) (g (set! i "i"))) (let ((j "x") (y input)) "j")) (block false))) (z (let ((c (let ((f (<= "x" "e")) (b (block -62 26)) (y (* 40 65))) (let ((c 90) (e 21)) true))) (i (- "e" (let ((h "x") (b "y") (f "e")) "f")))) (* (+ "e" "i") (- "x" 80))))) (<= (add1 "e") (if (= "d" true) (add1 "x") (block "x" "d" true "z")))) (let ((d (let ((z (set! x (- 19 -15))) (x (isnum (let ((c false) (e "x")) "y")))) (if (< "e" "x") (- "e" -86) (let ((x "e")) -21))))) (let ((e (let ((z (let ((g -17)) true)) (f (sub1 "x"))) (let ((x "e") (i true) (g "i")) 80))) (f (add1 (our_code_starts_here -32 "y" -53 "e" "y" "e"))) (b (if (set! y "e") (let ((g true) (c "y") (x "f")) "f") (block 24)))) true)) (set! x (block (< "x" (let ((i false) (a false) (b input)) "x")) (set! y (= true false)) (sub1 (let ((e false) (g true)) 37)) (* (our_code_starts_here "x" true 37 8 "y" "e") (+ "e" "e")) (set! y (= -54 "x")))))) (break (<= (let ((g (block -50 (block (let ((b -64)) "y") (block "y" "y" false) (isbool "y")) (let ((d (let ((g -91) (i "g")) "y")) (h (= "loop_var_121" "e"))) (block -47 "loop_var_121" "loop_var_121" "x" false)) (set! y (let ((g 46)) "e")) (set! loop_var_121 (>= "e" 62))))) (+ (block (add1 97) (sub1 -21) (let ((a "x") (b "a")) "e")) (let ((a (isnum true))) (block 33 "y" "x")))) (let ((e (let ((x "e") (d (let ((h (isnum "y")) (g (block "h"))) (block "h" "g" false))) (a -87)) (set! x (sub1 "e"))))) (- (let ((j (let ((b true)) "y")) (x (= false true)) (d (block true))) (- "e" 63)) (let ((d (add1 "e")) (g (isnum "y"))) 54)))))))))