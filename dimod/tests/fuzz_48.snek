(fun (our_code_starts_here energy z) (if (<= energy 0) 4 (block (set! energy (- energy 1)) (sub1 (- (block (let ((e false) (a "z")) 6) (if false "z" "energy")) (set! energy (block -50)))))))
(fun (main energy c b a x) (if (<= energy 0) true (block (set! energy (- energy 1)) (> (block (block (let ((e "b")) false) (block "c" "energy" "c")) (block (> "x" -95) (+ -45 96)) (set! b 96)) 83))))
(fun (fun1 energy f y) (if (<= energy 0) false (block (set! energy (- energy 1)) (let ((x "f") (b (set! f (block (- "x" 94) (fun1 -23 false "y") (fun1 -50 "y" "y")))) (g (block (if (let ((x "x") (h "x")) "y") (block "y" "x" false "b") (> "x" "energy")) (block (set! x true) (let ((g "x")) "y"))))) (block (* (- 78 "energy") (let ((e true) (a -89) (d "e")) -28)) (let ((j (> -90 "energy")) (h (block true true "y" "b"))) (>= -36 -24)))))))
(fun (fun2 energy b d e f z a) (if (<= energy 0) -33 (block (set! energy (- energy 1)) (if (let ((a (> (if 78 11 20) (block "a" "d" "e" "a" "energy"))) (i (+ (+ -9 0) (* "b" "e"))) (y (let ((z (let ((c "i")) "b"))) (block -58 true)))) (<= (set! energy "a") (block "f" "a"))) (let ((x (let ((h (fun8 "energy" "b" false "z" "z" false))) (* "energy" "d")))) (+ (block -74 false "d" "z" 80) (let ((e 68) (g "e")) -31))) -25))))
(fun (fun3 energy e x c d f) (if (<= energy 0) -59 (block (set! energy (- energy 1)) 74)))
(fun (fun4 energy f j y b g a) (if (<= energy 0) -89 (block (set! energy (- energy 1)) (block (set! a (- (block "y" "y" "f" false 18) (- "a" -29))) (let ((h (sub1 (let ((a true)) "f"))) (y (set! y (block -9))) (e (+ 61 (sub1 "h")))) (block (- "energy" -92) (let ((e "g") (j "b")) "e") (let ((b "j") (h -68)) -64) (block "y" "y" 94))) (let ((y "y") (z (<= (let ((c "j") (x 29)) -61) (if "f" "b" -99))) (a (isbool (>= "energy" 81)))) (< (set! energy -35) (+ "j" 24))) (< (if (isnum false) (block "y" "y" "f" "f") "b") (fun4 (if "b" "b" "j") (+ "energy" "energy") (set! energy false) (* 48 "a") (* "g" "j") (+ -1 -94) (> 49 -52))) (let ((x false) (e (<= (fun9 43) (block 68 "g")))) (let ((b (let ((f "g") (e false)) true))) (let ((y 34)) -63)))))))
(fun (fun5 energy x a c h i b f) (if (<= energy 0) false (block (set! energy (- energy 1)) (= (block (+ (block "b" "a") (let ((c false) (i -23) (j true)) "i")) (<= (let ((e "energy") (x 2)) -70) (- "h" "f")) (sub1 (set! x "f")) (block (<= -39 "h") (isbool "b") (fun3 "c" "energy" false 21 true "x"))) (fun2 -42 (* (fun4 -86 "h" "b" 66 -12 -75 "b") (* "h" "a")) (let ((b (block -89 "energy" "b")) (f (* "c" -22))) (+ "f" -24)) (block (>= 51 "f") (fun7 -82 "i" "b" -78 "b") (+ "h" -98) (block 25 "b" "b")) (> (fun4 89 -32 "b" -31 -72 -10 "b") (set! i "x")) "energy" (let ((b (isnum true)) (x (<= -8 "i"))) (isnum "x")))))))
(fun (fun6 energy y c j f d a i) (if (<= energy 0) true (block (set! energy (- energy 1)) (< (set! i -40) (let ((b 14) (c (+ "f" (set! f 47)))) "energy")))))
(fun (fun7 energy d x g f) (if (<= energy 0) true (block (set! energy (- energy 1)) (fun6 energy (set! f (block (isnum "g") (let ((g "energy") (c 78) (x -77)) "g") (let ((a false)) false))) (= (let ((f (let ((c "x") (x 71) (b 38)) -21)) (i "f")) (add1 -70)) (let ((x (+ 15 "x")) (g (if "g" 48 "f")) (c (block "g" 38))) (let ((x false) (b true)) -78))) (add1 (block (block "g" "g") (add1 "f") (let ((d "x") (c "g") (g false)) 95) (block 81 true true -11 "g") (block "x" "f" "g" false -58))) (let ((e (+ (set! g "d") (set! g -40))) (h (set! g (let ((h false)) "g"))) (g (* (block "x" "g" "x" false 56) (+ 89 11)))) false) (* (block (- "d" "energy") (set! x false) 39 (set! d false) (fun4 "f" 22 true "energy" -21 78 false)) (let ((i (* -94 32)) (f (block "i" 43))) (block -41 "energy" 82))) (isnum (block (let ((z -57)) "g") true)) (block (block (set! f "g") false (set! x "g") (isnum "g") -75) (add1 (if true "f" -36)) "x" (fun4 (let ((b "d")) -7) (set! energy "x") (block "g" "g") (* "d" "energy") (* -59 -29) (block true "g" "g" "energy" "f") (isbool "g")) (add1 (if "energy" -56 -22)))))))
(fun (fun8 energy h g x b y) (if (<= energy 0) false (block (set! energy (- energy 1)) (fun6 energy (= (let ((x (< -70 "energy")) (j (let ((j 46)) true)) (e (fun3 96 94 "x" "h" true 61))) (isbool "b")) (isbool (<= 17 "h"))) (block (set! energy "h") (let ((h (isnum true)) (c (block -55 false))) (isbool false)) (set! g (isbool "x"))) (* (if (let ((j false) (z -40) (a false)) "energy") (let ((a "energy")) "g") (block -31 -71 "x" -56)) (* (block "g" "h" "energy" "x" -17) (set! y "h"))) false (let ((i (>= -8 (block false "energy" "b" false 40))) (d (+ (let ((g "g")) "g") (set! energy 78))) (a (let ((d (let ((c "d")) "b"))) (let ((g -27)) "h")))) (block (let ((a true) (x 29)) false) (- 12 "d") (let ((i false)) "h"))) (= (* (block true true "g" "y" "g") (let ((z 85) (i "g")) "energy")) (let ((f (sub1 -12)) (j (let ((c false)) "energy")) (z (- "f" "energy"))) (* 14 87))) (let ((b (fun9 (let ((i 73) (a -51) (z false)) 13))) (x (let ((d false)) (let ((a true) (e false)) "a"))) (f (let ((g (- "g" 48))) (if false "x" "x")))) (+ (let ((z "g") (b false)) "h") (sub1 -40)))))))
(fun (fun9 energy) (if (<= energy 0) 4 (block (set! energy (- energy 1)) (block (block (block (let ((e "energy")) false) (< "energy" -60) (+ "energy" 59)) (block (let ((a "energy") (h true) (e false)) false) (+ "energy" -49) true) (* (+ 45 -6) (let ((c true)) -61)) (let ((b (set! energy "energy")) (f (<= -38 67)) (x true)) true)) (= (sub1 (- -57 "energy")) (+ (let ((e false) (x -98) (d "e")) -73) (+ "energy" "energy"))) (add1 (- (* "energy" "energy") (block false "energy")))))))
(if (fun9 (- (fun9 (block (let ((x (sub1 (our_code_starts_here -24 -40))) (y (let ((c (let ((e false) (x 5)) true)) (e (sub1 47)) (z (let ((y "x")) "c"))) (+ "e" 92)))) (let ((i (let ((h 1) (d false)) true)) (h (>= "y" "y")) (f (isbool "h"))) (- "x" "x"))) (if (let ((i true)) (if true -40 -70)) (let ((a (- -40 -1)) (b (let ((f "a") (z true)) -83))) (>= 15 59)) (< (if -52 -52 -25) (let ((g 34) (c true) (a 30)) -22))) (>= 84 80) (+ (* (- 8 -10) -37) (let ((loop_var_200 -37)) (loop (if (> loop_var_200 (- -37 200)) (block (set! loop_var_200 (- loop_var_200 1))) (break "loop_var_200"))))))) (let ((j (if (* (let ((g (let ((c true) (x 41)) input)) (d (block 86 -63))) (if "d" 39 -44)) (let ((h (= false true))) (block "h" "h" 64))) (let ((loop_var_4 (+ -39 -62))) (loop (if (> loop_var_4 (- (+ -39 -62) 4)) (block (set! loop_var_4 (- loop_var_4 1)) (our_code_starts_here -55 35)) (break (- -33 87))))) (block (let ((i (block -94 12 79 true false))) (< -25 32)) (fun7 (let ((loop_var_118 -72)) (loop (if (> loop_var_118 (- -72 118)) (block (set! loop_var_118 (- loop_var_118 1))) (break "loop_var_118")))) (if false -8 -46) (>= 58 -86) (let ((loop_var_83 -31)) (loop (if (< loop_var_83 (+ -31 83)) (block (set! loop_var_83 (+ loop_var_83 1))) (break "loop_var_83")))) (= -31 44)) (block (let ((loop_var_162 88)) (let ((loop_var_61 96)) (let ((loop_var_107 -82)) (loop (if (> loop_var_107 (- -82 107)) (block (set! loop_var_107 (- loop_var_107 1)) 35 -7 98) (break "loop_var_107"))))))) (fun3 (add1 64) (let ((e 96) (i false) (a false)) -71) (let ((e -24)) true) (let ((i input) (c 69)) -1) (let ((c false)) "c") (let ((a true) (b input)) -56))))) (y (< (block (+ (block 18) "j")) (let ((loop_var_177 (let ((d "j") (h true)) "j"))) (loop (if (< loop_var_177 (+ (let ((d "j") (h true)) "j") 177)) (block (set! loop_var_177 (+ loop_var_177 1)) (set! j (set! j "j"))) (break (* "j" "j"))))))) (x (let ((loop_var_76 (let ((e 36) (x input)) "j"))) (loop (if (> loop_var_76 (- (let ((e 36) (x input)) "j") 76)) (block (set! loop_var_76 (- loop_var_76 1)) (set! y (+ (* "j" "j") (set! y -78))) (set! y (- (+ -40 -6) (let ((c -3)) -27))) (set! j (let ((f (set! y "y")) (g 43)) (set! f "g")))) (break (let ((e (* 39 "loop_var_76")) (i (< 92 67))) (block 25)))))))) (* (let ((g (fun1 (+ "x" "x") (isbool "y") (fun6 "x" "y" false "x" "y" 100 "y" "j")))) (+ (+ "x" -88) (let ((i true) (f false)) -66))) (- (block (set! x true) (* -21 37) (if -48 "y" false) "x") "x"))))) (isnum false) (block 75 (* (sub1 (let ((y (let ((f (let ((c false)) (+ 99 -31)))) (- (let ((y 28) (f false)) -12) (block false -46 62 "f")))) (z (let ((g (- (if false 55 11) (let ((h -8)) 4))) (h true)) (let ((loop_var_96 "g")) (loop (if (< loop_var_96 (+ "g" 96)) (block (set! loop_var_96 (+ loop_var_96 1)) "g" "y") (break -47))))))) (- (let ((e 68) (c true) (f (let ((h "z") (f input) (j "c")) true))) "y") (set! y (add1 -31))))) (let ((loop_var_114 (sub1 -91))) (loop (if (> loop_var_114 (- (sub1 -91) 114)) (block (set! loop_var_114 (- loop_var_114 1)) (if (block (= -5 -76) (let ((d 45)) false) false (block true)) (add1 (if -74 -7 93)) (let ((a (<= -59 -53)) (g -78) (z (<= 7 "g"))) (fun9 "g"))) (block (fun1 (sub1 -80) (let ((f true)) "f") (block 98 32 false true)) (* (+ -55 -10) (* 63 78)) (add1 (fun2 22 13 25 false input -19 false))) (let ((y (<= (block 57) (* -54 -27)))) (* 25 -68))) (break (block (set! loop_var_114 (< "loop_var_114" "loop_var_114")) (block -13) (- (set! loop_var_114 "loop_var_114") (+ "loop_var_114" "loop_var_114")))))))) (isnum (block (let ((h (let ((y (if (fun6 -82 false false 86 false -33 true 24) (+ -24 55) (fun2 -43 -27 13 false true -78 false))) (z (let ((b (isnum false)) (f "b") (y 5)) (let ((h "y") (d "f")) "d"))) (x (set! y 98))) (block (= "z" input) (let ((z false)) -60) (* "x" 91) (< "y" "y"))))) (isnum (< (let ((e true)) 20) (let ((z -39)) "z")))) (let ((g (fun4 (+ (+ -94 -93) (let ((loop_var_133 -52)) (let ((loop_var_89 42)) (loop (if (> loop_var_89 (- 42 89)) (block (set! loop_var_89 (- loop_var_89 1))) (break 24)))))) (- -39 (fun4 -12 1 true -46 -68 21 false)) true (fun9 (block 51 -83 -31)) (add1 (+ -60 -68)) (block (let ((d false)) -84)) (if false (let ((j 10) (z -17) (a "z")) true) false))) (a (let ((e (block (= -70 -53) (add1 99) (< -23 -39) (+ -47 88))) (d (block (isbool "g") (set! g "g") (let ((h -5) (j true)) true))) (j (let ((c (< -43 99))) true))) (let ((y (let ((z false) (h "j") (j input)) "z")) (a (* 75 -30)) (b (let ((c "g") (y true)) true))) (let ((h 76) (c -90)) -92)))) (h (fun2 (block (block -87 "g" "g" true true) (sub1 -20) (set! g 41)) (let ((loop_var_36 1)) (let ((loop_var_137 "a")) (let ((loop_var_32 53)) (loop (if (> loop_var_32 (- 53 32)) (block (set! loop_var_32 (- loop_var_32 1)) "a") (break "loop_var_32")))))) (sub1 (sub1 33)) (set! a (let ((z -33) (c "g")) false)) (block (let ((f 8)) "a") (let ((z false) (j "z")) "g")) (* (add1 "a") (+ "a" 72)) (let ((b (let ((h true)) "a")) (d (block -44 true 8 "a" "a"))) (block "a" -8 43 false false))))) (add1 (block (let ((i 19)) "g") (let ((h false)) "a") (* "h" "a") (= false input) (set! g 13)))) (- (let ((loop_var_62 (* 40 -58))) (loop (if (> loop_var_62 (- (* 40 -58) 62)) (block (set! loop_var_62 (- loop_var_62 1))) (break (let ((f true) (g "loop_var_62") (j 91)) "j"))))) (+ (let ((loop_var_165 -94)) (loop (if (< loop_var_165 (+ -94 165)) (block (set! loop_var_165 (+ loop_var_165 1)) -28) (break "loop_var_165")))) (let ((e (let ((c -26) (i 8)) true)) (d (block false))) (* 19 98)))) true))))