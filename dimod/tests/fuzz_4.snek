(fun (our_code_starts_here energy i) (if (<= energy 0) 20 (block (set! energy (- energy 1)) (set! energy "i"))))
(fun (main energy x d) (if (<= energy 0) false (block (set! energy (- energy 1)) (block (sub1 (fun3 (block false "x" "d" true "energy") (- 38 -19) (let ((h false)) -4) (block -10 56 -16) (isbool false) "d" (isbool false) (let ((a 42) (g "d") (z -41)) -71))) (block true true) (let ((i (set! energy (isbool true))) (a (< "x" (- "x" 5)))) (sub1 (sub1 "x"))) "d"))))
(fun (fun1 energy y a) (if (<= energy 0) true (block (set! energy (- energy 1)) (> (set! y (block (- "y" 15))) (let ((g (let ((x (set! energy true)) (e (= "energy" "energy"))) (block "a" true false))) (b (>= (block false -59) (- "y" "energy"))) (e (>= (let ((h "y")) -79) (let ((i 66) (z true) (g "b")) "i")))) (* (set! e "y") (set! a 62)))))))
(fun (fun2 energy j z x y h g e) (if (<= energy 0) 81 (block (set! energy (- energy 1)) (add1 (set! x (add1 (+ 98 -63)))))))
(fun (fun3 energy g j i x a z f) (if (<= energy 0) -30 (block (set! energy (- energy 1)) (set! i (+ (block (set! a true) (block false "g" -87 -24) (add1 65)) (* (let ((a false) (c false) (y "i")) "g") (let ((b "energy")) 74)))))))
(fun (fun4 energy i d b f h) (if (<= energy 0) true (block (set! energy (- energy 1)) true)))
(fun (fun5 energy) (if (<= energy 0) true (block (set! energy (- energy 1)) (= false (>= (set! energy (add1 -50)) (fun3 (+ "energy" -57) (let ((x "energy") (c "x") (j -63)) -5) (block true "energy") (block true 49 true true "energy") (set! energy true) (< "energy" 67) (let ((x true) (i "energy") (h -83)) "x") (block false false false false "energy")))))))
(block (+ (let ((loop_var_30 (* -5 -54))) (loop (if (> loop_var_30 (- (* -5 -54) 30)) (block (set! loop_var_30 (- loop_var_30 1)) (let ((j (if (sub1 -54) (sub1 (let ((h 78) (g 98)) "g")) (add1 (sub1 -25)))) (a (+ (+ (let ((j "j")) "j") (block true "j")) (let ((g (> 97 79)) (f (block "g" 28 "j" false)) (c -1)) "j"))) (y (set! a (- (- "j" "j") (+ "a" "j"))))) (+ (block (set! j -47) (let ((c "a") (d true)) "a")) (set! a (let ((i "j")) "a")))) (let ((d (let ((f (block (= 13 -68) (block false -93 68) (our_code_starts_here 43 -78))) (d (set! f (let ((g -13) (z false)) "z"))) (i (block (let ((e "d")) "f") (if "d" false true) (isnum false)))) "f")) (x (- (let ((d "d") (f (let ((c true)) "c")) (j (= "d" -30))) (+ "d" "d")) (sub1 (let ((y "d") (a "y")) "a"))))) (* (let ((b (block "x" true false)) (g (let ((j true)) "j"))) (* 64 -30)) (+ (let ((h "d") (d false) (z false)) "d") 3)))) (break (block (let ((b (block (+ -29 "loop_var_30") (isbool true) (set! loop_var_30 false))) (e (set! loop_var_30 (<= "loop_var_30" 61)))) (- (add1 81) (block "e" "b" "b" -91 -14))) (let ((f (set! loop_var_30 (> -50 70))) (c (* (+ 41 90) (set! f 14)))) (= (let ((y input)) "f") (let ((g "c") (z -16) (f "f")) "f"))) (set! loop_var_30 (let ((j (fun1 -58 false -14)) (d (set! loop_var_30 -37)) (z (< "j" "d"))) (sub1 "loop_var_30"))) (block true) "loop_var_30"))))) (* (our_code_starts_here (+ (* (fun3 (let ((a true) (i "a")) -3) (let ((i 66) (h true) (d true)) "i") (block 38 -97) (let ((d 53) (z 41) (g -67)) 85) (block true true -71 3 true) (isnum false) (isnum false) 86) (let ((b (block 45 74))) (let ((loop_var_119 "b")) (loop (if (< loop_var_119 (+ "b" 119)) (block (set! loop_var_119 (+ loop_var_119 1))) (break "b")))))) (let ((z (block (block true false) (* -79 0)))) (+ (- "z" "z") (block true "z")))) (let ((x (let ((a false)) (* (block 6 -74 -92 -70) (block false 3)))) (g (let ((g (block (block true 6 "x" -64) (set! x "x") (set! x -15) (block -55 false 10) (block false true false -86))) (z (set! x (isbool true)))) (>= (sub1 "x") (- -36 -73))))) (block (sub1 (let ((loop_var_17 "x")) (let ((loop_var_134 45)) (loop (if (< loop_var_134 (+ 45 134)) (block (set! loop_var_134 (+ loop_var_134 1)) -14) (break 45)))))) (block (+ "x" -50) (let ((z -19) (x input)) 59) (block true "g" "x") (let ((g "x") (i "g") (c -56)) "x")) (let ((e (isbool true)) (y (- "x" 10))) "e") (let ((y (let ((h true) (g "g") (a false)) -89)) (z (<= -89 "x")) (g (block "x" "y" true))) (let ((c "y")) -7)) (+ "x" (if true 35 "x"))))) (* (- (let ((f (let ((loop_var_53 33)) (loop (if (< loop_var_53 (+ 33 53)) (block (set! loop_var_53 (+ loop_var_53 1)) 33) (break 62))))) (a (<= (set! f -4) (let ((b false)) "f"))) (b (- (block "a" "f" "f" false "f") (- -97 "f")))) (- (- "f" -8) (let ((g "a") (a "a")) "f"))) (sub1 (- -97 (block 11)))) (let ((loop_var_48 (fun2 -72 false true 90 true false true 7))) (loop (if (> loop_var_48 (- (fun2 -72 false true 90 true false true 7) 48)) (block (set! loop_var_48 (- loop_var_48 1)) (block (- 20 2)) (add1 (let ((g -93)) 31)) (our_code_starts_here -87 (* 78 -55))) (break "loop_var_48"))))))) (isbool (if (sub1 55) (<= (let ((h (if (if (+ -58 61) (fun2 39 false false -56 false true true 1) (* 45 71)) (sub1 (add1 -60)) (block (isnum false) (= 33 -96) (let ((h false) (g -31)) 78)))) (a (let ((j (fun2 (sub1 "h") (>= 48 "h") false (let ((c 1) (h 93) (a 7)) -27) (block 3 true) (block input 7 false false) (> "h" "h") (let ((loop_var_1 100)) (let ((loop_var_100 "h")) (let ((loop_var_65 -86)) (loop (if (< loop_var_65 (+ -86 65)) (block (set! loop_var_65 (+ loop_var_65 1)) (set! h "h") (set! h "h") (set! h "h") "h" "h") (break "loop_var_65")))))))) (i (block (set! h input) (let ((a true) (f -70) (i 59)) 7) (>= -5 23) (let ((y "j") (j -3)) 31) (* "h" 70))) (h (block (add1 "i")))) (add1 (let ((loop_var_114 "j")) (let ((loop_var_56 "j")) (loop (if (< loop_var_56 (+ "j" 56)) (block (set! loop_var_56 (+ loop_var_56 1))) (break "j")))))))) (z (let ((loop_var_60 (sub1 48))) (loop (if (< loop_var_60 (+ (sub1 48) 60)) (block (set! loop_var_60 (+ loop_var_60 1)) (set! a (block "h")) (set! h (* -81 "h")) (set! a (- -97 "a"))) (break (sub1 -73))))))) (let ((loop_var_128 (let ((h -77) (x 66) (d 81)) -10))) (loop (if (< loop_var_128 (+ (let ((h -77) (x 66) (d 81)) -10) 128)) (block (set! loop_var_128 (+ loop_var_128 1)) (set! a (set! a "h")) (set! a (* 61 "z")) (set! z (- -52 -84))) (break (block true true "z" false "a")))))) (sub1 (add1 (let ((a (> -21 75)) (x (+ -36 24))) (if "a" "x" 18))))) (<= (block (* 20 57) (let ((e (block (add1 48))) (d (set! e (= true true))) (z "d")) "e") (+ (our_code_starts_here (if true 67 83) (our_code_starts_here 13 -44)) (our_code_starts_here (let ((loop_var_114 64)) (let ((loop_var_84 20)) (loop (if (> loop_var_84 (- 20 84)) (block (set! loop_var_84 (- loop_var_84 1)) 59 89 88) (break "loop_var_84"))))) (sub1 90))) (add1 (let ((e (block false 46 true)) (j (> -16 -11)) (g (let ((loop_var_173 -30)) (let ((loop_var_9 -1)) (loop (if (< loop_var_9 (+ -1 9)) (block (set! loop_var_9 (+ loop_var_9 1)) (set! e 100) (set! e -9) (set! e -95)) (break "loop_var_9"))))))) "g"))) 72))) (add1 (sub1 (let ((a -14) (d (< (block (> (block 27) (- "a" "a")) (let ((j (* "a" 59)) (b (let ((g false) (c 95) (i "c")) 35))) (block true)) (let ((h (block false)) (c (block "a"))) 88)) (- (set! a (* "a" "a")) (- (block true "a" "a" "a" 61) (let ((loop_var_78 "a")) (let ((loop_var_185 -93)) (loop (if (< loop_var_185 (+ -93 185)) (block (set! loop_var_185 (+ loop_var_185 1))) (break -42)))))))))) (let ((e (add1 "a"))) (* (* (- "a" "e") (our_code_starts_here "e" "a")) (block (sub1 "a"))))))) (if (let ((h (let ((z (block (isnum (block (block true) (> -45 -3) (>= 79 -28) (>= 21 -76) (let ((d true) (g 13)) "d"))) (fun3 (let ((c (* 15 -65)) (d (> "c" "c"))) (* -52 "c")) (let ((e (let ((d false)) 94)) (c (let ((i "e") (h false) (y false)) "y"))) (- 63 5)) (fun2 (let ((loop_var_131 50)) (let ((loop_var_50 36)) (loop (if (> loop_var_50 (- 36 50)) (block (set! loop_var_50 (- loop_var_50 1)) -57 49) (break 17))))) (let ((z -87)) true) (let ((loop_var_128 -26)) (loop (if (> loop_var_128 (- -26 128)) (block (set! loop_var_128 (- loop_var_128 1)) true) (break true)))) -76 (>= -98 -90) (isbool true) true (our_code_starts_here 29 16)) 31 (block (let ((loop_var_118 -12)) (loop (if (> loop_var_118 (- -12 118)) (block (set! loop_var_118 (- loop_var_118 1)) false true true) (break false)))) false (let ((loop_var_31 88)) (loop (if (> loop_var_31 (- 88 31)) (block (set! loop_var_31 (- loop_var_31 1)) -18 82 51) (break -37)))) (if -54 false true) (> -71 82)) (< (let ((x true) (e "x") (y -10)) "y") -83) (let ((b (block 72 -56)) (h (>= -84 "b"))) (isbool input)) (let ((h (let ((c 79)) "c"))) (block 67))) (> (let ((x (< 87 86)) (e 0)) (let ((z "e") (d false) (y -21)) "y")) (let ((h (let ((a false) (b -12)) 86))) (- -32 -41))) (let ((loop_var_141 (fun2 22 false true 33 true input true -9))) (loop (if (> loop_var_141 (- (fun2 22 false true 33 true input true -9) 141)) (block (set! loop_var_141 (- loop_var_141 1))) (break (block true)))))))) (let ((loop_var_157 (if "z" -70 66))) (loop (if (> loop_var_157 (- (if "z" -70 66) 157)) (block (set! loop_var_157 (- loop_var_157 1)) (set! z -36) (set! z (- 73 (block 7 -42 -64)))) (break (fun2 (- "loop_var_157" "loop_var_157") (set! loop_var_157 "z") (>= 68 -66) "loop_var_157" (main "loop_var_157" false -5) (if "loop_var_157" "z" true) (block input) (let ((a input) (b "z")) "loop_var_157"))))))))) (block (if (add1 (block true (> "h" "h") (let ((i "h") (e "h") (b false)) true) (block -99) (block -67 false "h"))) (let ((a (>= (let ((g false) (f false) (c input)) 11) (let ((loop_var_158 84)) (loop (if (< loop_var_158 (+ 84 158)) (block (set! loop_var_158 (+ loop_var_158 1)) "h") (break -39)))))) (e (- (let ((d "a") (y "h") (b 31)) "b") (let ((i "h") (c "a") (y input)) -46)))) (block (block "e" "a" 63) (let ((x -71) (j true)) "h") (add1 -85))) (let ((e (let ((loop_var_143 -46)) (loop (if (> loop_var_143 (- -46 143)) (block (set! loop_var_143 (- loop_var_143 1)) (set! h true) (set! h false) (set! h false) true) (break false))))) (d (* (+ 50 "h") (let ((y true) (b 20)) -55))) (j (> (let ((x "d") (d 37)) 67) (sub1 "d")))) (let ((g (let ((c true)) "h"))) (block "h" "d")))))) (<= (sub1 (let ((g (let ((loop_var_82 (let ((e -89)) -22))) (loop (if (> loop_var_82 (- (let ((e -89)) -22) 82)) (block (set! loop_var_82 (- loop_var_82 1))) (break (let ((h false)) false)))))) (z (add1 65))) (set! g (* (sub1 "z") (set! g 61))))) 53) (if (- -75 (let ((f 32) (i (let ((h (let ((i (let ((loop_var_108 92)) (let ((loop_var_25 "f")) (loop (if (< loop_var_25 (+ "f" 25)) (block (set! loop_var_25 (+ loop_var_25 1))) (break "f"))))))) (let ((d true) (h true) (e "f")) "d")))) (let ((i (block false "f" -69 -20 "f")) (x (block input -7 "h" "f"))) (let ((f false) (a 46) (b "f")) 86))))) (let ((a (- (let ((z "i") (h "z") (b true)) "h") (+ -92 30))) (c (block (set! i false) (block true false) (* 36 -94) (block 48 true true false)))) (let ((a (let ((f true) (c true)) true)) (y (let ((d "a")) "f")) (c (let ((loop_var_179 "i")) (let ((loop_var_128 "y")) (let ((loop_var_100 61)) (loop (if (> loop_var_100 (- 61 100)) (block (set! loop_var_100 (- loop_var_100 1)) true) (break "c")))))))) (let ((e "f")) 39))))) (fun1 (block (block (let ((loop_var_72 -42)) (loop (if (< loop_var_72 (+ -42 72)) (block (set! loop_var_72 (+ loop_var_72 1))) (break "loop_var_72")))) (add1 -68) (block (block true true -65 true) (<= 9 46) (let ((x 83) (i -38) (e "i")) false) (>= 2 -1))) (let ((loop_var_26 (our_code_starts_here 36 8))) (loop (if (> loop_var_26 (- (our_code_starts_here 36 8) 26)) (block (set! loop_var_26 (- loop_var_26 1)) (>= -69 -28) (= 34 78)) (break (block false 21 true false))))) (+ (let ((e (- 64 -12))) (let ((y "e")) "y")) (block (let ((loop_var_142 18)) (loop (if (< loop_var_142 (+ 18 142)) (block (set! loop_var_142 (+ loop_var_142 1)) 15 -43) (break -47)))) (< 4 23) (let ((loop_var_139 -25)) (let ((loop_var_194 -56)) (loop (if (< loop_var_194 (+ -56 194)) (block (set! loop_var_194 (+ loop_var_194 1)) -95 -49 28) (break "loop_var_194"))))))) (let ((loop_var_31 (+ -21 69))) (let ((loop_var_160 (block -3 3 -13))) (loop (if (> loop_var_160 (- (block -3 3 -13) 160)) (block (set! loop_var_160 (- loop_var_160 1)) (sub1 94) (- -99 25) (our_code_starts_here -65 -37)) (break (set! loop_var_160 "loop_var_160"))))))) (= (let ((b (block (let ((loop_var_182 83)) (loop (if (< loop_var_182 (+ 83 182)) (block (set! loop_var_182 (+ loop_var_182 1)) true) (break true)))) (let ((loop_var_121 38)) (loop (if (< loop_var_121 (+ 38 121)) (block (set! loop_var_121 (+ loop_var_121 1)) -63 -21) (break "loop_var_121")))) false)) (x (block (= false true) (let ((e 89) (y "b") (j "e")) "j") (let ((h true) (i -7) (c "b")) "i") (let ((b false) (e -13)) "e"))) (j (< (let ((a "x")) "x") (let ((z "x") (a "x") (d false)) 91)))) (isbool (let ((c 31) (a false) (e false)) false))) (let ((loop_var_63 -81)) (loop (if (< loop_var_63 (+ -81 63)) (block (set! loop_var_63 (+ loop_var_63 1))) (break (block -97 false "loop_var_63" false)))))) (block (- (- (* 9 -2) (sub1 86)) (let ((d (let ((x false)) false)) (e (let ((a "d") (j true) (g false)) -6))) (let ((y -95)) 64))))) (isbool (isbool (let ((i (let ((z (add1 -41)) (f (< 57 "z")) (i (+ "z" 57))) (set! z "i"))) (f (<= (- "i" "i") (let ((h -52) (f -79) (g true)) "i"))) (g "f")) (isnum (block 60 true 84 false true))))))))