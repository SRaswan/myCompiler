(fun (our_code_starts_here energy h z g c) (if (<= energy 0) -94 (block (set! energy (- energy 1)) (fun8 energy (set! g "energy") (set! z (if (let ((e "z") (h true) (f "e")) "e") (fun4 "g" true "z" false) -64)) (- (* (let ((h false) (f true)) "energy") (set! h 7)) "g") (let ((g (let ((b true) (e (let ((a "g") (i true)) true)) (f (add1 60))) (+ "g" 89)))) (set! c (let ((f 98) (h false)) false))) (+ (* (fun2 75) (set! z "g")) (let ((z (>= -41 "g")) (x (set! g true)) (a (> "g" "h"))) (- 89 -89))) (let ((i (block "h" (let ((x 22) (d -65)) "z") (set! g "energy") (= "z" "c") (set! c false))) (b (main (let ((i -43) (x "i") (z -50)) "i") (>= -36 62) (let ((g false) (b "g")) -30) (let ((b "g") (x 57) (f false)) 32)))) (> (* "h" "energy") (let ((c "c")) 30))) (>= -41 -42) (let ((a (fun3 (set! c "h") (let ((g true) (j "c")) "c") "c" (let ((g 58) (j -11)) "z") (>= 63 4) (if 27 "c" "z")))) (- (* -20 69) (let ((g false)) -27)))))))
(fun (main energy g y b) (if (<= energy 0) false (block (set! energy (- energy 1)) (let ((y (< (* (add1 -28) (* 55 "b")) (block (let ((e false)) "g"))))) "y"))))
(fun (fun1 energy x d y g) (if (<= energy 0) -30 (block (set! energy (- energy 1)) (set! g 79))))
(fun (fun2 energy) (if (<= energy 0) -53 (block (set! energy (- energy 1)) (fun1 energy -79 (let ((c (let ((a (isbool true)) (i "energy")) (- 41 "energy"))) (z (isnum false)) (a (let ((j (set! energy "z")) (d (set! z "j"))) (let ((c "z") (h true)) -81)))) (block (let ((a -21)) "z") (let ((a "z")) false) "c")) (set! energy (if (- 82 "energy") (block true 91 -68) (let ((x "energy") (a true)) "energy"))) (our_code_starts_here (- (- -15 61) (if "energy" "energy" "energy")) (let ((z (let ((i true) (z true) (b "i")) "z"))) (>= -5 "energy")) (block (set! energy true) (sub1 57)) (isnum true) (= (block "energy") (block false true 1 "energy" "energy")))))))
(fun (fun3 energy g b y h f) (if (<= energy 0) false (block (set! energy (- energy 1)) (fun9 energy "energy" (block (let ((e -29) (h (* 81 40)) (z (< "energy" 25))) (block -99)) (let ((f "g") (j 73)) (block "energy" -93 "j" "h" "h")) (block (if -50 -67 "g") (isnum "h") (= "f" "y") (set! energy -61) (block 73 -18 "energy")) (= (let ((e "energy") (a "g") (y true)) -78) (block "b" -82))) (let ((x (> (block "energy" -50) (+ "g" "energy"))) (d (let ((x 11) (b (block 14 "x" "energy")) (c (let ((i 39) (g true) (b true)) "y"))) (set! f true)))) (let ((i "d")) (block "g" 62 "energy")))))))
(fun (fun4 energy c i e) (if (<= energy 0) 20 (block (set! energy (- energy 1)) (set! energy (- (- (sub1 "energy") (sub1 -82)) (add1 (let ((x true) (d "e") (a true)) "energy")))))))
(fun (fun5 energy x y z e f j c b) (if (<= energy 0) -86 (block (set! energy (- energy 1)) (let ((d (block "c")) (y (block (+ (block 17 true "j") (set! d -1)) (let ((c (isbool true)) (b (block "c" "d" 59)) (i (* 65 "b"))) (block "c" "d" "i")) (isbool (> 23 -86)) (block (<= -23 "b") (set! d 20) (set! z "d") (let ((i "b") (x "energy")) true) (let ((e -23)) 48)) (let ((a false)) (fun7 "x" 15 "b" -67 "d")))) (c (add1 (block (let ((a "x") (h "y") (g true)) "j"))))) (add1 (let ((c (set! j "j"))) (let ((e false) (i 52) (h "d")) "j")))))))
(fun (fun6 energy g j c b h d) (if (<= energy 0) -24 (block (set! energy (- energy 1)) (fun6 energy (let ((e (fun3 (- 84 "h") (block "d" 41 86 37 "j") (let ((i "c")) false) (isbool "j") (<= "energy" 94) (block "j" "b" false false))) (j (isbool (set! c true))) (c (block (<= "d" "d") "j"))) (let ((a 38) (y (let ((j 26) (y true) (z 9)) "energy"))) (block true "j" "c" -100 true))) (block (let ((x (set! energy -14)) (j (block -46 true "energy"))) false) (let ((j (<= "c" 17)) (d (isnum "j"))) (let ((j "b")) "d")) (set! b (let ((x -26) (z "x")) true)) (- (block "c" "j" 22) (set! h "d"))) (< (* "h" (let ((a 59)) "g")) (let ((z (if true true "b")) (j (add1 "c"))) (- "energy" 51))) (let ((c (let ((c (set! j "j"))) (> "c" -15))) (g "d") (i (<= "energy" (block -13 "h" "b" 63 "c")))) (sub1 (+ "energy" -14))) (- (+ (block 74 80) (+ 42 -75)) (sub1 "h")) (set! energy "d")))))
(fun (fun7 energy c e i g) (if (<= energy 0) 16 (block (set! energy (- energy 1)) "g")))
(fun (fun8 energy e i z y d a c g) (if (<= energy 0) 43 (block (set! energy (- energy 1)) (if (if (let ((e 26) (y (block "energy"))) (block -18 "c" true "z")) (isbool (> -30 "e")) "g") (block (add1 (set! a -45)) (+ (add1 -63) (let ((a "c") (f -5)) -93))) (let ((a (let ((j (* 86 -97)) (d (set! j false))) (= 29 "j")))) (let ((a (let ((h "a") (y "a")) -62)) (g (set! i "c")) (y (let ((z 76) (j -98) (b "d")) "d"))) (let ((c true) (f true)) "e")))))))
(fun (fun9 energy e j z) (if (<= energy 0) false (block (set! energy (- energy 1)) false)))
(fun9 (let ((y (let ((a (<= (block (let ((e (block (fun7 59 -98 34 74 false))) (i (* (- "e" "e") (block true false true false -97)))) (* (let ((h "i") (x 17) (b "e")) "e") (fun6 "e" true "i" false "e" "e" -81)))) (let ((y (let ((b (let ((f (let ((b true)) "b")) (y (isnum input))) (let ((y 14) (b 84)) 21))) (d (- "b" (* "b" "b"))) (x (block (let ((y false) (e -52) (a false)) "e") (- 4 -68) (let ((c true) (j -55)) "c") (>= "d" 49)))) (let ((c (let ((loop_var_150 "b")) (loop (if (< loop_var_150 (+ "b" 150)) (block (set! loop_var_150 (+ loop_var_150 1)) (set! d 89) (set! b "b") "d" "b") (break "b"))))) (a (if false true true)) (y (block "d" "b" "a" "b" "x"))) (block false)))) (d (* -13 (block (>= -89 -90) (+ -41 -40) (let ((b "y") (g -92)) input) (let ((z -64) (j "y")) "z"))))) (- (add1 (- "d" -38)) (if (let ((i -72)) "i") (let ((g "y") (b "d") (z true)) "d") (set! y "d"))))))) (let ((d (add1 -8)) (j (fun2 (* (set! d (- "d" 10)) (let ((d (let ((c "d") (a "a") (h "d")) "c"))) "d")))) (i (let ((loop_var_89 (let ((x "d")) "d"))) (let ((loop_var_78 (let ((g "j") (c "j") (d -76)) "d"))) (loop (if (> loop_var_78 (- (let ((g "j") (c "j") (d -76)) "d") 78)) (block (set! loop_var_78 (- loop_var_78 1)) (isbool (let ((x false) (j "d")) true)) "j" (block (= "d" 73) (let ((x "d") (z -74)) "a") (+ "d" "d") (let ((d "d")) "j"))) (break (block (block "d" "loop_var_78" "j" 63 "a") (set! a true))))))))) (- (let ((loop_var_194 (block -69))) (loop (if (< loop_var_194 (+ (block -69) 194)) (block (set! loop_var_194 (+ loop_var_194 1))) (break (fun1 61 -54 29 -44 "d"))))) (let ((c (= (- -100 "d") (let ((b "d") (y 77) (x "b")) -29))) (e "a")) (- (let ((loop_var_13 "d")) (let ((loop_var_117 0)) (loop (if (< loop_var_117 (+ 0 117)) (block (set! loop_var_117 (+ loop_var_117 1))) (break "d"))))) (let ((d "d") (h false) (e "d")) "d"))))))) (d (set! y (let ((h (<= (- -40 (let ((h (let ((f "y")) false))) (+ -78 19))) (* "y" 30))) (f (+ (- (let ((loop_var_5 26)) (loop (if (> loop_var_5 (- 26 5)) (block (set! loop_var_5 (- loop_var_5 1)) (set! y -88)) (break "y")))) (- (if "y" 28 "y") (set! y -61))) (* (if (+ "y" "y") (set! h "y") (let ((loop_var_107 53)) (let ((loop_var_52 3)) (let ((loop_var_12 "y")) (loop (if (< loop_var_12 (+ "y" 12)) (block (set! loop_var_12 (+ loop_var_12 1)) (set! y "y") (set! y -28) (set! y "y")) (break 18))))))) (let ((j (isbool false))) (let ((loop_var_108 62)) (loop (if (< loop_var_108 (+ 62 108)) (block (set! loop_var_108 (+ loop_var_108 1)) "y" 36) (break 41)))))))) (z (block "f"))) (+ "y" (our_code_starts_here (let ((c (let ((loop_var_105 "f")) (let ((loop_var_197 "y")) (loop (if (< loop_var_197 (+ "y" 197)) (block (set! loop_var_197 (+ loop_var_197 1)) (set! z "y") (set! f 80) -4 "z" 47) (break 77)))))) (d (+ "c" -45))) (* 76 "f")) (let ((j (let ((loop_var_8 34)) (loop (if (< loop_var_8 (+ 34 8)) (block (set! loop_var_8 (+ loop_var_8 1)) "h") (break "h")))))) (let ((j "z") (c false) (f true)) false)) -87 (<= (let ((i "h") (j false)) "z") "z") (let ((loop_var_188 "z")) (let ((loop_var_123 -20)) (loop (if (< loop_var_123 (+ -20 123)) (block (set! loop_var_123 (+ loop_var_123 1)) (set! f "h") true "h" "h") (break true))))))))))) (block (<= (let ((d false) (f (> (let ((loop_var_38 -1)) (let ((loop_var_181 "y")) (loop (if (< loop_var_181 (+ "y" 181)) (block (set! loop_var_181 (+ loop_var_181 1)) (set! y -29)) (break -22))))) (+ (* "d" "y") (* -86 "y")))) (j (+ (* (* 8 "d") (block "f" 3)) (block (+ "y" "y"))))) (add1 (let ((loop_var_55 "j")) (loop (if (> loop_var_55 (- "j" 55)) (block (set! loop_var_55 (- loop_var_55 1)) 64) (break 13)))))) (let ((h (block (set! y (<= "y" -49)) (let ((i true)) "i") (block (add1 "d") (let ((loop_var_6 "y")) (loop (if (< loop_var_6 (+ "y" 6)) (block (set! loop_var_6 (+ loop_var_6 1)) (set! d 98) "y" -16 "d") (break "y")))) (isbool false)) false (block (block "d" true) true (+ "d" -85)))) (d (= (let ((e (<= -99 "d")) (c (let ((loop_var_65 "y")) (loop (if (< loop_var_65 (+ "y" 65)) (block (set! loop_var_65 (+ loop_var_65 1))) (break "e"))))) (g (let ((i false) (c "e") (j "h")) input))) (let ((loop_var_11 "d")) (loop (if (< loop_var_11 (+ "d" 11)) (block (set! loop_var_11 (+ loop_var_11 1))) (break -87))))) (set! h (let ((loop_var_98 "d")) (loop (if (< loop_var_98 (+ "d" 98)) (block (set! loop_var_98 (+ loop_var_98 1)) "h" "h") (break "loop_var_98")))))))) -71)) (block (isnum (isbool (<= -5 (+ "d" 63)))) (add1 "y") (block (block (block (block "d" -66 false)) (let ((loop_var_18 "y")) (let ((loop_var_140 "y")) (loop (if (> loop_var_140 (- "y" 140)) (block (set! loop_var_140 (- loop_var_140 1)) true true) (break true))))) -42) (* (* (* "y" 48) (block true 32 true "y" "y")) (let ((d (fun7 "y" -3 "y" -12 true)) (f (block true "d" true "y"))) (- "d" "y"))) (let ((loop_var_183 -36)) (loop (if (> loop_var_183 (- -36 183)) (block (set! loop_var_183 (- loop_var_183 1)) (isnum input) true (isnum true)) (break (let ((y false) (c "y")) "y"))))) (set! y (let ((b (let ((loop_var_101 "y")) (loop (if (> loop_var_101 (- "y" 101)) (block (set! loop_var_101 (- loop_var_101 1)) (set! y 37) (set! y "y") (set! d "d")) (break "d"))))) (h true)) (let ((c "y")) true)))) (let ((f (let ((g (isbool (block false true)))) (>= (+ "d" 25) (- "y" 24)))) (i (block (let ((loop_var_167 "d")) (let ((loop_var_195 "y")) (loop (if (< loop_var_195 (+ "y" 195)) (block (set! loop_var_195 (+ loop_var_195 1)) (set! y 78)) (break 42))))))) (h (let ((f (let ((e (let ((loop_var_68 -63)) (let ((loop_var_116 "y")) (loop (if (> loop_var_116 (- "y" 116)) (block (set! loop_var_116 (- loop_var_116 1)) (set! d "d") (set! f -52) 85 12 -66) (break "d")))))) (i (< "e" "d")) (z (let ((z false) (y "f") (j 91)) -14))) (* 52 -81))) (x (* (let ((y false)) 90) (block 11)))) (let ((g (set! x "f")) (f (block "f" 83 "i"))) (* 27 "d"))))) (let ((z (block "f" (<= "h" "i") (let ((e "d") (g "h") (i "f")) -95))) (g (isnum (let ((i "d") (x "f") (j true)) true)))) (let ((loop_var_77 "h")) (let ((loop_var_65 -41)) (loop (if (> loop_var_65 (- -41 65)) (block (set! loop_var_65 (- loop_var_65 1))) (break false))))))) (set! y (block (- (let ((loop_var_158 -69)) (loop (if (< loop_var_158 (+ -69 158)) (block (set! loop_var_158 (+ loop_var_158 1)) -88 27) (break -42)))) (let ((z true)) 65)) (block (+ "y" "d") false (+ 5 "d") (sub1 -93) true)))) (let ((loop_var_54 (if "y" "d" "y"))) (loop (if (< loop_var_54 (+ (if "y" "d" "y") 54)) (block (set! loop_var_54 (+ loop_var_54 1))) (break (- (sub1 (if 44 -54 "y")) (block (sub1 51) (block "d" "y" -17) (if -22 false true) -5)))))))) (let ((loop_var_178 (- -80 65))) (loop (if (> loop_var_178 (- (- -80 65) 178)) (block (set! loop_var_178 (- loop_var_178 1))) (break (set! loop_var_178 (+ (set! loop_var_178 (set! loop_var_178 (add1 -74))) (+ -58 (+ (block true "loop_var_178") "loop_var_178")))))))) (let ((a (block (add1 (block (block (block (let ((loop_var_148 67)) (let ((loop_var_161 -85)) (loop (if (< loop_var_161 (+ -85 161)) (block (set! loop_var_161 (+ loop_var_161 1))) (break -79))))) (fun3 -62 false false true false true)) (* (let ((g true) (f true) (z "f")) 51) (let ((g -36)) 8)) (let ((h (+ -87 -94))) (set! h 84)) (let ((j true) (d (block -71 -65 true false))) (let ((b 3) (h "b") (x "j")) "h"))) (<= (let ((z (block 47 -67 false)) (c (+ 0 87))) (block "c" -18)) (- (fun6 -51 false 40 false -46 -91 38) (- -73 -24))) (fun1 (+ (let ((j false) (c 10) (d 8)) "d") (let ((z false) (y 93)) "y")) (let ((b (let ((x 41)) "x")) (e (let ((loop_var_189 31)) (loop (if (> loop_var_189 (- 31 189)) (block (set! loop_var_189 (- loop_var_189 1))) (break false))))) (z (block "b" true true false))) (block input false true "b")) (block true (let ((b 42)) 21) (block false -43) (block false -25) -95) (if (block false false 33 -100 true) (let ((loop_var_18 -30)) (loop (if (> loop_var_18 (- -30 18)) (block (set! loop_var_18 (- loop_var_18 1))) (break "loop_var_18")))) -74) (let ((loop_var_184 67)) (let ((loop_var_113 -82)) (loop (if (< loop_var_113 (+ -82 113)) (block (set! loop_var_113 (+ loop_var_113 1)) 0 -54) (break -89)))))))) (- (let ((j (let ((j (* (+ -22 -93) (- 18 82))) (y (let ((c (* -75 "j"))) (let ((loop_var_54 "c")) (loop (if (> loop_var_54 (- "c" 54)) (block (set! loop_var_54 (- loop_var_54 1)) (set! c false) true) (break true))))))) (let ((e (let ((a "j") (i input)) "a")) (j (< "j" "j")) (f (let ((h "j") (y "h")) "e"))) (block "e" true "e" "y" "j")))) (d (<= (+ "j" (block 45 true "j" -44 "j")) -95))) -59) (* (+ (- (let ((d 74) (b false) (x "b")) "d") (let ((loop_var_177 -48)) (loop (if (< loop_var_177 (+ -48 177)) (block (set! loop_var_177 (+ loop_var_177 1))) (break "loop_var_177"))))) (block (block -59 input -83 55 -10) (* 56 -22) 65 (let ((loop_var_84 -79)) (loop (if (< loop_var_84 (+ -79 84)) (block (set! loop_var_84 (+ loop_var_84 1)) false) (break false)))) (- 25 41))) (* (* (sub1 79) (let ((b -90) (z true)) "b")) (let ((j -69)) (block false false "j" 87 18))))) 71 (block (let ((z (block (= (* 44 80) (let ((x false) (e 88)) "e")) (let ((loop_var_86 91)) (let ((loop_var_172 -95)) (let ((loop_var_141 25)) (loop (if (< loop_var_141 (+ 25 141)) (block (set! loop_var_141 (+ loop_var_141 1))) (break true)))))) (let ((g (let ((loop_var_163 -68)) (let ((loop_var_38 -100)) (let ((loop_var_137 -67)) (loop (if (> loop_var_137 (- -67 137)) (block (set! loop_var_137 (- loop_var_137 1)) -81 -9) (break 51)))))))) (block 63 true false)) (let ((e (block true)) (y (block -74))) "y"))) (g (let ((loop_var_174 (- "z" 53))) (loop (if (> loop_var_174 (- (- "z" 53) 174)) (block (set! loop_var_174 (- loop_var_174 1))) (break (+ "z" "loop_var_174"))))))) (set! g (set! z -53))) (let ((loop_var_191 (let ((x false) (y false) (g "x")) -49))) (let ((loop_var_51 (if true -56 -69))) (loop (if (> loop_var_51 (- (if true -56 -69) 51)) (block (set! loop_var_51 (- loop_var_51 1)) (sub1 (block 81 -62 false 80)) (- 47 (- 43 12))) (break -61))))) (if (sub1 (fun2 (let ((loop_var_89 27)) (let ((loop_var_158 -100)) (loop (if (< loop_var_158 (+ -100 158)) (block (set! loop_var_158 (+ loop_var_158 1)) -77) (break "loop_var_158"))))))) (>= (let ((c (isbool true)) (e (block "c")) (g (set! e 6))) (* 23 "g")) (block (let ((j -29)) "j") (let ((i true) (j false)) 39))) true) (let ((loop_var_143 (let ((c true)) 99))) (loop (if (< loop_var_143 (+ (let ((c true)) 99) 143)) (block (set! loop_var_143 (+ loop_var_143 1)) (<= (let ((j false)) 70) (fun5 -28 true false 5 true 58 false 33 -29)) (let ((y (add1 11))) (if "y" false true))) (break (block (= false false)))))) 54))) (z (* (block (let ((d (main (let ((b (+ 21 "a")) (a (block -51))) (sub1 -29)) (let ((a (let ((e "a")) false)) (g (block -100 false "a"))) (block "g" 38 true -80 "a")) (+ (let ((g "a")) 40) (block -30)) (let ((b (block true "a" 12 "a")) (c (block "b" "a" "b" true "b"))) (block true true true -8)))) (i true)) (block (let ((loop_var_19 77)) (let ((loop_var_110 "a")) (loop (if (< loop_var_110 (+ "a" 110)) (block (set! loop_var_110 (+ loop_var_110 1))) (break true))))) (block (block -67) (let ((c 40)) false) (set! a "i") (let ((g false) (x 3)) 41) (+ "d" 97)) (let ((loop_var_191 80)) (loop (if (> loop_var_191 (- 80 191)) (block (set! loop_var_191 (- loop_var_191 1))) (break "a")))))) (let ((i (let ((z (< (add1 94) (let ((loop_var_33 95)) (loop (if (< loop_var_33 (+ 95 33)) (block (set! loop_var_33 (+ loop_var_33 1)) (set! a "a")) (break "a")))))) (g (fun7 (block -54) (block "z" false -44) (let ((i "z") (b true) (a input)) "a") (block false "z" "a" -99 "a") (isbool "z"))) (b (* (- "a" "a") (let ((d "a")) "d")))) (set! g (let ((d "a") (c 20)) false)))) (c true)) (block (let ((f (if -42 "a" -31)) (i (+ 57 -8)) (a (block true -47 "i" 45 "i"))) (let ((loop_var_98 56)) (loop (if (> loop_var_98 (- 56 98)) (block (set! loop_var_98 (- loop_var_98 1)) 54 32 "a") (break 88))))) (sub1 (block "a" false true "a" "a")) (* (let ((loop_var_36 "a")) (loop (if (> loop_var_36 (- "a" 36)) (block (set! loop_var_36 (- loop_var_36 1)) (set! a -40) (set! a -83) (set! i "a") "a" "a") (break "loop_var_36")))) (set! a -47))))) (let ((y 91) (j (sub1 (let ((g (let ((loop_var_143 "a")) (loop (if (> loop_var_143 (- "a" 143)) (block (set! loop_var_143 (- loop_var_143 1))) (break "a")))))) (let ((loop_var_88 -62)) (loop (if (> loop_var_88 (- -62 88)) (block (set! loop_var_88 (- loop_var_88 1)) 69 "y" -46) (break -32)))))))) "j")))) (= (let ((y (- (sub1 (block (block true 1))) (sub1 (+ (sub1 "z") (* "z" 59)))))) (our_code_starts_here (let ((c (> -59 (let ((loop_var_68 0)) (loop (if (> loop_var_68 (- 0 68)) (block (set! loop_var_68 (- loop_var_68 1)) (set! y 50) (set! y -11) 55 -60 "y") (break "y"))))))) (* (- "z" "y") (* "y" "y"))) (block (sub1 (+ "z" "a")) (< 75 (sub1 "y"))) "a" false (let ((z (isbool (>= "z" 76))) (f (block (block -61 "z" -83) (sub1 -28) (- "y" -83))) (e (- (- "z" 2) (block true "a" "z" -81)))) (block (= "z" false) (isbool "z"))))) (let ((z (block (if (+ (+ "z" "z") (set! a "z")) (- (let ((z false)) "a") (sub1 "z")) (if (set! a "z") (sub1 -42) (let ((loop_var_200 "z")) (let ((loop_var_122 "a")) (loop (if (> loop_var_122 (- "a" 122)) (block (set! loop_var_122 (- loop_var_122 1)) (set! z "a") (set! z 34) (set! a -62) "a" "z" "a") (break 86))))))) (let ((loop_var_166 (- 92 90))) (loop (if (< loop_var_166 (+ (- 92 90) 166)) (block (set! loop_var_166 (+ loop_var_166 1))) (break (block true false "loop_var_166" false 36))))))) (f (block (< (block (- -46 48)) (+ 6 (sub1 -29)))))) (add1 (let ((a "z") (h (sub1 (+ -56 "a"))) (g true)) (let ((f (> "a" 15)) (c (+ -90 91))) (let ((x false) (a true)) "a"))))))) (- (block (our_code_starts_here (add1 8) (let ((c (if (block (= true false) (fun3 -41 true input false false false) (block -8 -4 44 57 true)) (let ((loop_var_81 -51)) (loop (if (> loop_var_81 (- -51 81)) (block (set! loop_var_81 (- loop_var_81 1)) -38) (break -61)))) (sub1 (* -96 2)))) (x (block (let ((c (block "c" 33 "c" -96 false)) (y (- "c" "c")) (h "c")) (let ((loop_var_47 "c")) (let ((loop_var_3 "c")) (loop (if (< loop_var_3 (+ "c" 3)) (block (set! loop_var_3 (+ loop_var_3 1)) (set! c "y") 48) (break "loop_var_3")))))) (block true) (block (let ((y false) (z true)) "c") (if "c" "c" "c") (let ((d "c")) "d") (<= "c" -87)))) (z (> (+ (- "c" "c") (add1 "c")) "c"))) (= (let ((h (let ((loop_var_69 -25)) (let ((loop_var_185 52)) (loop (if (< loop_var_185 (+ 52 185)) (block (set! loop_var_185 (+ loop_var_185 1)) (set! c 57) (set! x -28)) (break "loop_var_185")))))) (x (block 78))) (block 87)) (let ((a (isnum "x")) (j "c") (i (block true "c" "j" false 47))) (add1 "j")))) -86 (< (block (let ((i (fun3 -99 true true true true false)) (g (>= -99 -63))) (block 94 -73))) (+ -57 (fun1 (block false -34 23) (- 61 82) (sub1 -35) (let ((d -82) (c "d")) 17) (* -91 47)))) (>= (let ((loop_var_95 (* -23 -20))) (loop (if (> loop_var_95 (- (* -23 -20) 95)) (block (set! loop_var_95 (- loop_var_95 1)) (let ((f 86) (j false)) "f") (- 81 -82)) (break (block "loop_var_95" -68))))) (- (let ((h (add1 19)) (j "h")) (let ((g -35) (z -85)) -88)) (let ((i (let ((h 29) (a -20) (y true)) "h")) (a (* 98 "i"))) (* "i" "i"))))) (sub1 (sub1 (let ((j (+ (+ -12 -55) (* -84 -81)))) (+ (- -97 "j") (* 45 "j"))))) (block (block (let ((a -2) (x (let ((z (= false false)) (y (let ((b "a")) input)) (j (let ((i "a") (b "y") (e "i")) "i"))) (let ((y 49)) 86))) (j (let ((x (let ((h "x") (e true)) 6))) (= "a" "x")))) (sub1 (our_code_starts_here "x" false "x" "j" false))) (< (let ((loop_var_18 -74)) (loop (if (< loop_var_18 (+ -74 18)) (block (set! loop_var_18 (+ loop_var_18 1)) 25) (break "loop_var_18")))) (* (fun8 -83 11 -76 -31 false 4 true true 53) (let ((g 7) (c 63)) -3)))) (+ (let ((f (= (* 4 -74) (* -39 -2))) (j (let ((loop_var_44 95)) (loop (if (> loop_var_44 (- 95 44)) (block (set! loop_var_44 (- loop_var_44 1)) (set! f "f") false) (break true)))))) (add1 (block -66))) (block (- (add1 91) (+ -83 89)) (let ((i (if -85 true true))) (let ((h "i")) false)) (if true (+ -5 98) (+ 80 -87))))) (block (block (let ((c (block (<= -2 35)))) (+ (let ((loop_var_29 5)) (loop (if (> loop_var_29 (- 5 29)) (block (set! loop_var_29 (- loop_var_29 1))) (break "loop_var_29")))) (let ((d input) (e false) (j 58)) "j")))) (let ((c (let ((y (>= (let ((x 56) (b true)) "x") (block false -23 -2))) (g (<= (block 91 -56 39) (block -96 25 -13)))) (block false (block 90 62 false -68 "g") (= 30 -69) (let ((d -12) (c true)) "c")))) (d (>= (let ((x (block false "c" "c" true -11)) (j "c")) 54) (set! c (add1 98))))) (set! c (let ((f (block -47 69 59 false true)) (h (if -31 79 -78)) (b (+ "h" -18))) (let ((j 100) (f "h")) 17)))) true (let ((loop_var_42 (let ((f true)) -100))) (loop (if (> loop_var_42 (- (let ((f true)) -100) 42)) (block (set! loop_var_42 (- loop_var_42 1)) -25 (let ((h (block -71 false true false -12)) (x (let ((h true) (g false) (c false)) "c"))) (- -61 "h")) (* (block 53) 63)) (break (block (let ((f "loop_var_42") (y -67) (x false)) false) "loop_var_42"))))))) (sub1 (block (let ((a (block (let ((loop_var_163 -79)) (let ((loop_var_155 73)) (loop (if (> loop_var_155 (- 73 155)) (block (set! loop_var_155 (- loop_var_155 1)) -64 -24) (break -40))))))) (b (isnum (let ((d (let ((y 26) (b 67) (d false)) -44)) (b (block false "d" true -37 "d")) (f false)) (let ((g -11) (f "a")) "f"))))) (block (isnum (fun9 "a" -20 "b" "a")) 28)) (let ((y (block (let ((j (+ -53 72)) (b (let ((d false)) "d"))) (< 52 "j")) (isbool false)))) (let ((b (if (let ((x -76) (g false) (i true)) -45) (* -46 44) (add1 -13))) (y (let ((h (let ((h "b") (g "y")) "h")) (j (fun9 91 -78 true "h"))) (< 91 "b")))) (+ (set! y "b") (* "b" "b"))))))))