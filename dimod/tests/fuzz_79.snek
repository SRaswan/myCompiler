(fun (our_code_starts_here energy f c a j h e g) (if (<= energy 0) 22 (block (set! energy (- energy 1)) "energy")))
(fun (main energy) (if (<= energy 0) false (block (set! energy (- energy 1)) (set! energy (set! energy (set! energy (let ((e false)) "e")))))))
(fun (fun1 energy z a f) (if (<= energy 0) true (block (set! energy (- energy 1)) false)))
(fun (fun2 energy a) (if (<= energy 0) -40 (block (set! energy (- energy 1)) (- (block (* (let ((d -63)) "d") (if "energy" "a" "energy")) (if (block -82 "energy" false) (block 5 "energy" true 68 false) (fun1 "energy" true "a" "a")) (let ((x (block "a" true "energy")) (a (sub1 "x"))) (fun1 65 false 50 -62)) (block (= false false) (block true 76 true) 77) (let ((y (- -51 "energy"))) (let ((e true)) "energy"))) (block (block (if false -75 "energy") (if true true false) (our_code_starts_here "a" 88 "energy" -13 63 true -46 "a")))))))
(fun (fun3 energy g z i) (if (<= energy 0) true (block (set! energy (- energy 1)) false)))
(fun (fun4 energy j z h i e c b a) (if (<= energy 0) true (block (set! energy (- energy 1)) (>= (block (+ (block "z" "e" -66) (* "c" 20)) (let ((f (* 93 99)) (i (block -80 "j"))) (block "j" "h" false)) (let ((j (set! a -31)) (g (block "c" "e" -79)) (b (>= 81 -31))) (let ((b true) (z false) (h "c")) "z"))) (let ((g 40) (x (block (> "z" -25) (* -9 "j") (+ -52 "z") "z")) (a 31)) (let ((a (+ "x" 25)) (c (+ "j" "a")) (d false)) (let ((b "j")) -59)))))))
(fun (fun5 energy h b x g y) (if (<= energy 0) 45 (block (set! energy (- energy 1)) (fun5 energy (let ((y (isbool (>= -88 -70))) (x (block (* "h" "h") (set! energy "b") (block "g" "x" "y")))) (let ((x (let ((i "y")) false)) (c (let ((e "h") (i "x") (j "x")) true)) (z (block "x" -47))) (block "c" "b"))) (< -17 (* (let ((y true) (c "h") (h "h")) 41) (let ((g true) (c "b") (y -12)) 16))) (+ (add1 (block "g" -69 83 false -65)) (- 36 (sub1 "energy"))) (let ((h (block (add1 23) (block "x" false 100) (* "h" "h") (set! b "energy"))) (x (block (block 35) (<= -65 85) (let ((y "h")) "y") (* "b" "h") (if false "b" "h")))) (block (< -79 "x"))) (<= (let ((g (let ((d "b") (f "x")) true))) (let ((b 86) (a false) (z true)) "g")) (let ((a (* 15 85)) (d (+ -16 70)) (j (- 41 -84))) (let ((b "y") (i "x") (y 40)) -89)))))))
(if (+ -5 (let ((f 66) (j false) (x (set! f (- (block (isnum (block "j" input true "j" "j")) (let ((j (+ "f" -41)) (z (let ((c "j")) false))) (sub1 31))) (let ((loop_var_136 (block "j" "f" "j" "f" 27))) (loop (if (> loop_var_136 (- (block "j" "f" "j" "f" 27) 136)) (block (set! loop_var_136 (- loop_var_136 1)) (set! j 4)) (break (let ((f "j") (y 60)) 92))))))))) (* (block (if (> (block "j" "x" true false 83) (let ((loop_var_93 "f")) (let ((loop_var_73 "x")) (loop (if (< loop_var_73 (+ "x" 73)) (block (set! loop_var_73 (+ loop_var_73 1)) (set! j -87)) (break "f")))))) (block (set! x "x") "f" (block true -84) (block "x" true true) (= "f" -77)) (< (* -19 "x") (let ((loop_var_160 "x")) (loop (if (> loop_var_160 (- "x" 160)) (block (set! loop_var_160 (- loop_var_160 1)) (set! j "x") (set! j "f") (set! f "f") 69) (break -45)))))) (add1 (- (+ -51 "f") (set! f "x"))) (let ((j (<= (* 5 "f") (let ((a "j") (i "x") (h "f")) -18)))) (let ((loop_var_91 "x")) (loop (if (< loop_var_91 (+ "x" 91)) (block (set! loop_var_91 (+ loop_var_91 1))) (break -22)))))) (let ((loop_var_160 (if 21 -15 "f"))) (loop (if (> loop_var_160 (- (if 21 -15 "f") 160)) (block (set! loop_var_160 (- loop_var_160 1))) (break (our_code_starts_here (let ((z "j") (i false) (d true)) 18) (let ((i "j")) "x") (- 92 "x") (block -30 false -63 "loop_var_160" "x") (let ((x false)) "loop_var_160") (isnum "j") (let ((e -27) (i 63) (y -39)) "e") (add1 -96))))))))) (let ((x (let ((e (* 22 (* 17 -59)))) (let ((f (+ (+ (let ((loop_var_93 -84)) (let ((loop_var_117 43)) (loop (if (> loop_var_117 (- 43 117)) (block (set! loop_var_117 (- loop_var_117 1)) (set! e "e") (set! e 55) (set! e "e")) (break "e"))))) -41) (- "e" (sub1 (let ((i -18)) -93))))) (j (let ((loop_var_91 -35)) (let ((loop_var_199 (sub1 "f"))) (loop (if (> loop_var_199 (- (sub1 "f") 199)) (block (set! loop_var_199 (- loop_var_199 1)) (set! e (let ((x (block false true)) (a (let ((g -27) (e true)) "g"))) (sub1 "e"))) (set! f (* (add1 "e") (let ((c true) (b false) (g false)) 78))) (- (- 90 "e") (+ 5 -37)) (let ((c (> "e" 67)) (g (block "f" -34 79 false -50)) (a (isnum true))) (let ((e "c")) "e")) (* (set! e -11) (block input 39 true true "e"))) (break (block (main "e") (set! e false) (+ "loop_var_199" 26))))))))) (let ((loop_var_71 "j")) (loop (if (> loop_var_71 (- "j" 71)) (block (set! loop_var_71 (- loop_var_71 1)) (set! e (= (<= "e" "f") (< "j" -4))) (set! f (block (if 52 -47 2) (block -82 "f" 49) -32 (+ 100 "e") (let ((c 98)) true))) (set! e (>= (add1 -17) (add1 -60))) (let ((x (* 65 20))) (let ((a input) (h "a")) false)) (isnum false)) (break (set! e (isbool false)))))))))) (let ((y "x") (b (sub1 (* (block (block (isbool "x") (let ((loop_var_75 55)) (let ((loop_var_8 -15)) (let ((loop_var_179 44)) (loop (if (> loop_var_179 (- 44 179)) (block (set! loop_var_179 (- loop_var_179 1)) (set! y 94) (set! y 67) (set! x -77) -28) (break "loop_var_179")))))) -95 (* -58 23) (set! x 83))) (block (<= (set! x -97) (if true 63 -19)) (let ((h (< -85 -48))) (sub1 -52))))))) (let ((x (+ (block (let ((f (isnum "y")) (i (= "b" 89))) (> "b" "b")) (let ((y (block 4 58 8)) (z (let ((c "x") (x "b") (e "b")) "c"))) (sub1 19))) (block (+ (block "x" input -26 "b" "b") "b")))) (a (block (+ (+ (+ 20 "x") 33) 41) (block 83 "x" (- (let ((loop_var_138 "x")) (loop (if (< loop_var_138 (+ "x" 138)) (block (set! loop_var_138 (+ loop_var_138 1)) (set! b -65) (set! y 13) "x" "b" 50) (break 7)))) (sub1 "x")))))) 86))) (if (+ (let ((c (> (let ((b (fun2 (* -48 58) 66))) (let ((loop_var_76 100)) (let ((loop_var_32 "b")) (loop (if (< loop_var_32 (+ "b" 32)) (block (set! loop_var_32 (+ loop_var_32 1)) "b") (break "loop_var_32")))))) (fun2 (* (block 31 -45 false 1) (fun2 -84 27)) 83))) (b (sub1 (let ((a (let ((i (let ((loop_var_92 39)) (let ((loop_var_49 -77)) (loop (if (< loop_var_49 (+ -77 49)) (block (set! loop_var_49 (+ loop_var_49 1)) (set! c true) (set! c false) (set! c "c")) (break true))))))) (let ((f "c")) -99))) (d "c")) (- (* -21 -15) (block "d" "a")))))) (let ((b (let ((e (> (let ((c "b")) 86) (+ "b" "b"))) (h (- (let ((e "e")) 97) (let ((h "b")) 21)))) "e")) (j (let ((c (* (- 70 "b") (block 1 56 15)))) (block (let ((y "c") (c "c") (g "c")) -75) (let ((h -15) (y "b") (a "b")) false) (let ((b false)) "c") "b")))) (block (block (let ((d false) (z "b")) "b") (if 99 "b" false)) (set! j (let ((loop_var_80 -84)) (loop (if (> loop_var_80 (- -84 80)) (block (set! loop_var_80 (- loop_var_80 1)) (set! j "b") (set! j "c")) (break "b"))))) (let ((loop_var_158 "b")) (loop (if (< loop_var_158 (+ "b" 158)) (block (set! loop_var_158 (+ loop_var_158 1)) (set! b "j")) (break -80)))) (block (let ((loop_var_167 "b")) (loop (if (> loop_var_167 (- "b" 167)) (block (set! loop_var_167 (- loop_var_167 1)) (set! b 12) (set! j 45) (set! j -75)) (break -91)))) (block 69 false "b" "j" true) (fun3 "j" 65 -72 -17) (* -15 -76)) (* (set! b "b") (block "b"))))) (let ((b (block true (+ (* (- -28 -100) (add1 -72)) (- (block false -86 true -68) (- 45 -33))) (- (add1 (let ((d true) (z -85)) -33)) (block (let ((loop_var_162 3)) (let ((loop_var_63 50)) (let ((loop_var_4 58)) (loop (if (> loop_var_4 (- 58 4)) (block (set! loop_var_4 (- loop_var_4 1))) (break false)))))) (isnum true) (sub1 -18) (add1 76))))) (z (block (+ (block (+ "b" -43)) (block (let ((f "b")) 77) -63 (let ((z "b") (i "z") (c -30)) -19) (let ((loop_var_110 -1)) (loop (if (> loop_var_110 (- -1 110)) (block (set! loop_var_110 (- loop_var_110 1)) (set! b "b") (set! b 8)) (break "b")))))) (let ((f (let ((b (block 55)) (e (< "b" -85)) (h (add1 "b"))) (block "e" "e" "e" 70 5))) (a (block (block true false true 36 88) (block true false) (= "b" "f") (= "b" "b") "b"))) (+ (let ((c true) (j -40) (a "b")) "f") (block false "a"))) true (isbool (let ((i (let ((loop_var_86 "b")) (loop (if (< loop_var_86 (+ "b" 86)) (block (set! loop_var_86 (+ loop_var_86 1)) (set! b false) (set! b true)) (break true))))) (y (+ 35 "b")) (f "y")) (let ((loop_var_145 3)) (let ((loop_var_75 -27)) (loop (if (< loop_var_75 (+ -27 75)) (block (set! loop_var_75 (+ loop_var_75 1)) (set! i "i") (set! b "i") (set! i false) "i" "i") (break input))))))) "b"))) (let ((h (= (let ((loop_var_69 86)) (loop (if (< loop_var_69 (+ 86 69)) (block (set! loop_var_69 (+ loop_var_69 1)) (set! z "b") "b" "b") (break "b")))) (block (sub1 "b")))) (z (block (block false) (= (let ((g true) (b "h")) "b") (isbool input)))) (b (block (= (* "b" "z") 12) (= (block true -83 false) "h")))) (- (let ((h (= false "b")) (z 73)) (block false "b")) (+ (set! h "b") (let ((i false) (b 63) (f true)) "b")))))) false (block (block (- (our_code_starts_here (let ((j (- 90 -57)) (b (< -72 "j"))) (our_code_starts_here "j" 22 "j" "j" "j" true 16 37)) (* (block -90 59 false -51) (* 75 75)) (let ((loop_var_58 -64)) (let ((loop_var_155 34)) (loop (if (> loop_var_155 (- 34 155)) (block (set! loop_var_155 (- loop_var_155 1)) -51) (break -93))))) (* (fun5 75 -64 false -30 false false) (let ((i true)) 54)) (* (our_code_starts_here 21 -79 -77 73 -82 false -85 69) (let ((i 25)) -94)) (isnum (let ((e -17)) false)) (let ((c (let ((z -75) (f true)) "f")) (x (= 22 54)) (b (add1 9))) (* 24 "b")) (let ((i -47)) (let ((g -31)) "g"))) (let ((x (let ((y (fun2 80 91)) (j (- -37 44))) (+ "j" 6)))) (* "x" (sub1 99)))) (our_code_starts_here (let ((g (> (let ((a false)) -9) (- -37 -44))) (y false) (a true)) (+ (let ((a 75)) -42) (let ((i "a") (a 30)) -98))) (fun2 (- (sub1 21) (block false -73 -16)) (sub1 (let ((c true) (g "c") (z -81)) "z"))) (if (block (block true false false false) (< 34 52) (let ((d true)) "d")) (let ((x (let ((loop_var_9 -45)) (loop (if (< loop_var_9 (+ -45 9)) (block (set! loop_var_9 (+ loop_var_9 1)) false true) (break true))))) (y "x")) (let ((loop_var_161 39)) (loop (if (> loop_var_161 (- 39 161)) (block (set! loop_var_161 (- loop_var_161 1)) (set! y -63) (set! y -29)) (break -46))))) (* (let ((f -6) (d -62)) "f") (our_code_starts_here -87 -40 -68 51 -48 false 16 70))) (let ((loop_var_160 (if 98 47 -11))) (loop (if (> loop_var_160 (- (if 98 47 -11) 160)) (block (set! loop_var_160 (- loop_var_160 1)) (block false true -9) (+ 99 47)) (break (block 78))))) (+ (add1 33) (block (let ((loop_var_148 -3)) (let ((loop_var_177 -32)) (loop (if (< loop_var_177 (+ -32 177)) (block (set! loop_var_177 (+ loop_var_177 1)) -72 51 97) (break 18))))) (let ((x -75) (y "x")) -15) (let ((i 28) (y true)) "i"))) (let ((x (let ((loop_var_122 82)) (loop (if (< loop_var_122 (+ 82 122)) (block (set! loop_var_122 (+ loop_var_122 1))) (break 28)))))) (let ((j (- 88 "x")) (h (let ((loop_var_68 58)) (loop (if (> loop_var_68 (- 58 68)) (block (set! loop_var_68 (- loop_var_68 1)) input) (break true)))))) (> "x" "j"))) (let ((i (block (sub1 -85) (let ((loop_var_72 -36)) (loop (if (< loop_var_72 (+ -36 72)) (block (set! loop_var_72 (+ loop_var_72 1))) (break true)))) (block true -3) (main 93))) (y (set! i (block -4 -23 29)))) (- (let ((e 98)) -8) (let ((loop_var_148 "y")) (loop (if (> loop_var_148 (- "y" 148)) (block (set! loop_var_148 (- loop_var_148 1))) (break "y")))))) (let ((d (let ((j 52) (a (set! j 51))) (set! a 82))) (b (let ((loop_var_165 32)) (let ((loop_var_143 -20)) (loop (if (> loop_var_143 (- -20 143)) (block (set! loop_var_143 (- loop_var_143 1)) (set! d "d") 25) (break 57))))))) (sub1 (add1 -80)))) (let ((j (+ (let ((x (<= 27 -10))) (block "x" -26 78)) (let ((x (let ((g true)) 44)) (y (- "x" "x")) (d (let ((loop_var_52 "y")) (loop (if (< loop_var_52 (+ "y" 52)) (block (set! loop_var_52 (+ loop_var_52 1)) (set! x "x") (set! y "y") (set! x "x")) (break 6)))))) (let ((c true)) "y"))))) (let ((loop_var_8 (block false true false true "j"))) (loop (if (< loop_var_8 (+ (block false true false true "j") 8)) (block (set! loop_var_8 (+ loop_var_8 1)) (set! j (block -33 true)) (set! j (isnum true)) (set! j (> 10 "j"))) (break (isbool false)))))) false) (+ (let ((loop_var_80 (let ((z 5)) "z"))) (loop (if (> loop_var_80 (- (let ((z 5)) "z") 80)) (block (set! loop_var_80 (- loop_var_80 1)) 52) (break (sub1 (block "loop_var_80" -49 45 false -93)))))) (* -36 -47)) (isnum false) (- 8 (block (let ((loop_var_18 (block false -60))) (loop (if (< loop_var_18 (+ (block false -60) 18)) (block (set! loop_var_18 (+ loop_var_18 1))) (break (let ((f "loop_var_18") (d true)) "d"))))) (>= (* (sub1 70) (sub1 -59)) (* (let ((x false)) -53) (* -90 -44))) (let ((b input) (z (isnum "b")) (c (= (+ -21 32) 10))) -51) (+ (fun2 (block false 67 -78) (let ((loop_var_94 55)) (loop (if (> loop_var_94 (- 55 94)) (block (set! loop_var_94 (- loop_var_94 1)) 1) (break "loop_var_94"))))) 7) (+ (+ (let ((g false)) 81) (let ((f 43) (x "f")) "x")) (let ((x (let ((loop_var_137 5)) (let ((loop_var_59 -47)) (let ((loop_var_143 44)) (loop (if (< loop_var_143 (+ 44 143)) (block (set! loop_var_143 (+ loop_var_143 1)) 4) (break "loop_var_143")))))))) (block true "x"))))) (let ((a (let ((i (let ((loop_var_92 (block -57))) (loop (if (> loop_var_92 (- (block -57) 92)) (block (set! loop_var_92 (- loop_var_92 1))) (break (let ((a false)) "a"))))))) (let ((f (sub1 (set! i -80)))) (<= (let ((f -98)) -65) (block true "i" "f"))))) (g (block (block (block (let ((c "a") (z false) (i false)) -84)) (set! a 33) (let ((f (let ((h -64) (e false) (a true)) "h")) (d (let ((loop_var_146 "f")) (loop (if (> loop_var_146 (- "f" 146)) (block (set! loop_var_146 (- loop_var_146 1)) true "a" "a") (break false)))))) (+ -10 90)) (= (= -1 60) (if 10 "a" false)) (let ((b (let ((c -33)) "c")) (i (+ "b" -31))) (let ((e true)) -66))) (let ((y (let ((loop_var_4 35)) (loop (if (> loop_var_4 (- 35 4)) (block (set! loop_var_4 (- loop_var_4 1)) -21 -62 -73) (break "loop_var_4")))))) (add1 (add1 -31)))))) (let ((b (let ((g (* (let ((a 68) (y "a")) 3) (* 29 43)))) (let ((f (- "g" -33))) (>= "f" "f")))) (d (add1 (sub1 (- "g" "g")))) (g (block (let ((loop_var_75 "g")) (let ((loop_var_121 "d")) (loop (if (< loop_var_121 (+ "d" 121)) (block (set! loop_var_121 (+ loop_var_121 1)) (set! d 17) (set! a 12)) (break "g"))))) (+ (set! a "d") (set! b 13)) (> (* -10 -3) (let ((z -48) (e "b")) "d"))))) (block (isbool true)))))))