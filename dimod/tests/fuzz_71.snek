(fun (our_code_starts_here energy y a c d e z x) (if (<= energy 0) 98 (block (set! energy (- energy 1)) (block (fun4 (- (let ((y "a")) "y") (let ((e 2)) -58))) (block (isnum true) (set! d true) (sub1 "a"))))))
(fun (main energy) (if (<= energy 0) true (block (set! energy (- energy 1)) (set! energy (<= (block (+ -17 66) (set! energy false) (fun4 98) (+ "energy" -70)) 2)))))
(fun (fun1 energy i j x) (if (<= energy 0) true (block (set! energy (- energy 1)) (fun1 energy (let ((c (let ((j "x") (i (let ((c "x") (x "j")) "i")) (z (sub1 "energy"))) (isnum "j"))) (d (let ((f (main 77)) (d (isbool true))) (let ((c "c") (a -6) (h -53)) "j"))) (b "c")) (set! d (* -86 "j"))) (> (set! j (add1 -66)) (if (let ((y false)) "x") (set! x "j") (block true -14 "x" "x" -87))) (isnum "x")))))
(fun (fun2 energy y e z a d h) (if (<= energy 0) 33 (block (set! energy (- energy 1)) (set! h (* (fun3 (block "h" "z") (let ((f 3) (g true) (e "a")) false) "d" (let ((g -5) (z true)) "y") (if false 41 73) (> "y" "z")) (block (let ((b "h") (e false)) "a") (fun5 -5 -48 100 true "e" "a" -97 28) false (let ((b "e") (j true)) "energy") (add1 "y")))))))
(fun (fun3 energy i g z b a) (if (<= energy 0) -41 (block (set! energy (- energy 1)) (let ((c (let ((g (> (block "a" "g" "g" true "z") (fun4 46))) (d (+ (set! i "energy") (block 80 "a"))) (c (let ((y (block "g" "g" "d" "b")) (c (block "b" false 43 84)) (h true)) (set! d 81)))) (isbool (isnum "g")))) (b (+ (let ((g (let ((b -32) (i -28)) false)) (x (block "z" 50))) (fun2 99 false "energy" "g" -34 true true)) (- (let ((c true) (y "g")) "z") (let ((y "c") (h -58)) "h")))) (d (isbool (>= (block false 6 "g" -6 "a") (block 16 "i"))))) (block (+ (sub1 "b") (+ -91 -60)) (let ((g (let ((c "c") (b "z")) "z")) (i (set! z true)) (z (> "b" 36))) (set! g "g")) (let ((y (set! b false)) (z (if false "c" true)) (i (if true false false))) (block "i")) (set! b (add1 "z")) (* (block "b" "b" 32) (block -32 83 "d" "i" "i")))))))
(fun (fun4 energy) (if (<= energy 0) 55 (block (set! energy (- energy 1)) (set! energy (sub1 (let ((j (let ((x "energy")) true)) (f -32) (e (block "j" "j"))) (fun4 "energy")))))))
(fun (fun5 energy a i z j y g h) (if (<= energy 0) false (block (set! energy (- energy 1)) (set! energy (block (* (sub1 90) (- "h" "a")) (isbool (> "h" 32)) (fun1 (- 91 "h") (set! y -43) (main -35) (let ((j false)) "j")) (sub1 (* "energy" 5)) (let ((g (block "y" "g" 57))) (>= "h" 83)))))))
(* (let ((c (- (- (- (sub1 (let ((loop_var_76 -53)) (let ((loop_var_15 -77)) (loop (if (< loop_var_15 (+ -77 15)) (block (set! loop_var_15 (+ loop_var_15 1))) (break "loop_var_15")))))) (let ((loop_var_125 (fun4 76))) (let ((loop_var_31 (if false -78 -15))) (loop (if (> loop_var_31 (- (if false -78 -15) 31)) (block (set! loop_var_31 (- loop_var_31 1)) (block 57 false 28) (let ((y true) (d false)) 16)) (break (block 33))))))) (let ((y (let ((d (let ((b (isnum false)) (h (block 29))) (isbool true))) (z (let ((g (block 99 true -25 "d" false)) (x (let ((x true)) true)) (d (block 15 -34 -11 -45 "d"))) (let ((loop_var_25 70)) (loop (if (> loop_var_25 (- 70 25)) (block (set! loop_var_25 (- loop_var_25 1)) (set! g "d") (set! x "g")) (break false))))))) (let ((x (let ((j true) (c false) (a false)) "d")) (f (block -62 80 -74 true -90))) (let ((e true) (c "f") (g -64)) "f")))) (d (let ((loop_var_65 (- 61 "y"))) (let ((loop_var_127 (block 76 20))) (loop (if (> loop_var_127 (- (block 76 20) 127)) (block (set! loop_var_127 (- loop_var_127 1)) (set! y (set! y true))) (break (<= 95 82)))))))) (let ((h (block (let ((a false)) true) "y" (let ((loop_var_22 "y")) (loop (if (< loop_var_22 (+ "y" 22)) (block (set! loop_var_22 (+ loop_var_22 1)) (set! d false)) (break "d")))) (block "y" "d" "d" "d") "y")) (b (= (sub1 "h") (block "h")))) (let ((z (sub1 81)) (h (block input "b" 14 "h" "z"))) (let ((a -13)) "h"))))) (block true (let ((e -14) (x (let ((c (let ((f (block "e" -99 "e" 66 false)) (x (let ((a true) (e true)) false)) (g (* -49 "e"))) (let ((d "g") (j "e") (b true)) -56))) (x false) (h (fun2 (let ((d "e")) 98) (= input false) (+ -61 "e") (set! c "x") (let ((a true) (i false)) "c") (block 18 -94 false) (let ((loop_var_165 47)) (loop (if (> loop_var_165 (- 47 165)) (block (set! loop_var_165 (- loop_var_165 1))) (break "x"))))))) (add1 (set! h 15)))) (i (> (let ((j (let ((e false)) "e")) (b (let ((loop_var_50 "e")) (loop (if (< loop_var_50 (+ "e" 50)) (block (set! loop_var_50 (+ loop_var_50 1))) (break true))))) (a (block "e" true))) (add1 "e")) (block (block false 58 false -3) (let ((i "e") (z true) (c true)) false) (add1 "e"))))) (block (< (let ((loop_var_183 -68)) (let ((loop_var_184 "x")) (loop (if (< loop_var_184 (+ "x" 184)) (block (set! loop_var_184 (+ loop_var_184 1))) (break "loop_var_184"))))) (let ((loop_var_145 "e")) (let ((loop_var_37 "e")) (loop (if (> loop_var_37 (- "e" 37)) (block (set! loop_var_37 (- loop_var_37 1))) (break 50)))))) (block -37 (= true "i")) -92))))) (x (* (let ((loop_var_41 (let ((e -58) (c true) (j "e")) -31))) (loop (if (< loop_var_41 (+ (let ((e -58) (c true) (j "e")) -31) 41)) (block (set! loop_var_41 (+ loop_var_41 1)) (set! c (sub1 (block (let ((a 64)) "a") (if true "c" "c") (let ((j "c")) "j")))) (set! c (block (set! c (block true 27 23 true true)) (fun1 (let ((i true) (d "i") (z true)) 30) (let ((e false) (i 67)) -90) (set! c false) (set! c false)) (block (let ((c 27)) true) (isnum true) (block "c") (block "c" false false)) (+ -17 (+ -55 "c")))) (set! c 69)) (break (block (> (set! loop_var_41 83) (set! c "loop_var_41")) (let ((f (let ((d 69) (f 98) (c false)) 68))) (>= "c" 92)) (let ((d (let ((x true) (e "c")) -50))) (set! loop_var_41 false)) (isbool (set! c false)) (let ((h (= false true))) (let ((h "h") (d false)) "c"))))))) (block (= (let ((x (* (add1 "c") (block "c" "c")))) (let ((i (let ((i 67) (d -1)) false))) (* 39 -75))) (- (let ((loop_var_118 "c")) (loop (if (< loop_var_118 (+ "c" 118)) (block (set! loop_var_118 (+ loop_var_118 1))) (break "c")))) (block (block false) (let ((y 10) (d -16) (i "y")) "i")))) (let ((e (isbool (isnum (<= -61 1)))) (f (let ((a "c") (i (= (block "e" "a" -17 true) (= "a" "c"))) (x false)) (<= (set! e "a") 45))) (g (block (* "c" (let ((loop_var_137 -29)) (loop (if (> loop_var_137 (- -29 137)) (block (set! loop_var_137 (- loop_var_137 1)) (set! e "c") "c" -40) (break "loop_var_137")))))))) (let ((x (block (* "g" -82)))) (+ (- 97 50) (let ((e "e") (g "e") (x "g")) -11))))))) (i (let ((j (sub1 (- (let ((loop_var_66 (let ((c false) (e true)) -40))) (loop (if (< loop_var_66 (+ (let ((c false) (e true)) -40) 66)) (block (set! loop_var_66 (+ loop_var_66 1))) (break (set! loop_var_66 67))))) (sub1 (if (let ((y "x") (d "x") (j "y")) "x") (let ((i "x") (g "i") (c true)) "i") (* 3 23)))))) (c (let ((c (let ((c (let ((loop_var_130 (our_code_starts_here "x" "c" "j" false -30 false true "c"))) (loop (if (> loop_var_130 (- (our_code_starts_here "x" "c" "j" false -30 false true "c") 130)) (block (set! loop_var_130 (- loop_var_130 1)) true (block true 48 "j" false)) (break (>= "loop_var_130" 11)))))) (i (let ((loop_var_180 (let ((j true) (z false) (a "j")) "c"))) (loop (if (> loop_var_180 (- (let ((j true) (z false) (a "j")) "c") 180)) (block (set! loop_var_180 (- loop_var_180 1)) (set! j (let ((g true)) "c")) (let ((h 20)) "x") -58) (break (set! c -18))))))) "c")) (x (block (block (block (block false "c" true 76) (let ((j input) (h false)) "x") (let ((i false) (j false) (y "c")) "j") (let ((g true) (z -31) (e 30)) "g")) (- (* -19 -94) (+ 8 91)) (isbool (let ((loop_var_89 "c")) (loop (if (< loop_var_89 (+ "c" 89)) (block (set! loop_var_89 (+ loop_var_89 1)) (set! c false)) (break true)))))) (block (let ((c (let ((a false) (c "a")) -99)) (h (block false true false)) (f (let ((x 73) (f "x")) -40))) (let ((x "c") (a "c") (g "x")) false)) (isbool (isnum false))) (+ (let ((loop_var_170 1)) (loop (if (> loop_var_170 (- 1 170)) (block (set! loop_var_170 (- loop_var_170 1)) "x" -95 27) (break -29)))) (- (block 27 input "c") (sub1 -96)))))) (let ((b (+ (+ (set! j "j") (let ((c false) (j "c") (x true)) -57)) (fun4 (block 71))))) (let ((a (let ((loop_var_156 81)) (loop (if (< loop_var_156 (+ 81 156)) (block (set! loop_var_156 (+ loop_var_156 1)) true true false) (break true))))) (f (let ((j (let ((a 95) (z false)) input)) (g (+ 56 -34)) (a (let ((c "c") (h false) (i 19)) "i"))) (fun2 -19 "j" 4 true "x" "j" "j")))) (= (let ((loop_var_150 7)) (let ((loop_var_106 -47)) (loop (if (< loop_var_106 (+ -47 106)) (block (set! loop_var_106 (+ loop_var_106 1)) (set! x "c") (set! j -86) 61 -26) (break "x"))))) (block false "a" 93 "c")))))) (f (= (isbool (<= (- (+ "c" -80) (let ((f "x") (e true) (a false)) "c")) (let ((loop_var_71 -42)) (loop (if (< loop_var_71 (+ -42 71)) (block (set! loop_var_71 (+ loop_var_71 1))) (break -72)))))) (set! x (= (let ((e (let ((y false)) "y")) (b (block "e" "c"))) (+ "j" "j")) (+ (let ((e "c") (x -21)) -60) (- 38 73))))))) (let ((e (let ((x (set! x (isbool (let ((a "x")) "f")))) (c (block (block (<= "c" 67) (let ((loop_var_150 "x")) (loop (if (> loop_var_150 (- "x" 150)) (block (set! loop_var_150 (- loop_var_150 1)) input input "x") (break "c")))) -52 (let ((e "j") (f "j") (c -6)) 2) (block "f" "c")) (+ (block "c" true -10) (let ((b true)) "j")) (- (let ((b "x") (y false) (a 44)) "x") (let ((loop_var_88 "x")) (let ((loop_var_23 "x")) (loop (if (> loop_var_23 (- "x" 23)) (block (set! loop_var_23 (- loop_var_23 1))) (break -5)))))) (let ((z false)) "c") (block (if -45 false "x") (isbool "c"))))) (<= (let ((loop_var_197 86)) (loop (if (> loop_var_197 (- 86 197)) (block (set! loop_var_197 (- loop_var_197 1)) (set! c "j") 63 "c" "j") (break -67)))) "j")))) (let ((g "j") (x (let ((loop_var_172 (- 5 -75))) (let ((loop_var_191 (* 81 81))) (loop (if (> loop_var_191 (- (* 81 81) 191)) (block (set! loop_var_191 (- loop_var_191 1))) (break (let ((y "g") (d "c") (c false)) "c"))))))) (i (< (block (- 47 -16) (let ((loop_var_102 "c")) (loop (if (< loop_var_102 (+ "c" 102)) (block (set! loop_var_102 (+ loop_var_102 1)) (set! j 88) (set! e 62) 78 22) (break 17)))) (let ((loop_var_49 -20)) (let ((loop_var_76 "x")) (loop (if (> loop_var_76 (- "x" 76)) (block (set! loop_var_76 (- loop_var_76 1)) true "e") (break false))))) (set! c true) (sub1 -91)) (* (block false "f" "x") (set! j "c"))))) (let ((f (block (our_code_starts_here -94 "j" 9 "x" "g" "i" "x" 61) (+ 25 "g"))) (x (let ((a -61) (f (let ((a false) (i 71)) true)) (d (block true "a" false))) (let ((loop_var_15 "a")) (loop (if (< loop_var_15 (+ "a" 15)) (block (set! loop_var_15 (+ loop_var_15 1))) (break false)))))) (a (block (sub1 -76) (let ((j "x")) "j") (block 92 true)))) (> (let ((c "f") (f "g") (x false)) "c") -31))))))) (block (let ((loop_var_45 (let ((y "i") (e "x")) "c"))) (loop (if (> loop_var_45 (- (let ((y "i") (e "x")) "c") 45)) (block (set! loop_var_45 (- loop_var_45 1))) (break "loop_var_45")))) "c" (set! i (block (block (block (+ "x" "c") (let ((e 87) (i "c")) true) (block "c") (+ "x" "c"))) (>= (add1 (- -93 -55)) (block (let ((loop_var_128 "c")) (loop (if (< loop_var_128 (+ "c" 128)) (block (set! loop_var_128 (+ loop_var_128 1)) (set! c -4) (set! c "c") (set! c "c") 97) (break "loop_var_128")))))) (<= 11 "x") (block (let ((b (let ((c 26) (j "i")) 67)) (i (block "x" false "i" "x"))) (>= "c" -60)) (block -19 (block true "x") (block "c" true -43 -44) (let ((loop_var_84 -53)) (loop (if (< loop_var_84 (+ -53 84)) (block (set! loop_var_84 (+ loop_var_84 1)) (set! x -61) (set! c -14) "c" "c") (break 73)))) (isnum true)) (block (isbool false)) (set! c (sub1 "c"))) (* (- (let ((a "i")) "x") (let ((loop_var_74 -26)) (loop (if (> loop_var_74 (- -26 74)) (block (set! loop_var_74 (- loop_var_74 1)) (set! c "c") (set! x -31)) (break "c"))))) (let ((loop_var_49 "x")) (loop (if (< loop_var_49 (+ "x" 49)) (block (set! loop_var_49 (+ loop_var_49 1))) (break 66))))))) (- (let ((loop_var_68 (* 26 -63))) (loop (if (< loop_var_68 (+ (* 26 -63) 68)) (block (set! loop_var_68 (+ loop_var_68 1)) (set! c (add1 "x")) (set! i (if "i" 67 -40)) (+ (* "c" "c") (set! x 88))) (break (block (block -66)))))) (let ((a (- (* (+ -82 -22) (+ "c" "c")) -85)) (h (let ((loop_var_24 (set! i "c"))) (loop (if (> loop_var_24 (- (set! i "c") 24)) (block (set! loop_var_24 (- loop_var_24 1))) (break (let ((y true)) "i")))))) (g (isbool (let ((z (isbool true)) (e (let ((loop_var_176 "x")) (loop (if (> loop_var_176 (- "x" 176)) (block (set! loop_var_176 (- loop_var_176 1)) (set! z -75) -84) (break 19))))) (x (block true "e" -7 "i" -57))) (< 23 -44))))) (our_code_starts_here (* (let ((loop_var_143 91)) (loop (if (> loop_var_143 (- 91 143)) (block (set! loop_var_143 (- loop_var_143 1)) (set! c "c") (set! g "x") (set! x "c") -62) (break 92)))) (our_code_starts_here -12 -63 25 "g" "a" true false 37)) (let ((b (sub1 "a")) (f (- "c" "c"))) (- 5 68)) (let ((j (add1 -4)) (b (let ((e "i") (a "j")) "a")) (i (* -70 68))) (set! b "i")) (isbool (isbool true)) (let ((a (isbool "h")) (h (let ((loop_var_131 55)) (let ((loop_var_9 82)) (loop (if (< loop_var_9 (+ 82 9)) (block (set! loop_var_9 (+ loop_var_9 1)) (set! g "h") (set! i "a") (set! h "g")) (break true)))))) (g (block false "h" "h" "a" "h"))) (let ((loop_var_111 "c")) (loop (if (< loop_var_111 (+ "c" 111)) (block (set! loop_var_111 (+ loop_var_111 1)) -28) (break "a"))))) (< (add1 -3) (* "c" 1)) (block (block "c" true -58 "a" 100) (<= "x" -48) (+ -23 62) (let ((f "x")) -95) (let ((z 66) (y 57)) "g")) (let ((h 100)) (* "c" 0))))))) (block (block (block true (= (let ((j false) (h (let ((f (block -83 true true -94)) (e (sub1 "f"))) (block "j" true)))) (block (let ((h -86) (c 41) (b -46)) "b"))) (add1 (block (let ((loop_var_49 84)) (loop (if (> loop_var_49 (- 84 49)) (block (set! loop_var_49 (- loop_var_49 1))) (break false)))) (<= -7 12) (* 43 48)))) (let ((a (let ((y (if (block false) (let ((f false) (c -23) (e true)) "c") (let ((f true) (g "f")) 45))) (f (our_code_starts_here (* -99 43) (fun3 "y" false 73 "y" 56 false) (* -62 "y") (let ((c "y") (z true)) false) 93 (> 56 -79) (<= "y" 28) (let ((g -89) (x 91)) 5))) (d (block (let ((b false)) 45) "y"))) (let ((f (= "y" "y"))) (block "f")))) (i (let ((loop_var_82 (let ((z false)) 1))) (loop (if (< loop_var_82 (+ (let ((z false)) 1) 82)) (block (set! loop_var_82 (+ loop_var_82 1))) (break (let ((d "loop_var_82") (z true) (a "d")) "z")))))) (x (>= (block (add1 -50) (= -90 -30) (> 89 68) (- 30 -8)) (let ((j (+ 42 -85)) (e (>= 95 "j")) (c (let ((j "j") (y input) (c -92)) "j"))) -89)))) (let ((e (set! x (isnum false))) (i (block (block "x") (set! a -22) (block "a" -73 11 "x"))) (g (let ((loop_var_186 -18)) (let ((loop_var_163 4)) (loop (if (> loop_var_163 (- 4 163)) (block (set! loop_var_163 (- loop_var_163 1)) (set! a 38) (set! i -55) (set! a -36) -10 88) (break "loop_var_163"))))))) (set! x "g"))) (let ((a (let ((loop_var_30 (sub1 -17))) (loop (if (> loop_var_30 (- (sub1 -17) 30)) (block (set! loop_var_30 (- loop_var_30 1))) (break (set! loop_var_30 30)))))) (i (let ((d (- (+ "a" "a") (let ((i 90) (z -83)) 11))) (j (block (<= "a" "a") (set! d false) (set! a true) (let ((z "d") (i -7)) "d") (let ((e true) (f 45)) -89)))) (let ((loop_var_24 "j")) (loop (if (< loop_var_24 (+ "j" 24)) (block (set! loop_var_24 (+ loop_var_24 1)) "a" 40 46) (break 31))))))) -7) (let ((loop_var_105 (fun2 -97 false -75 true -49 false true))) (loop (if (> loop_var_105 (- (fun2 -97 false -75 true -49 false true) 105)) (block (set! loop_var_105 (- loop_var_105 1))) (break (if (let ((e 34) (z true)) "e") (< 48 76) (< "loop_var_105" 86))))))) -100 (let ((g (fun1 12 (block (isbool (>= 45 41)) (* (+ -19 83) -97) (our_code_starts_here (let ((i -27) (c 6)) "i") (block true false 37) (- -53 -19) (let ((f 57) (e true) (d input)) "d") (let ((d false) (i 62) (x "d")) 32) (block true) (main 85) (- -58 88)) (let ((g (- 93 -25)) (z (let ((e input) (g "g")) true))) (* -53 "g"))) (> 76 (let ((a (= false false)) (h (+ 43 85))) (let ((y "h") (x false) (h 17)) "h"))) (block (let ((loop_var_29 34)) (loop (if (< loop_var_29 (+ 34 29)) (block (set! loop_var_29 (+ loop_var_29 1))) (break false)))) (block (let ((loop_var_97 92)) (loop (if (> loop_var_97 (- 92 97)) (block (set! loop_var_97 (- loop_var_97 1))) (break true)))) (- -4 -67) (- -19 -57) (let ((loop_var_86 75)) (loop (if (< loop_var_86 (+ 75 86)) (block (set! loop_var_86 (+ loop_var_86 1))) (break "loop_var_86")))) (fun1 50 -78 true true)) (let ((z true)) (+ -31 -44)) -33 (let ((i 85)) (set! i true)))))) (let ((x (< (- (+ -16 "g") 32) (* (add1 "g") 62))) (j (let ((loop_var_37 (block 24))) (loop (if (> loop_var_37 (- (block 24) 37)) (block (set! loop_var_37 (- loop_var_37 1))) (break (let ((f true)) 86)))))) (i (* (block (let ((h true) (i -12) (z false)) "i") "x" (block -40)) (+ (let ((b -42) (y 49) (a "x")) 88) (let ((loop_var_13 "j")) (loop (if (< loop_var_13 (+ "j" 13)) (block (set! loop_var_13 (+ loop_var_13 1))) (break "loop_var_13")))))))) (block (block (< -100 "i") (if 93 true "x") (let ((loop_var_64 47)) (let ((loop_var_51 "g")) (loop (if (> loop_var_51 (- "g" 51)) (block (set! loop_var_51 (- loop_var_51 1))) (break 8)))))) (let ((loop_var_107 12)) (let ((loop_var_31 "j")) (let ((loop_var_135 -82)) (loop (if (< loop_var_135 (+ -82 135)) (block (set! loop_var_135 (+ loop_var_135 1)) "x") (break "x")))))) (set! x (>= "i" "i"))))) 90) true (+ (our_code_starts_here (let ((loop_var_185 (add1 -7))) (let ((loop_var_5 (- -38 30))) (let ((loop_var_104 -74)) (loop (if (< loop_var_104 (+ -74 104)) (block (set! loop_var_104 (+ loop_var_104 1))) (break (* (block true "loop_var_104") -99))))))) (let ((z (block (- (- 19 8) (sub1 -58)) (sub1 (if false -66 -55)))) (y (let ((loop_var_148 "z")) (loop (if (< loop_var_148 (+ "z" 148)) (block (set! loop_var_148 (+ loop_var_148 1)) (set! z true) (<= "z" "z")) (break (isbool false))))))) (let ((a (block (let ((x true) (z false)) false) (let ((loop_var_128 "z")) (loop (if (< loop_var_128 (+ "z" 128)) (block (set! loop_var_128 (+ loop_var_128 1)) (set! z "y") (set! y "y") (set! z input) "y") (break "y")))) (isnum "y") (let ((x "y") (i true) (h "z")) "z") "z")) (e (let ((f (let ((e "z") (y "a")) false)) (i (- "a" -28)) (c (let ((z 98) (f "f") (c "z")) -78))) (let ((e "f")) true)))) (let ((e "z") (j (let ((loop_var_47 "z")) (loop (if (< loop_var_47 (+ "z" 47)) (block (set! loop_var_47 (+ loop_var_47 1))) (break "loop_var_47"))))) (h (sub1 "z"))) (+ 35 -61)))) (block (block (let ((loop_var_146 53)) (loop (if (> loop_var_146 (- 53 146)) (block (set! loop_var_146 (- loop_var_146 1))) (break true)))) (main -69) (sub1 (* 78 -55)) (let ((h 41) (i (let ((g 0) (f true) (h "f")) "f")) (g (> 42 76))) (let ((loop_var_196 61)) (loop (if (> loop_var_196 (- 61 196)) (block (set! loop_var_196 (- loop_var_196 1)) (set! g false) (set! h "i")) (break "i")))))) (let ((g (block (>= 6 32) (- 25 -22))) (f (add1 (block 48 -40 -63))) (e (let ((e (add1 96)) (g (- 24 "e"))) (isbool false)))) (let ((loop_var_54 "g")) (loop (if (> loop_var_54 (- "g" 54)) (block (set! loop_var_54 (- loop_var_54 1)) "f") (break "f")))))) (let ((z (let ((g (fun4 54)) (b (block (add1 -59) true (isbool "g")))) (let ((i (- 36 5)) (e 8)) (* 5 -15)))) (f (+ (set! z (let ((d -36) (i "d")) "d")) (* (+ 29 60) (* "z" "z"))))) (let ((e (<= (set! z "z") (let ((loop_var_91 35)) (loop (if (> loop_var_91 (- 35 91)) (block (set! loop_var_91 (- loop_var_91 1)) 89 14 0) (break -23)))))) (c (let ((b (* "z" "z")) (c (<= -11 "f"))) (add1 -98)))) (block (let ((loop_var_23 "f")) (loop (if (> loop_var_23 (- "f" 23)) (block (set! loop_var_23 (- loop_var_23 1)) 99 "f") (break -44)))) (block 87 false -8) (< "z" "z")))) (let ((loop_var_109 (let ((h -98) (z true) (i "h")) "i"))) (loop (if (> loop_var_109 (- (let ((h -98) (z true) (i "h")) "i") 109)) (block (set! loop_var_109 (- loop_var_109 1)) (if (let ((h 85) (j -47)) true) (block -24) (our_code_starts_here 62 -12 -36 false 62 true false -10)) (our_code_starts_here (block -74 true true -5) (let ((c false)) 46) (fun4 -6) false (block false true -16) (>= -65 -100) (<= 52 -33) (fun4 -94)) (- (+ 67 34) (block 62 53 -87))) (break (- (let ((g true) (x -69) (f -38)) 21) (add1 76)))))) (let ((loop_var_142 -47)) (loop (if (> loop_var_142 (- -47 142)) (block (set! loop_var_142 (- loop_var_142 1)) (let ((j (if false false true)) (e (set! j true)) (g (isnum "j"))) (let ((i -13) (e "i") (j false)) true))) (break (isnum (> 98 "loop_var_142")))))) (isnum (isbool (<= (let ((g 48) (i "g") (e "i")) 52) (+ 34 12)))) (- -80 (let ((loop_var_17 (if 96 -49 49))) (loop (if (> loop_var_17 (- (if 96 -49 49) 17)) (block (set! loop_var_17 (- loop_var_17 1))) (break (let ((b "loop_var_17") (y -91) (g "y")) "b"))))))) (let ((y (fun5 (sub1 (fun2 69 (= 7 61) (let ((loop_var_93 -13)) (loop (if (< loop_var_93 (+ -13 93)) (block (set! loop_var_93 (+ loop_var_93 1))) (break "loop_var_93")))) (block false 33 true true) (block false 76 32 false 73) (let ((c true)) "c") (isnum true))) (* (block (let ((a false)) true) (add1 86) (let ((a true) (y "a") (e false)) 87)) (let ((e -7) (a (set! e -16))) (let ((j false)) 79))) (+ (add1 -30) (* (block -52 -32 -56 -21) (let ((loop_var_191 70)) (let ((loop_var_25 92)) (let ((loop_var_145 89)) (loop (if (> loop_var_145 (- 89 145)) (block (set! loop_var_145 (- loop_var_145 1)) 96) (break "loop_var_145")))))))) (fun1 (+ (block false 7 -58) (our_code_starts_here -21 81 -2 true 36 true true 66)) (let ((c -87) (z (set! c true))) (sub1 -88)) (>= (let ((z false) (f false) (j 90)) -30) (* -69 -41)) (let ((b (>= 33 12)) (f (let ((loop_var_145 -96)) (loop (if (> loop_var_145 (- -96 145)) (block (set! loop_var_145 (- loop_var_145 1))) (break false)))))) false)) (block (isnum input) (> (fun2 -87 true -62 true 42 false true) (block false 25))) false (* (let ((a (block -9))) 46) (+ (let ((b false) (z "b")) -51) (let ((b -49) (a true) (e "a")) 66))) 74))) (let ((y (isnum (> (- "y" 32) (let ((loop_var_32 -43)) (let ((loop_var_55 72)) (loop (if (> loop_var_55 (- 72 55)) (block (set! loop_var_55 (- loop_var_55 1)) -87) (break "loop_var_55")))))))) (c (block (block false (let ((e 28) (a "e")) false)) (let ((b "y")) (block "b" "b")) (isnum (isbool true))))) (let ((j (> (* 62 -27) (block -52))) (z (block (isnum true) (let ((loop_var_61 -78)) (loop (if (< loop_var_61 (+ -78 61)) (block (set! loop_var_61 (+ loop_var_61 1)) (set! y 68) (set! y 98) (set! c 17) "y") (break "loop_var_61")))) (let ((h 54) (z true) (e 34)) "c") (let ((h 61)) "y") (sub1 70))) (h (< (let ((h "y") (e 8) (c "h")) 53) (block "z" "y")))) (+ (let ((z "y") (c false) (d 16)) "z") (let ((f "z") (g -21)) 90)))))) (let ((d (let ((y (* (- -56 (let ((h (block false)) (j (if -37 -27 -10)) (c (let ((a "j") (h true) (c 77)) "h"))) (let ((i "j")) -66))) 35)) (g (< (- (block (set! y 71) "y" (isbool true) (- -59 -39)) (block (add1 -1) (+ "y" "y"))) (- (block (set! y false) "y" (let ((e false) (f true) (z "y")) false) (let ((x 46) (i true)) "x")) (let ((loop_var_26 "y")) (let ((loop_var_164 91)) (let ((loop_var_120 -69)) (loop (if (< loop_var_120 (+ -69 120)) (block (set! loop_var_120 (+ loop_var_120 1))) (break -34)))))))))) (let ((e (block (set! g (let ((loop_var_70 "y")) (loop (if (< loop_var_70 (+ "y" 70)) (block (set! loop_var_70 (+ loop_var_70 1))) (break "g"))))) (let ((loop_var_174 "y")) (loop (if (< loop_var_174 (+ "y" 174)) (block (set! loop_var_174 (+ loop_var_174 1))) (break true)))) (isnum (>= 91 "y")) (let ((j (< -16 "y"))) (let ((loop_var_47 56)) (loop (if (< loop_var_47 (+ 56 47)) (block (set! loop_var_47 (+ loop_var_47 1))) (break "loop_var_47"))))) (block (let ((y -100)) "y") (isnum "g"))))) (let ((x (block (let ((loop_var_147 "y")) (loop (if (< loop_var_147 (+ "y" 147)) (block (set! loop_var_147 (+ loop_var_147 1)) (set! y "g") (set! y "e")) (break true)))))) (z (let ((a (block 11 "x" input)) (c (* 86 "y"))) true)) (d (add1 (let ((j false) (i "e")) 1)))) (block (let ((e "z")) true) (let ((loop_var_145 -58)) (let ((loop_var_136 "y")) (loop (if (< loop_var_136 (+ "y" 136)) (block (set! loop_var_136 (+ loop_var_136 1))) (break "g"))))) (+ "d" 34) (fun1 "y" "y" false input)))))) (z (let ((i (block (let ((b (= (sub1 76) (let ((f 27) (h "f")) "h")))) (let ((b -42)) (= "b" -19))) (isbool (block (set! d "d") (isbool "d") -12 (let ((x "d") (j 97)) "x"))) (let ((y (* (set! d 73) (let ((c 58) (b true)) -34))) (b (let ((a (- -84 90))) (+ -47 -69))) (e (block (isbool "d")))) (> (block "y") (- "b" "y"))) (let ((c (let ((f (< -82 52)) (j (> -46 -44))) "f"))) false))) (d (set! d (let ((i (sub1 (* -40 37)))) (block (block 64 input "i") "i" (block "i" true true) (< 9 -31) (- -9 -8)))))) (<= (block (let ((e (block -34)) (g (let ((loop_var_65 -60)) (loop (if (> loop_var_65 (- -60 65)) (block (set! loop_var_65 (- loop_var_65 1))) (break "d")))))) (> "e" "d")) (- (+ -67 "d") (* "d" "d"))) (let ((c (sub1 "d")) (h "i") (e (block (block "i" 1 "d" false "c") (sub1 "d") (let ((g true) (e input)) false) (let ((loop_var_198 "d")) (loop (if (> loop_var_198 (- "d" 198)) (block (set! loop_var_198 (- loop_var_198 1)) (set! d 78) 83) (break "c")))) (- "c" "d")))) (+ (add1 -56) (let ((i "d") (x "i") (a 6)) -4)))))) (e true)) (let ((loop_var_145 (set! z -15))) (loop (if (> loop_var_145 (- (set! z -15) 145)) (block (set! loop_var_145 (- loop_var_145 1)) (sub1 (let ((x (- -73 76)) (j (block 28 "z"))) (let ((y "e") (c false)) "x"))) (set! e (let ((e (set! e "d"))) (add1 96)))) (break -23)))))))