(fun (our_code_starts_here energy c z g h b) (if (<= energy 0) -55 (block (set! energy (- energy 1)) "energy")))
(fun (main energy) (if (<= energy 0) true (block (set! energy (- energy 1)) (>= (add1 (sub1 (if "energy" -8 -16))) (block (fun2 (set! energy "energy") true (let ((e false)) "energy") (set! energy -77) (let ((e 9)) true) (set! energy -20) (let ((b false) (c "energy") (h 4)) "b")) (let ((c (- "energy" 45)) (b (set! c -56))) (> "c" 94)) (if (let ((i false) (b true) (h "b")) true) true (isnum false)) (let ((x 39)) (isbool false)) "energy")))))
(fun (fun1 energy) (if (<= energy 0) 17 (block (set! energy (- energy 1)) (let ((j (let ((d (set! energy (add1 "energy"))) (j (block (let ((j true) (f false) (y true)) -2)))) (* (let ((c 32) (b false)) "j") (if false "j" "d")))) (d (let ((j (block (block 42 false "j" "energy" 72) (- "energy" -62) (let ((f -56) (d false) (j -28)) 17) (if "energy" "energy" "energy"))) (b (let ((g (< -2 "energy")) (d "j") (i true)) (= "energy" -53))) (f -63)) (+ (block "j") (- 17 "energy"))))) (set! energy (let ((x (let ((x false) (d "x")) "x")) (a "x") (j (fun1 -88))) (* "energy" -69)))))))
(fun (fun2 energy e y a c x d) (if (<= energy 0) true (block (set! energy (- energy 1)) (isbool (isnum (let ((e (let ((g "x")) "c"))) true))))))
(isnum (* (let ((x -42) (a true) (j (< (- -81 (let ((loop_var_98 (block false 7 "x" "x"))) (let ((loop_var_129 (set! x "x"))) (loop (if (> loop_var_129 (- (set! x "x") 129)) (block (set! loop_var_129 (- loop_var_129 1))) (break (- "loop_var_129" 78))))))) (+ (add1 (block (<= 84 11) (let ((d 56)) "a") (let ((f -51) (b "f")) -38) (- 67 "x"))) (let ((b (block (< "x" "x"))) (z (> "x" (let ((j "a") (x false) (e true)) 6))) (a (let ((loop_var_183 "x")) (loop (if (< loop_var_183 (+ "x" 183)) (block (set! loop_var_183 (+ loop_var_183 1)) (set! z 74)) (break "loop_var_183")))))) (+ 14 (block -14 true "a" true "a"))))))) 69) (let ((g false) (y (let ((i (add1 (let ((loop_var_92 (- -43 14))) (loop (if (> loop_var_92 (- (- -43 14) 92)) (block (set! loop_var_92 (- loop_var_92 1)) (set! g (* -57 -34)) (let ((d true) (i "g") (b -11)) "b") (block -67 -2 -65 59)) (break (block false false 89)))))))) (block (block (- (set! i -51) (let ((c "g") (e true) (j "i")) "j")) (add1 (let ((b false)) "i")) (set! g (= "g" "g")) (let ((e (let ((e false) (x "i") (y true)) 57)) (b (* "i" "e"))) (let ((e "g") (g "i")) "e"))))))) (- (add1 (let ((i (>= (if false "y" 31) (set! g -53))) (a (block (<= 35 -63))) (d (block true (add1 "y") (let ((b false) (d 32)) "d") (let ((a "y") (b false) (j "y")) 10) (let ((loop_var_132 -31)) (loop (if (< loop_var_132 (+ -31 132)) (block (set! loop_var_132 (+ loop_var_132 1)) (set! g "y") (set! y 29) (set! a -81) "y" "y") (break 80))))))) (+ (block "g" "g" -74 "i" "y") (let ((d "d") (c "a") (j 91)) -79)))) (* (let ((x (< (let ((i 53)) -19) (let ((loop_var_107 -31)) (let ((loop_var_72 3)) (loop (if (> loop_var_72 (- 3 72)) (block (set! loop_var_72 (- loop_var_72 1)) -16 "y" 2) (break -15)))))))) (- (our_code_starts_here -85 "y" "x" 8 -92 -47) (let ((d true) (e "g")) input))) (block (let ((x (sub1 43))) (- "x" "x")) (set! y (if -29 "y" input))))))))