(fun (our_code_starts_here energy) (if (<= energy 0) -13 (block (set! energy (- energy 1)) (if (block (set! energy true) (let ((e (block true 52)) (f (let ((f false) (d "f") (b "d")) "energy"))) (* -41 "energy"))) (let ((z (set! energy (let ((x true)) 29))) (e (- (- -53 "energy") (let ((i 13)) -26)))) (- (block 70) (- "energy" 8))) "energy"))))
(fun (main energy) (if (<= energy 0) false (block (set! energy (- energy 1)) (= (< (let ((g (fun1 "energy" -47 false -67 false)) (e (>= 21 -13))) (let ((j true) (y false) (h true)) "energy")) (- (let ((h "energy") (x false) (c -18)) -26) (sub1 83))) (fun5 (block (isnum false) (let ((f -71)) -17)) (block (+ "energy" -13) (* -96 "energy") (let ((f false) (y "energy") (a true)) true) (fun2 19 "energy" "energy" 48 false 100) (>= -30 "energy")) (* (- -39 -21) (+ 24 -36)) (fun5 (+ "energy" "energy") (= -56 "energy") (block true 87) (block true)))))))
(fun (fun1 energy d z g h) (if (<= energy 0) true (block (set! energy (- energy 1)) (isbool (< (set! d "h") (* (let ((h false)) -11) "d"))))))
(fun (fun2 energy b h a j y) (if (<= energy 0) -84 (block (set! energy (- energy 1)) (add1 (+ (block (set! y "a") (let ((c "j")) false) (let ((z -15) (a "y")) 6)) (if (let ((c "h") (j -22)) 88) (add1 "h") (let ((c true) (y "b")) "j")))))))
(fun (fun3 energy c g h e f y i) (if (<= energy 0) -62 (block (set! energy (- energy 1)) (let ((d (isbool (block (if "energy" "e" 72) (set! h true) (let ((a false) (e "g")) -62) true))) (e (> (let ((x (= -26 -23)) (g (let ((i "energy") (j true) (e "j")) "c")) (c (let ((g false) (j "i") (e false)) -58))) (block true true 55)) (let ((h (> "energy" "c")) (e (+ -32 61))) (* 44 "i"))))) (* (add1 (set! y "energy")) (set! d (add1 "energy")))))))
(fun (fun4 energy c i x) (if (<= energy 0) 28 (block (set! energy (- energy 1)) (let ((f (block (add1 (set! i "energy")) (let ((x -8) (h (sub1 19))) (sub1 "x")) (set! i (let ((y true)) "i")) (set! c (- "energy" 12)))) (x (if (>= (set! x "energy") -87) (let ((d (let ((e true)) true))) (= 84 "c")) (if (<= 70 -20) (> "energy" "energy") (set! x true)))) (y (let ((y (fun3 (let ((d "c")) "x") (= "f" -57) (- "i" "x") (if true "f" 17) (let ((a "x")) false) (let ((b "x") (i true)) true) (let ((c "c") (z 8)) "x") 20)) (x (block (isbool "y"))) (g (let ((z (< -25 -13))) (let ((b true) (f "x") (x "i")) "x")))) (- (- 86 -79) (let ((a "c") (b 18) (i "energy")) "f"))))) (let ((y (block (let ((y true) (j false) (z 6)) "y") (let ((e "x")) 4) "x")) (b (block (let ((d false) (g "d")) 35) -56 "x" (sub1 18)))) (- (+ -70 "y") (block true 89 "f" "c")))))))
(fun (fun5 energy j h g) (if (<= energy 0) true (block (set! energy (- energy 1)) (block (>= "g" (- (* 15 -72) (block "h" "h" false "g"))) (* (block (block "h") (set! h 70) (let ((j "g") (g "h") (a false)) 24)) (+ (let ((x true) (d "energy")) 70) (* 51 10))) (< (fun4 (if "g" "energy" 16) (let ((c -2) (y false) (i "c")) "g") (block 75 "h" -24) (let ((j "g") (i "h")) "i")) (* (block "g" "h" "j") (fun7 13 "g" false))) (> (let ((d (let ((a "g")) false)) (e (sub1 -32))) (let ((e 83) (c "j")) "e")) (add1 (- -20 "g"))) (set! energy (block (< 63 -26) false))))))
(fun (fun6 energy z i g) (if (<= energy 0) false (block (set! energy (- energy 1)) "i")))
(fun (fun7 energy g x) (if (<= energy 0) 44 (block (set! energy (- energy 1)) (our_code_starts_here energy))))
(fun (fun8 energy d) (if (<= energy 0) 100 (block (set! energy (- energy 1)) (block (set! d (let ((i (+ "d" -35)) (j (block true "d"))) (let ((c "d") (f false)) 15)))))))
(< (* (+ (let ((f (> (fun7 46 (* (let ((loop_var_78 -25)) (let ((loop_var_31 65)) (loop (if (< loop_var_31 (+ 65 31)) (block (set! loop_var_31 (+ loop_var_31 1))) (break -41))))) (+ 85 42)) (block 100 (if 11 false true))) -64))) (let ((loop_var_163 (- 68 -84))) (loop (if (> loop_var_163 (- (- 68 -84) 163)) (block (set! loop_var_163 (- loop_var_163 1)) (* (add1 19) (sub1 -76)) (block (let ((b 32)) -66) (set! f 99))) (break (- (add1 93) (add1 -9))))))) (* (let ((z (sub1 (sub1 (let ((loop_var_117 99)) (let ((loop_var_200 -30)) (loop (if (< loop_var_200 (+ -30 200)) (block (set! loop_var_200 (+ loop_var_200 1)) -84 84) (break "loop_var_200"))))))))) (let ((f (block (block "z" "z") (let ((e true) (i "e")) -76) (>= -42 11) (let ((loop_var_133 2)) (loop (if (< loop_var_133 (+ 2 133)) (block (set! loop_var_133 (+ loop_var_133 1)) 6 "z" -72) (break -49)))) (block false true))) (b (>= (let ((z true) (y 86)) "z") (let ((g "f") (f false) (b "z")) "z")))) (+ (block 95) (let ((y true)) -42)))) (let ((z (fun4 (let ((f (let ((loop_var_158 38)) (loop (if (> loop_var_158 (- 38 158)) (block (set! loop_var_158 (- loop_var_158 1)) true) (break false))))) (g (block 99 false "f" 78))) (add1 -66)) (- -29 (block 89)) (- (* -45 -39) (block -10)) (>= (+ 70 33) (- 88 -47)))) (d (< (* (sub1 57) (fun8 "z" "z")) (fun2 (* -7 "z") "z" (let ((x false)) "z") (+ "z" 1) (let ((b "z") (f "b") (e -77)) false) (sub1 64)))) (e (+ (* "z" (let ((h "z") (z "d") (f "d")) "h")) (set! d "z")))) (* (- (let ((g 87)) 3) -97) (let ((c (+ 3 66))) (let ((loop_var_161 81)) (let ((loop_var_44 -68)) (loop (if (> loop_var_44 (- -68 44)) (block (set! loop_var_44 (- loop_var_44 1)) (set! z -91)) (break "e")))))))))) (- (let ((y (add1 (let ((g (block (if 99 false false) (+ 60 90) (our_code_starts_here -34))) (z (add1 (let ((g false) (c false) (b true)) -21))) (j (if (+ "z" -9) (< 58 "g") (<= "g" 59)))) (block (< -47 "g") (set! j false) (block "j" "j" "z" -18))))) (f (let ((e (set! y (block (isnum false) -18 (fun7 "y" "y" false) (+ "y" -97) (> 82 -38)))) (f (= (< (let ((loop_var_105 47)) (loop (if (> loop_var_105 (- 47 105)) (block (set! loop_var_105 (- loop_var_105 1)) 73) (break "loop_var_105")))) "y") (let ((z (block 32)) (d (let ((h "y") (i "h") (j false)) true)) (g (let ((loop_var_47 "y")) (loop (if (> loop_var_47 (- "y" 47)) (block (set! loop_var_47 (- loop_var_47 1)) "z" 61 "y") (break "y")))))) (main -40))))) (<= (set! f (* "y" "y")) (sub1 (let ((g -80)) 21))))) (g (- (- (set! y (* "y" 61)) (block (set! y "f") (block "y" "y") (block "y" "f" true) (add1 -26))) (block (set! f (let ((loop_var_97 "y")) (loop (if (< loop_var_97 (+ "y" 97)) (block (set! loop_var_97 (+ loop_var_97 1)) (set! y true) (set! f "f") (set! f "f")) (break "f"))))) (* (+ "y" "y") (let ((x "y") (g true) (e "f")) 71)))))) (let ((x (= (* (let ((loop_var_31 "y")) (loop (if (< loop_var_31 (+ "y" 31)) (block (set! loop_var_31 (+ loop_var_31 1))) (break "g")))) (let ((g "y") (f "y")) 95)) (* (let ((loop_var_7 "y")) (loop (if (< loop_var_7 (+ "y" 7)) (block (set! loop_var_7 (+ loop_var_7 1)) "y" 25) (break 38)))) -65))) (f false) (b (let ((loop_var_58 (* "y" "y"))) (loop (if (> loop_var_58 (- (* "y" "y") 58)) (block (set! loop_var_58 (- loop_var_58 1)) (set! g (add1 -56)) 16) (break 17)))))) (- (let ((loop_var_123 -28)) (let ((loop_var_53 "y")) (let ((loop_var_61 "b")) (loop (if (> loop_var_61 (- "b" 61)) (block (set! loop_var_61 (- loop_var_61 1)) (set! f -98) (set! y 92) (set! b "b") -19) (break "g")))))) (* (sub1 86) (add1 "y"))))) (let ((z (if (block (block 54 (sub1 -99) (let ((b 30) (x input)) -54) (- -20 44)) true) true (< (block (fun5 -57 true 0 false) -28 (sub1 -50) (block -58 false 12 -84 19)) (block (let ((b -15)) false) (block false true true) -99)))) (a (let ((loop_var_82 (block -90 5 true 40))) (let ((loop_var_187 (* -96 -14))) (loop (if (< loop_var_187 (+ (* -96 -14) 187)) (block (set! loop_var_187 (+ loop_var_187 1)) (set! z (isbool (= true true))) (set! z (<= (block -40 3 68 96) (* -1 64))) (set! z (<= (let ((i false)) -56) (set! z 64))) (block (let ((g 8) (a "z")) true) (let ((b 98)) "z") (set! z false) (+ -60 -10) "z")) (break (isbool (< "loop_var_187" -69))))))))) -15))) (let ((y true) (b (block (let ((j (let ((z (block (block (* 87 -62) (isnum "y") (>= 14 -33)) (isnum (>= 62 46)) (let ((z -41)) (<= "z" "z")) (let ((e (block "y" -79 -55 -22 false)) (d (let ((e "e") (c "y")) false)) (c (<= 34 -30))) (block 84 true 65)))) (c (fun5 (let ((f (let ((loop_var_13 "z")) (loop (if (> loop_var_13 (- "z" 13)) (block (set! loop_var_13 (- loop_var_13 1))) (break true))))) (z (* "z" "z"))) (+ "z" 15)) (let ((d (isbool false))) (< -16 62)) (- (- "z" 15) (- "z" 55)) (let ((e (set! z "z")) (d (- 93 -97)) (z (- -2 "e"))) "y"))) (j (let ((loop_var_7 (fun2 "c" "c" -56 -51 "y" "c"))) (loop (if (< loop_var_7 (+ (fun2 "c" "c" -56 -51 "y" "c") 7)) (block (set! loop_var_7 (+ loop_var_7 1)) (< -28 -54) (block 98 true) (= "c" "c")) (break (set! loop_var_7 "y"))))))) (* (- (sub1 -3) (let ((loop_var_143 -73)) (loop (if (< loop_var_143 (+ -73 143)) (block (set! loop_var_143 (+ loop_var_143 1))) (break -78))))) (let ((f (if input "z" "z")) (y (block input "f" "j"))) (sub1 -24))))) (d (let ((loop_var_9 "j")) (loop (if (> loop_var_9 (- "j" 9)) (block (set! loop_var_9 (- loop_var_9 1)) (set! y (set! j (set! y "j"))) (set! y (* 22 (* 30 13))) (block (sub1 "j")) (let ((f (isnum false))) (let ((d true) (f "j") (g -55)) -29))) (break (- (add1 "loop_var_9") (+ "loop_var_9" 62))))))) (b (let ((loop_var_156 (* "j" 73))) (let ((loop_var_131 (fun8 "d" 64))) (loop (if (> loop_var_131 (- (fun8 "d" 64) 131)) (block (set! loop_var_131 (- loop_var_131 1)) (set! d (>= (block input -51) (let ((c true) (a "d")) "j")))) (break (<= (let ((d "y") (b -92) (x "d")) 25) (block 81 -24))))))))) (add1 (let ((a (- (let ((loop_var_59 19)) (loop (if (> loop_var_59 (- 19 59)) (block (set! loop_var_59 (- loop_var_59 1)) 45) (break "loop_var_59")))) (let ((y 50) (g "d") (h true)) -18))) (z (block (fun4 11 "j" "j" "b") (let ((e "j") (j "b")) "b") (< 85 "d") true -37))) (let ((j (let ((x true)) true)) (a (let ((b -5) (h "b") (d false)) false)) (y (set! b false))) (block 55 -60 "j" "z"))))) -39 (let ((loop_var_61 (let ((y false) (j -20) (i -87)) -52))) (loop (if (< loop_var_61 (+ (let ((y false) (j -20) (i -87)) -52) 61)) (block (set! loop_var_61 (+ loop_var_61 1)) (let ((b (block (isnum input))) (a (let ((z (block 1 false "y" "y")) (j false)) (set! z -52)))) (let ((i (+ "a" -47)) (b (let ((x "b") (d input) (h true)) -32)) (g (let ((d "i") (b 36) (i 87)) "b"))) (< -77 "i"))) (let ((c (<= (let ((c "y") (a "y")) 91) (+ 96 -48))) (i (< (block 23 -71) (- 74 -99)))) (set! c (isbool true))) (< (if -19 (let ((e true) (z -60)) -64) (let ((g "y") (c 14) (h "g")) "c")) (fun2 (sub1 -77) (sub1 41) (sub1 -48) (set! y -87) (> -75 2) (* -69 -80)))) (break (set! loop_var_61 (= (let ((e true) (a false)) "a") (isbool "y"))))))))) (h (block (isbool true) (let ((i (= (sub1 (block (fun8 65 -51) (= "y" true) 21)) (* 10 -76))) (j (if (* (block (let ((x "i")) 29)) (- (let ((g false) (e false)) 16) (our_code_starts_here 43))) (let ((f -25)) (let ((y (block -23 "y" -73 -86))) (let ((g "f") (a "f") (h true)) -83))) (let ((d (block (let ((a -20)) "y") (let ((e false) (x false) (y 31)) false) "b" (let ((loop_var_65 -90)) (loop (if (> loop_var_65 (- -90 65)) (block (set! loop_var_65 (- loop_var_65 1)) (set! i "b") (set! y "y") false) (break input)))))) (x (let ((j (set! i 7))) (block 64 "j" "j" false "j")))) (fun2 (- -55 -81) "x" (sub1 "x") (let ((i -45) (f true) (g true)) -49) (block "y") (* "x" -32)))))) (block (sub1 "j") (sub1 (- (+ -42 11) (- "j" 59))))) 26 (block (block (let ((j (> 17 (add1 -92))) (c (let ((d (let ((i -97)) 23)) (h (let ((d "d") (a "d") (y false)) -44))) (let ((d "y")) "y")))) -14) (sub1 (- (block true true 14) (add1 -68))) (fun2 (block (let ((loop_var_47 -40)) (loop (if (< loop_var_47 (+ -40 47)) (block (set! loop_var_47 (+ loop_var_47 1)) true false "y") (break true)))) (let ((g 70)) -54) (let ((d 42)) "y") -94 (+ -91 -60)) -93 (let ((e (let ((c -42)) -68)) (j (let ((j -94) (b "e")) "y"))) (let ((loop_var_25 -39)) (loop (if (< loop_var_25 (+ -39 25)) (block (set! loop_var_25 (+ loop_var_25 1)) (set! e "e") (set! y -79) (set! b "e") -61) (break 5))))) (if (set! y false) (block -43 92 -40) (block 24 false "b" true -90)) (let ((loop_var_118 14)) (loop (if (> loop_var_118 (- 14 118)) (block (set! loop_var_118 (- loop_var_118 1))) (break "y")))) (block (* 37 39) (block false 81) (let ((i "y") (d -87)) "y") (+ -9 97))) (< (block (let ((i true) (z "b")) -46) (let ((c -39) (f 60) (j false)) true) (let ((loop_var_149 -17)) (loop (if (< loop_var_149 (+ -17 149)) (block (set! loop_var_149 (+ loop_var_149 1)) -97 -35 46) (break -81)))) (let ((loop_var_15 18)) (loop (if (< loop_var_15 (+ 18 15)) (block (set! loop_var_15 (+ loop_var_15 1)) (set! y -19) (set! y 43) (set! b -93)) (break "loop_var_15"))))) (block (isbool "y") (let ((c -4) (d input)) "c") (let ((g -2) (j "b") (y -5)) true) (block -73) (if "y" 42 -62))) (set! b (let ((c (fun1 68 77 true -60 "b"))) (set! y true)))) (= 22 (block (set! b (* 2 -88)) (isnum (block -16 true)) (set! b (isbool false)) "b" (let ((loop_var_90 -19)) (let ((loop_var_139 -76)) (loop (if (< loop_var_139 (+ -76 139)) (block (set! loop_var_139 (+ loop_var_139 1)) -6) (break "loop_var_139"))))))) -98 (+ (block (set! b (- 88 -80)) (set! b (let ((i -64) (b "i") (x -26)) "b")) (let ((f (isbool "y")) (y (let ((f 65) (z "f") (c "z")) "b")) (g (block "b" "y" false true))) (let ((a false) (c -80) (y "c")) "g")) (let ((y (block 64 "y" true -58)) (j (let ((loop_var_79 "y")) (let ((loop_var_192 37)) (loop (if (< loop_var_192 (+ 37 192)) (block (set! loop_var_192 (+ loop_var_192 1)) (set! y "y")) (break false))))))) (let ((j "y") (c 86)) "y")) (let ((loop_var_117 25)) (loop (if (> loop_var_117 (- 25 117)) (block (set! loop_var_117 (- loop_var_117 1))) (break 53))))) (set! b (+ (+ -95 94) (block "b" 24 38 -54 96))))) (let ((loop_var_167 (- 49 -3))) (loop (if (< loop_var_167 (+ (- 49 -3) 167)) (block (set! loop_var_167 (+ loop_var_167 1)) (set! y (isnum (if (set! y "y") (let ((i 7)) "y") (<= -97 98)))) (set! b true) (block input (add1 (set! y 6)) (+ (- 40 14) (- -7 7)) (let ((b (< -82 44)) (e (= "b" input)) (i (* 21 -51))) (let ((i "i") (g -6) (y "b")) false))) (set! b "y")) (break (<= (block (if "y" "y" "y") (> "loop_var_167" "loop_var_167") (let ((i false) (x "i")) 17)) (set! loop_var_167 (block -24)))))))))) (block (sub1 (fun8 (let ((b (- (sub1 15) (let ((d "y") (b "b")) -9))) (j (block (block "h" 22 false false "b") (block "h" "y") "b" "b"))) (block (let ((loop_var_174 "j")) (loop (if (< loop_var_174 (+ "j" 174)) (block (set! loop_var_174 (+ loop_var_174 1)) (set! h true)) (break false)))) (let ((loop_var_150 -4)) (let ((loop_var_55 "j")) (loop (if (> loop_var_55 (- "j" 55)) (block (set! loop_var_55 (- loop_var_55 1)) -46 "b") (break 68))))) (let ((c "b")) input) (add1 "j"))) (let ((x (- (let ((y -82) (d "y") (h 76)) "y") (- -63 -98)))) (block (- -12 "x") (let ((a "b") (c false)) false) (let ((loop_var_27 "x")) (loop (if (< loop_var_27 (+ "x" 27)) (block (set! loop_var_27 (+ loop_var_27 1)) (set! h 17) (set! x "x") (set! x 91)) (break "loop_var_27")))) (if 69 -54 "x"))))))))