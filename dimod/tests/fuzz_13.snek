(fun (our_code_starts_here energy c j g a) (if (<= energy 0) -42 (block (set! energy (- energy 1)) (add1 (set! c (our_code_starts_here (block "energy") (block "g" "a" false true) "a" (> -56 "c") (let ((x "c") (i "x") (h -99)) false)))))))
(fun (main energy c h y d e g f) (if (<= energy 0) false (block (set! energy (- energy 1)) (set! e (if (isbool true) (block (let ((e false)) "c") (let ((b "y") (y "d")) "y") (+ 33 74) (block "g" 77 "c" 86 "h") (if false false "g")) (set! d (>= "c" "d")))))))
(fun (fun1 energy e d g i z x) (if (<= energy 0) false (block (set! energy (- energy 1)) (> (sub1 (+ (- 30 "energy") (- "e" "x"))) (set! z (block (let ((b true) (g "z") (j false)) -75)))))))
(fun (fun2 energy z h c f d e y) (if (<= energy 0) false (block (set! energy (- energy 1)) (>= -87 (let ((x (set! f (sub1 11))) (h (let ((z (let ((i true)) "h")) (f (let ((z -50)) false)) (g (let ((h "e") (i "x")) true))) (block "g" "h" -59 "x")))) "f")))))
(fun (fun3 energy) (if (<= energy 0) true (block (set! energy (- energy 1)) (let ((e (set! energy (set! energy (block false "energy" -88 43 true)))) (j (add1 (if (our_code_starts_here -99 "e" "e" "e" "e") (let ((i "energy") (c -81)) "c") (* "energy" 3)))) (i (let ((b false) (h (let ((d false) (z (let ((f true) (x -30)) "j")) (x (>= "j" -32))) (add1 "j"))) (j (>= (set! j -5) (set! j "h")))) (if (let ((x "h") (b false)) 57) (> 82 "h") (> 80 72))))) (< (sub1 (- -21 "j")) (set! j (sub1 26)))))))
(fun (fun4 energy y) (if (<= energy 0) true (block (set! energy (- energy 1)) (isnum (= (set! energy (set! y -95)) (- (* "energy" "energy") (* "y" 62)))))))
(fun (fun5 energy g e c i) (if (<= energy 0) true (block (set! energy (- energy 1)) (block (block (fun2 (let ((j "e")) -100) (let ((g -63) (b "g") (f true)) true) (block 25 false -62 62 -57) (let ((g "energy") (b "c")) 65) (> "g" -49) (<= "energy" -50) (- -99 -4) false) (let ((j "i") (d (+ "g" "energy"))) (our_code_starts_here -49 true true "c" "c")) (set! c (set! e "i")) false) (>= (let ((e true) (g 58) (i (set! g "energy"))) (+ "energy" 0)) (our_code_starts_here (* "g" "e") (block "c" "g" "energy" 2 true) (isnum "i") (let ((c "energy") (d "g")) false) "c")) (let ((h (let ((g (+ -19 69))) (isnum "i")))) (= (>= "g" 57) true))))))
(fun (fun6 energy a h d i f) (if (<= energy 0) true (block (set! energy (- energy 1)) "d")))
(fun (fun7 energy h j f y) (if (<= energy 0) true (block (set! energy (- energy 1)) (let ((c (block -64 (+ (if "j" "h" "energy") (block "j" 40 -4)) (let ((b (set! j true)) (x "b") (f (add1 -15))) (set! h -100))))) (if "energy" (if (sub1 "h") (<= -27 "c") (set! c "y")) false)))))
(fun (fun8 energy j a y h b g) (if (<= energy 0) false (block (set! energy (- energy 1)) (< "energy" (* 30 (block (- -86 "y") (< "j" "h") (- "j" -91)))))))
(fun (fun9 energy x) (if (<= energy 0) false (block (set! energy (- energy 1)) (fun5 energy 50 (fun2 (let ((x false) (j (= false "x")) (c (set! x -86))) (let ((y -34)) "c")) (if (block false) (isnum false) (set! energy true)) (add1 (block false 26)) -61 (> "x" (block "energy")) (isnum (isbool false)) (- (let ((i "x") (g false)) "i") (- 74 90)) (if (<= "x" 0) (if 81 true false) (let ((y -54) (c 42) (a 86)) true))) (let ((a (fun2 (+ -20 6) true (let ((z true) (b -90)) "x") (let ((j false)) -99) (= true true) (if false false true) (sub1 -11) (<= "energy" "x"))) (i (< (let ((g "a")) "x") (let ((d "energy") (b "a") (i "b")) -56)))) (let ((f (let ((f -92) (x true) (b 40)) "i")) (d (let ((g false) (x true) (b "energy")) "energy"))) (isnum "f"))) (let ((b (sub1 "energy")) (g (* (block 57 "x") (let ((f true)) "b"))) (z (let ((y (let ((f 1) (c true)) true)) (c (let ((e 76) (y 6)) true)) (h (sub1 "x"))) true))) (let ((h (let ((j -39)) true)) (f (add1 90)) (e (if "h" "g" 94))) (let ((g "h") (d 72)) false)))))))
(<= (block (let ((x (let ((x (let ((x (fun7 (let ((a 74) (z (let ((loop_var_192 71)) (loop (if (> loop_var_192 (- 71 192)) (block (set! loop_var_192 (- loop_var_192 1)) true true) (break false)))))) (our_code_starts_here 19 false "z" true false)) (let ((c (our_code_starts_here 29 true false true input)) (g 11) (b (let ((a -97) (x "a")) "a"))) (>= "g" -91)) -61 true (fun6 (+ 66 80) (isbool false) (let ((y 57)) false) -46 -62 (< 28 46)))) (f (isbool (isbool (= "x" -72)))) (h (let ((loop_var_44 (let ((z "f") (i "x")) -63))) (loop (if (< loop_var_44 (+ (let ((z "f") (i "x")) -63) 44)) (block (set! loop_var_44 (+ loop_var_44 1)) (set! x (our_code_starts_here "x" false true false "f")) (set! f (let ((x true) (i "x") (f "i")) "x"))) (break (block "f" true "f" "loop_var_44" "loop_var_44"))))))) (set! x (block (- "h" "x") (our_code_starts_here 26 true true "f" "f") (let ((j "f")) "h")))))) (let ((j (let ((loop_var_189 (sub1 69))) (loop (if (< loop_var_189 (+ (sub1 69) 189)) (block (set! loop_var_189 (+ loop_var_189 1)) (set! x (block false true false)) (set! x (block -12 true)) (set! x (set! x true)) (>= "x" "x") (let ((b true) (x "x") (j "x")) "b")) (break (set! loop_var_189 false))))))) (isbool (if (let ((i false) (g true)) input) (let ((a false) (d 33) (x "j")) true) (= "x" 97)))))) (e (let ((loop_var_9 (+ 59 -47))) (loop (if (> loop_var_9 (- (+ 59 -47) 9)) (block (set! loop_var_9 (- loop_var_9 1)) (set! x (* (block (set! x "x") -97 (let ((h true)) "h") 59 (* -33 -25)) (let ((d (* -5 11))) (- -7 75)))) (set! x 100) (our_code_starts_here (block (>= -55 17) "x" (block -99) (block false -94 93 89) (set! x -52)) (= (let ((f 50) (z -37) (e "x")) false) (> 33 -56)) "x" (let ((c (- 47 79)) (f (set! c -83))) (block "x" "x")) (= (- -30 58) (let ((d 40) (e true)) 34)))) (break (let ((c (set! loop_var_9 (if "loop_var_9" "loop_var_9" "loop_var_9"))) (e (set! c (let ((c "loop_var_9") (i -48)) "c")))) (+ (let ((d -31) (b "x")) "c") (our_code_starts_here "loop_var_9" "x" "x" "x" true))))))))) "e") (let ((loop_var_30 17)) (let ((loop_var_81 (let ((z -31)) "z"))) (let ((loop_var_172 (block 62 false true 63))) (loop (if (> loop_var_172 (- (block 62 false true 63) 172)) (block (set! loop_var_172 (- loop_var_172 1)) (if (let ((j (add1 (let ((b false)) 73)))) (<= (+ -75 30) (block false false 5 "j"))) (= (isbool (fun9 90 true)) false) (> -79 (- (if -93 -56 -78) (- -51 -86))))) (break (set! loop_var_172 (if (= (<= -2 66) (block "loop_var_172" false)) (= (> "loop_var_172" "loop_var_172") (let ((y -64) (c false)) false)) (< (+ "loop_var_172" "loop_var_172") (our_code_starts_here 19 true false true false)))))))))) (let ((g (let ((i (- 73 (let ((h (let ((y (let ((loop_var_123 5)) (loop (if (> loop_var_123 (- 5 123)) (block (set! loop_var_123 (- loop_var_123 1)) -30) (break 34))))) (i "y")) (let ((loop_var_97 -95)) (loop (if (< loop_var_97 (+ -95 97)) (block (set! loop_var_97 (+ loop_var_97 1))) (break "loop_var_97"))))))) (let ((y (block "h" "h")) (a (let ((x "h") (y "y") (g true)) "g"))) (* -2 62))))) (d (set! i (block (<= (let ((loop_var_185 "i")) (loop (if (< loop_var_185 (+ "i" 185)) (block (set! loop_var_185 (+ loop_var_185 1)) (set! i "i") (set! i 84) 9 7) (break "i")))) (add1 "i")) (block (let ((loop_var_130 "i")) (loop (if (> loop_var_130 (- "i" 130)) (block (set! loop_var_130 (- loop_var_130 1)) 73 "i" "i") (break "loop_var_130")))) (let ((h "i") (b "i")) false) (* 26 "i")) (+ (let ((b true)) 66) (block -58)) (* (let ((f false) (i -41) (z true)) -65) (block -55 true "i"))))) (f (let ((loop_var_83 (add1 "i"))) (loop (if (< loop_var_83 (+ (add1 "i") 83)) (block (set! loop_var_83 (+ loop_var_83 1))) (break -76)))))) (let ((d (add1 (- (block false 61 true false 41) (block "f")))) (x (let ((i (block (let ((c true)) 5) (> "f" -83) (block false true "d" "f" false) (let ((c "f") (x true) (d "c")) "c"))) (z (sub1 (- "i" -69)))) (- (sub1 93) (+ -47 "z"))))) (let ((j "d") (c (let ((loop_var_34 "x")) (loop (if (< loop_var_34 (+ "x" 34)) (block (set! loop_var_34 (+ loop_var_34 1)) (set! d -99) (set! d -38) "i" 35 -66) (break 54))))) (y false)) (< (set! i "x") (let ((loop_var_48 -89)) (loop (if (< loop_var_48 (+ -89 48)) (block (set! loop_var_48 (+ loop_var_48 1)) (set! i "c") (set! i "d")) (break "loop_var_48"))))))))) (d (= false (isbool (= (let ((e (block 12 true 47)) (c (let ((loop_var_178 "e")) (let ((loop_var_50 "e")) (loop (if (< loop_var_50 (+ "e" 50)) (block (set! loop_var_50 (+ loop_var_50 1))) (break "g")))))) (b (block "e" -72 -95))) (our_code_starts_here 72 false false true false)) (if (let ((loop_var_43 95)) (loop (if (> loop_var_43 (- 95 43)) (block (set! loop_var_43 (- loop_var_43 1))) (break "g")))) (let ((loop_var_134 52)) (let ((loop_var_172 86)) (loop (if (< loop_var_172 (+ 86 172)) (block (set! loop_var_172 (+ loop_var_172 1)) 26) (break "loop_var_172"))))) (set! g 13))))))) (block (- (- 62 (let ((j (<= -86 77))) (- 41 11))) (- (- -91 (let ((c 56) (e "c") (d true)) "c")) (block (let ((loop_var_31 -36)) (let ((loop_var_34 74)) (loop (if (< loop_var_34 (+ 74 34)) (block (set! loop_var_34 (+ loop_var_34 1)) 61 -29 66) (break -90))))) (add1 -37)))) (block (let ((h (let ((loop_var_155 71)) (loop (if (> loop_var_155 (- 71 155)) (block (set! loop_var_155 (- loop_var_155 1)) -9 -56 -42) (break "loop_var_155"))))) (f -74)) (let ((j (block -99 -38 false)) (b (- "f" -45)) (g (let ((loop_var_74 "f")) (let ((loop_var_101 "h")) (loop (if (< loop_var_101 (+ "h" 101)) (block (set! loop_var_101 (+ loop_var_101 1)) 42 46 -93) (break -53))))))) (set! g true))) (< (let ((loop_var_60 -100)) (loop (if (< loop_var_60 (+ -100 60)) (block (set! loop_var_60 (+ loop_var_60 1)) (set! d -48) (set! d 30) (set! d 41)) (break 53)))) (sub1 (* 11 -93)))))) (let ((z (+ (+ (block (+ (add1 23) (+ -25 27))) (block (block (sub1 -61)) (let ((d (let ((g -16)) "g"))) (block "d" 37 "d" false 57)) (block (>= -47 -96) (let ((x false)) 67)) (= 31 -97) (let ((loop_var_113 -3)) (loop (if (> loop_var_113 (- -3 113)) (block (set! loop_var_113 (- loop_var_113 1)) 68 -13) (break "loop_var_113")))))) (sub1 (let ((z (let ((loop_var_180 -98)) (let ((loop_var_153 9)) (let ((loop_var_160 60)) (loop (if (> loop_var_160 (- 60 160)) (block (set! loop_var_160 (- loop_var_160 1)) false false true) (break true))))))) (d (isnum (<= 31 -57)))) (* (if false -55 44) (let ((loop_var_191 81)) (loop (if (< loop_var_191 (+ 81 191)) (block (set! loop_var_191 (+ loop_var_191 1))) (break "loop_var_191"))))))))) (h (let ((loop_var_118 (let ((c false) (f false) (x "f")) -1))) (let ((loop_var_40 (let ((h "z")) -66))) (loop (if (> loop_var_40 (- (let ((h "z")) -66) 40)) (block (set! loop_var_40 (- loop_var_40 1))) (break (+ (+ (- "z" "z") (let ((b true) (a "loop_var_40") (d "b")) 17)) (+ (- "z" "z") (* 44 "z")))))))))) (+ "h" (+ (block (let ((loop_var_115 "z")) (loop (if (< loop_var_115 (+ "z" 115)) (block (set! loop_var_115 (+ loop_var_115 1))) (break false)))) (block (block true false) (let ((loop_var_104 -50)) (loop (if (< loop_var_104 (+ -50 104)) (block (set! loop_var_104 (+ loop_var_104 1))) (break false)))) (* 49 33) (set! z -90)) (block (* "h" 97) (sub1 "h") (isnum true) (- "h" -10) (<= "h" "h")) (our_code_starts_here (+ -11 97) (> "z" "h") (let ((loop_var_163 100)) (loop (if (> loop_var_163 (- 100 163)) (block (set! loop_var_163 (- loop_var_163 1)) (set! z true)) (break true)))) (= "h" "h") true)) (+ (* (* -34 41) (block 77 false -2 "z")) (- (let ((loop_var_94 -84)) (loop (if (> loop_var_94 (- -84 94)) (block (set! loop_var_94 (- loop_var_94 1))) (break "loop_var_94")))) (block -65 90 26 96 3))))))) (let ((i (* (* (- (let ((g (block (> 18 -58))) (e (let ((a (add1 -83)) (g (set! g -93)) (y (let ((b "g") (e -15) (y "a")) input))) (let ((h false) (x true)) "g")))) (let ((loop_var_187 -64)) (loop (if (< loop_var_187 (+ -64 187)) (block (set! loop_var_187 (+ loop_var_187 1)) (set! e 85) (set! e 66) -10 -60) (break "loop_var_187"))))) (let ((i (if (block -53 -64 21 false) (let ((loop_var_81 -55)) (loop (if (< loop_var_81 (+ -55 81)) (block (set! loop_var_81 (+ loop_var_81 1))) (break true)))) true))) (our_code_starts_here (our_code_starts_here -3 true "i" true "i") "i" (fun7 -81 "i" 54 "i" "i") (block -50 "i" -94 true) (= -86 -16)))) (let ((loop_var_45 (let ((h false) (x 99) (e 51)) -31))) (loop (if (< loop_var_45 (+ (let ((h false) (x 99) (e 51)) -31) 45)) (block (set! loop_var_45 (+ loop_var_45 1))) (break (let ((f (<= "loop_var_45" -80))) (let ((j true) (h true)) 80))))))) (block (let ((loop_var_98 (if false -68 40))) (loop (if (< loop_var_98 (+ (if false -68 40) 98)) (block (set! loop_var_98 (+ loop_var_98 1)) (our_code_starts_here (let ((g true) (x 74)) "x") (isbool false) (let ((b -30) (a -57) (f true)) "f") (< -33 67) (let ((z true)) true)) (let ((z (block 82 -66 -47 -63))) (let ((b true) (z "z") (x false)) 21))) (break (set! loop_var_98 (our_code_starts_here "loop_var_98" false false true false))))))))) (f (let ((loop_var_190 (let ((h false) (f "i") (x "i")) "x"))) (let ((loop_var_97 (let ((a "i")) "a"))) (loop (if (< loop_var_97 (+ (let ((a "i")) "a") 97)) (block (set! loop_var_97 (+ loop_var_97 1)) (+ (let ((y (let ((h (sub1 "i")) (i (add1 -55)) (z (let ((j 70) (h "i")) -8))) (block -70)))) (our_code_starts_here (let ((j "i") (b false) (g "j")) "g") (let ((j "i") (e -27) (c true)) false) (isnum true) (block 97 false true false) (let ((b -57)) true))) (if (- (set! i 28) (block -32 47 53 7)) (set! i (- "i" 5)) (let ((c (* "i" "i")) (b (if "c" true false)) (h (< 22 73))) (set! c 67)))) (let ((i (block (isnum false))) (a false) (f (set! a (= (block false) (let ((a "i")) "a"))))) (sub1 (- (block "i" -46 "i") (- "i" "i")))) (set! i (add1 (let ((j (> -55 -16)) (h (= "i" 45))) (let ((g "i") (z false) (e -2)) "e"))))) (break (* (- (our_code_starts_here (set! loop_var_97 -24) (let ((j false) (e -100) (c "j")) "j") (set! i true) (isbool true) (if 7 true true)) (block (fun8 "i" false "i" "i" false false true) (block -99 true input "loop_var_97") (let ((i "i") (g false) (e -88)) false) (= 62 62) (set! loop_var_97 99))) (- (add1 (let ((y false) (f "loop_var_97")) "f")) (block (let ((d input) (z false) (f -70)) "i") (block 60 false) "loop_var_97"))))))))) (x (set! i (block (block (> (sub1 (+ -33 69)) (block (isbool true) -31))) (block (+ (- (block "i" false -13) (sub1 "f")) 49) (let ((d true)) (isnum (set! i true)))) (isnum false) (let ((i (* (- "i" (let ((f false) (g "f") (h "f")) "f")) (* (let ((loop_var_168 -22)) (let ((loop_var_6 -26)) (let ((loop_var_181 -92)) (loop (if (< loop_var_181 (+ -92 181)) (block (set! loop_var_181 (+ loop_var_181 1)) "i" -74) (break "loop_var_181")))))) (* -43 0)))) (c (* (let ((loop_var_108 -98)) (let ((loop_var_140 76)) (loop (if (< loop_var_140 (+ 76 140)) (block (set! loop_var_140 (+ loop_var_140 1)) (set! f 89) (set! i "i") (set! i "i")) (break -65))))) (let ((a (let ((e 60) (a true)) "a")) (d (block true)) (y (let ((loop_var_10 -60)) (loop (if (> loop_var_10 (- -60 10)) (block (set! loop_var_10 (- loop_var_10 1))) (break "a")))))) (set! i "i")))) (y (block (sub1 (let ((g false) (z "c") (j false)) 72)) (let ((loop_var_108 29)) (loop (if (< loop_var_108 (+ 29 108)) (block (set! loop_var_108 (+ loop_var_108 1)) false input false) (break false)))) (let ((loop_var_48 "c")) (let ((loop_var_4 28)) (loop (if (> loop_var_4 (- 28 4)) (block (set! loop_var_4 (- loop_var_4 1)) (set! i -25) -5) (break -15))))) (block (<= 70 "c") (block 90 true) (- "i" "c") (let ((b "f")) 35)) (block (block false "c" true) (block input) "c" (let ((loop_var_112 29)) (let ((loop_var_190 -38)) (loop (if (> loop_var_190 (- -38 190)) (block (set! loop_var_190 (- loop_var_190 1)) true true false) (break false))))) (set! c "f"))))) (let ((f (block (let ((loop_var_2 "i")) (loop (if (> loop_var_2 (- "i" 2)) (block (set! loop_var_2 (- loop_var_2 1)) (set! f -48) (set! i -90)) (break 52)))) (let ((g "f") (j -64) (h 87)) false) (< -78 -99) (let ((d true)) "d"))) (y (let ((g (+ "f" "i")) (c "c") (a (let ((loop_var_193 "f")) (let ((loop_var_42 "y")) (loop (if (< loop_var_42 (+ "y" 42)) (block (set! loop_var_42 (+ loop_var_42 1)) (set! c false) (set! c true)) (break "f"))))))) (isnum "f"))) (a (let ((loop_var_87 25)) (loop (if (< loop_var_87 (+ 25 87)) (block (set! loop_var_87 (+ loop_var_87 1)) (set! i "y") (set! c input) (set! i false)) (break true)))))) 6)) (- (block (<= (let ((d "f") (y false) (e "f")) 83) (let ((loop_var_149 "i")) (loop (if (> loop_var_149 (- "i" 149)) (block (set! loop_var_149 (- loop_var_149 1)) (set! i 53) (set! i 60) (set! i 73) 11 "f" "f") (break -2))))) (let ((h (let ((c true) (b "i")) false))) (>= "f" "f")) (add1 (set! f 24)) (let ((z (let ((x true)) 30)) (x false)) (let ((g "z") (z "z")) -14))) (let ((c (let ((x (our_code_starts_here -15 false false false true))) (let ((i 65)) -52)))) (let ((loop_var_134 "c")) (loop (if (< loop_var_134 (+ "c" 134)) (block (set! loop_var_134 (+ loop_var_134 1)) (set! f -48) (set! c "i") (set! i "f") "c" "f" 11) (break 94)))))))))) (let ((loop_var_8 (set! f "x"))) (loop (if (< loop_var_8 (+ (set! f "x") 8)) (block (set! loop_var_8 (+ loop_var_8 1)) (set! f (block (add1 (block false (let ((z input)) "i"))) (let ((z (let ((c (>= "f" "f")) (j (set! c "f"))) "c"))) (isbool (set! x false))) "i" (set! x (let ((i (block 1 true false true -27)) (z (block -1 "i" 12 false))) "z")) (+ (block (let ((i "x") (d true)) -6)) (block (set! x input) (block -81 "i" "i" -79 "x"))))) (set! x (let ((a (= (let ((d (sub1 "f")) (z (set! d -4)) (e (* 62 "d"))) (set! x 31)) (set! x -21))) (c (isbool (let ((y (* 50 "x"))) (let ((x "x")) "a")))) (j (> (set! i (let ((z "c") (j true)) -42)) 20))) (* (let ((a (let ((b "c") (x 73) (c true)) false)) (h (= "c" true))) (add1 -5)) (block (isnum false) (block true) (let ((g true) (j false) (b "f")) -34)))))) (break (block 49 (our_code_starts_here (block 41 (let ((a 50)) -19) (< -87 "x") -36 -76) (> (add1 "x") (let ((i true) (h false)) -59)) (block true (let ((g -21) (z false) (c "f")) false) (fun4 -7 -24) (block false "f" "loop_var_8" false)) (block (let ((i -19)) input) true (block 83 "f" false false)) false) (* (sub1 (- 17 "loop_var_8")) (- "x" (let ((g true) (z "g") (d "f")) -46))) (if (isnum false) (set! loop_var_8 (+ 7 75)) (let ((i (> "f" -61)) (x (block -71 false)) (z "f")) (- "z" "f"))))))))))