(fun (our_code_starts_here energy y e z f d x h) (if (<= energy 0) -38 (block (set! energy (- energy 1)) (+ (block (block (block 5 "z" false) (= true false) (> 97 "energy") (set! d true)) 5 (+ (block true -8 32) (let ((c false) (e "energy")) "h")) (add1 (let ((a "z") (i -99) (j -64)) 13))) (* (block (block "z" 93) (* 67 39) (- "x" "f") (* 10 "f")) "energy")))))
(fun (main energy e x) (if (<= energy 0) true (block (set! energy (- energy 1)) (= (block (= (set! x 80) (* "energy" -8)) (- -10 (set! x -26))) (let ((h (isbool true))) (let ((f (+ "energy" "energy"))) (+ -49 10)))))))
(fun (fun1 energy e y f c x) (if (<= energy 0) false (block (set! energy (- energy 1)) (< (set! f (* -96 16)) (let ((c (let ((e (let ((h 57) (j false) (g 76)) true))) (let ((c "x") (a "e")) "energy"))) (i (< (+ 45 "c") (* "c" "e")))) (- (block 78) (block -63)))))))
(fun (fun2 energy z x j e h i d c) (if (<= energy 0) 88 (block (set! energy (- energy 1)) (add1 (- (add1 (fun6 78 "i" "d" "h" -79 true)) "z")))))
(fun (fun3 energy f) (if (<= energy 0) false (block (set! energy (- energy 1)) (> (block (set! f (+ -42 -50)) "f") (let ((h (isbool (let ((a "f") (d false)) "d"))) (a (block (set! energy "f") (sub1 "energy")))) (set! h (if false "a" -40)))))))
(fun (fun4 energy d e x c g j) (if (<= energy 0) -72 (block (set! energy (- energy 1)) (- "g" (block (= (our_code_starts_here -1 true "j" -43 false "x" -88 29) (block true -6 "g" "g" "d")) "j" (- (sub1 93) (- "x" 76)) (block true (= true "c") (- "d" "g")))))))
(fun (fun5 energy y a f e b) (if (<= energy 0) false (block (set! energy (- energy 1)) "b")))
(fun (fun6 energy a z c g j) (if (<= energy 0) -46 (block (set! energy (- energy 1)) (* (let ((a (block (let ((b "c") (x false)) 94) (> "energy" -39) (- -47 "j") (let ((c "g")) true))) (y "j") (d (fun2 (block false "c" true -69 24) (let ((c -70) (b "c") (h 97)) "z") (set! a "a") (let ((e "c")) "z") (block "y" "a" 54 27) (let ((g "j") (d true) (c "z")) true) (isnum "a") (fun2 2 false true "a" "energy" "a" "z" 46 -53) (+ "a" 6)))) (let ((f (set! c "d")) (d (< "y" -23)) (a (let ((b "f") (g "a") (x "g")) "a"))) "g")) (let ((e (let ((j (+ "energy" 76)) (f "a") (d (isbool "c"))) (set! j "z"))) (b 64) (d (set! c (set! j "energy")))) (set! j (let ((y "a")) "y")))))))
(fun (fun7 energy e) (if (<= energy 0) -90 (block (set! energy (- energy 1)) "energy")))
(fun (fun8 energy a i b x d) (if (<= energy 0) 83 (block (set! energy (- energy 1)) "a")))
(= (sub1 (- (let ((c (let ((a (let ((loop_var_100 (if 82 -98 67))) (loop (if (< loop_var_100 (+ (if 82 -98 67) 100)) (block (set! loop_var_100 (+ loop_var_100 1))) (break (fun1 93 -86 60 "loop_var_100" false -6))))))) (fun5 (add1 -74) (let ((a (isbool "a")) (f (- 73 -55))) (block "f" "f" "a" true true)) (> (let ((loop_var_52 -20)) (loop (if (< loop_var_52 (+ -20 52)) (block (set! loop_var_52 (+ loop_var_52 1))) (break -61)))) (- -61 -74)) (let ((a (add1 89))) (- "a" "a")) (set! a (let ((j "a")) "a")) (let ((j (isnum true))) (let ((z "j")) true))))) (h (* (let ((loop_var_126 (block "c"))) (loop (if (> loop_var_126 (- (block "c") 126)) (block (set! loop_var_126 (- loop_var_126 1)) (set! c (- -78 "c")) (set! c (fun4 "c" true -62 false "c" false "c")) (set! c (* "c" 24)) (let ((j false) (x true) (c "j")) "c") (block false false 45 "c") "c") (break "c")))) (let ((a (+ (+ 4 "c") (sub1 -95))) (f (* (let ((y false) (j "y") (b false)) 2) (let ((loop_var_114 "c")) (loop (if (> loop_var_114 (- "c" 114)) (block (set! loop_var_114 (- loop_var_114 1)) (set! c 17) (set! c "a") (set! c "c")) (break "loop_var_114")))))) (x (block (fun1 "f" "a" "f" 23 false "a")))) (let ((e (- 41 "f")) (b (block -54 "a" false false))) (- "f" 34))))) (d (block (sub1 (set! c (let ((y false)) input)))))) (add1 (set! h (block true (let ((loop_var_191 "h")) (loop (if (> loop_var_191 (- "h" 191)) (block (set! loop_var_191 (- loop_var_191 1))) (break "c")))) (let ((a false)) "a") (+ "c" 94))))) (let ((loop_var_61 (- 66 23))) (let ((loop_var_123 (if true 59 42))) (loop (if (> loop_var_123 (- (if true 59 42) 123)) (block (set! loop_var_123 (- loop_var_123 1))) (break (let ((c (set! loop_var_123 (let ((y -27)) "loop_var_123")))) (set! c (set! c "c")))))))))) (let ((c (let ((c (isbool (let ((e (* (let ((y (let ((i false)) "i"))) (let ((z -34)) "z")) (let ((j (block false 46 true true -99)) (e (let ((j true) (y -66)) false))) (set! e 2)))) (f (if (- (+ "e" "e") (let ((j "e") (f "e") (a true)) "j")) (let ((c (let ((loop_var_192 "e")) (let ((loop_var_42 34)) (let ((loop_var_23 "e")) (loop (if (< loop_var_23 (+ "e" 23)) (block (set! loop_var_23 (+ loop_var_23 1)) (set! e "e")) (break 81))))))) (j (let ((loop_var_74 -16)) (let ((loop_var_143 "c")) (let ((loop_var_99 "c")) (loop (if (< loop_var_99 (+ "c" 99)) (block (set! loop_var_99 (+ loop_var_99 1)) input -64 -21) (break -63))))))) (y (block false -45 false false))) (block input 59 -2)) (block true (block -89 80) (let ((loop_var_59 "e")) (loop (if (> loop_var_59 (- "e" 59)) (block (set! loop_var_59 (- loop_var_59 1))) (break "e")))) (let ((z 71) (a "z")) "a"))))) (block (+ (+ 16 "e") (+ 61 "e")) "f" (let ((h "e") (c (= false true))) (block "c" "c" "h")) (if input (= true false) (> -7 "f"))))))) (>= (* (let ((d (+ (block 46 61 -98) (let ((loop_var_43 -2)) (loop (if (< loop_var_43 (+ -2 43)) (block (set! loop_var_43 (+ loop_var_43 1)) (set! c -93) (set! c -50)) (break "loop_var_43")))))) (c (add1 (add1 -94)))) (let ((b (set! c false)) (a (let ((loop_var_131 "d")) (loop (if (> loop_var_131 (- "d" 131)) (block (set! loop_var_131 (- loop_var_131 1))) (break "c"))))) (g (let ((a "a")) true))) "d")) (* (let ((loop_var_64 71)) (loop (if (< loop_var_64 (+ 71 64)) (block (set! loop_var_64 (+ loop_var_64 1)) (set! c -83) (set! c -48)) (break 70)))) (add1 (let ((y 94) (j "c") (x -75)) "x")))) (let ((g (let ((loop_var_164 (let ((y -53) (g false)) "y"))) (loop (if (> loop_var_164 (- (let ((y -53) (g false)) "y") 164)) (block (set! loop_var_164 (- loop_var_164 1)) (set! c (set! c "c"))) (break (isbool true)))))) (c (= (if (if false false false) (block 24) (+ -72 -88)) (block (block "c" false true false input) (+ -14 input))))) (let ((h (block (let ((a true)) "a") (isbool "g") (block "c" "c" false false) (>= -30 25))) (i (let ((j (let ((d 92) (e 95) (f 41)) input)) (h "j") (g (block "c"))) (let ((h "c")) "c")))) (let ((j (let ((loop_var_127 -44)) (loop (if (> loop_var_127 (- -44 127)) (block (set! loop_var_127 (- loop_var_127 1)) (set! i "h")) (break "c"))))) (d (sub1 41)) (b (block "d" true "i"))) (sub1 -3)))))))) (let ((f (= (let ((y (let ((j (< (* 17 -100) (* -59 -39))) (e (let ((loop_var_130 81)) (let ((loop_var_190 40)) (loop (if (> loop_var_190 (- 40 190)) (block (set! loop_var_190 (- loop_var_190 1)) (set! c "j") (set! j true) (set! j "j")) (break "j")))))) (z -40)) (let ((z true) (d (let ((x 84) (d false)) "j")) (x (> -38 "z"))) (let ((e true)) "e")))) (z (let ((a (< (let ((loop_var_34 -9)) (loop (if (> loop_var_34 (- -9 34)) (block (set! loop_var_34 (- loop_var_34 1))) (break 99)))) (block 60 53 "y" input 25))) (x (< (add1 -40) -5)) (g (let ((loop_var_14 -52)) (loop (if (> loop_var_14 (- -52 14)) (block (set! loop_var_14 (- loop_var_14 1)) (set! a -21) (set! y -49) 12) (break "loop_var_14")))))) (let ((x (< -64 29))) (block "g" "c" "g" false "c"))))) (isnum "y")) (if (+ (let ((z (+ -69 input))) (* "z" -47)) (+ (+ -17 29) input)) (>= (let ((loop_var_165 28)) (let ((loop_var_191 -12)) (loop (if (> loop_var_191 (- -12 191)) (block (set! loop_var_191 (- loop_var_191 1)) (set! c 42) (set! c 78)) (break -81))))) (sub1 (add1 -55))) (set! c (block 34 (let ((i "c") (f "i")) "f")))))) (h (block (block (+ (block (+ 38 -1) (+ 28 input) (sub1 -80)) (let ((loop_var_82 -28)) (let ((loop_var_7 -13)) (loop (if (> loop_var_7 (- -13 7)) (block (set! loop_var_7 (- loop_var_7 1)) (set! f 96)) (break "loop_var_7")))))) (< 99 (block (let ((y 2) (g "y") (h false)) "h") -28)) (let ((j (+ (set! c input) (add1 48))) (a (+ (block input "j") (fun6 "j" false true "j" "j" "c"))) (f (block (let ((loop_var_12 -89)) (loop (if (> loop_var_12 (- -89 12)) (block (set! loop_var_12 (- loop_var_12 1)) (set! a -96) (set! j -36)) (break input)))) (let ((f -92) (h "f") (c "c")) "c") (let ((f true)) false) (let ((loop_var_91 -26)) (loop (if (> loop_var_91 (- -26 91)) (block (set! loop_var_91 (- loop_var_91 1)) 40 42) (break -60))))))) -45)) "c")) (g -41)) (set! g false))))