(fun (our_code_starts_here energy) (if (<= energy 0) -96 (block (set! energy (- energy 1)) "energy")))
(fun (main energy) (if (<= energy 0) false (block (set! energy (- energy 1)) (> (let ((h (let ((y (our_code_starts_here "energy")) (j (add1 -13))) (>= "j" -96))) (z (+ (+ -77 "energy") (our_code_starts_here -61))) (b (> (let ((e false) (x false) (a "energy")) -57) (sub1 "z")))) (set! h (block "z" false -56 "energy"))) (block (block (block "energy" "energy") (< "energy" "energy")) (* (+ -18 70) (block true false -73 -91)) (* (set! energy 50) (let ((i false) (h false)) -30)) (+ (+ "energy" 65) (+ -50 -97)))))))
(if (our_code_starts_here (block (sub1 (our_code_starts_here (- (sub1 30) (let ((f (< 55 78)) (c (set! f true)) (j -3)) (our_code_starts_here "j"))))))) (let ((e true) (b (let ((c (let ((b (if (let ((loop_var_159 (set! e 34))) (let ((loop_var_189 (add1 -97))) (loop (if (> loop_var_189 (- (add1 -97) 189)) (block (set! loop_var_189 (- loop_var_189 1)) (if true "e" true)) (break (isnum "e")))))) (let ((g 23)) (main (sub1 -90))) (let ((loop_var_51 (let ((i false)) 11))) (let ((loop_var_117 (block -60))) (loop (if (< loop_var_117 (+ (block -60) 117)) (block (set! loop_var_117 (+ loop_var_117 1)) (main 33) (let ((e false)) "e")) (break "e"))))))) (z (= (let ((loop_var_106 (block 11 33))) (let ((loop_var_101 (add1 24))) (loop (if (> loop_var_101 (- (add1 24) 101)) (block (set! loop_var_101 (- loop_var_101 1))) (break (- "loop_var_101" 43)))))) (let ((loop_var_22 (block false false -19 false 77))) (let ((loop_var_12 16)) (let ((loop_var_55 (let ((b -83)) 47))) (loop (if (> loop_var_55 (- (let ((b -83)) 47) 55)) (block (set! loop_var_55 (- loop_var_55 1)) (let ((i 23)) "i")) (break (- -81 -86))))))))) (e (= (let ((loop_var_159 (let ((c -33) (d "e") (a "c")) "c"))) (let ((loop_var_58 (block -8 true 92))) (loop (if (> loop_var_58 (- (block -8 true 92) 58)) (block (set! loop_var_58 (- loop_var_58 1)) (let ((c -85) (e 20)) "e") -14 (sub1 -71)) (break (let ((b -64) (f -97) (c "b")) -90)))))) (* (+ (let ((z -93) (b "z")) 63) (add1 60)) (- (block true true "e" 54) (our_code_starts_here 39)))))) (let ((a (set! e (let ((c (add1 -67)) (i (let ((x 99)) 54))) (- 1 "i")))) (j (<= (let ((loop_var_90 62)) (loop (if (< loop_var_90 (+ 62 90)) (block (set! loop_var_90 (+ loop_var_90 1)) -56 26 32) (break 10)))) (block (let ((g "e") (h "g") (f "e")) true) (let ((loop_var_17 "a")) (let ((loop_var_143 4)) (loop (if (> loop_var_143 (- 4 143)) (block (set! loop_var_143 (- loop_var_143 1))) (break false))))) (sub1 -34) (let ((g -74)) "g") (set! z "a"))))) (block (set! b (add1 96)) (let ((g (let ((b 64) (y false) (z true)) "a")) (y (set! e "e"))) (if "b" "a" 65)) (block (= 39 "a") (- -87 -42) (block true 73 false "a" false))))))) (let ((loop_var_49 -33)) (let ((loop_var_3 34)) (loop (if (> loop_var_3 (- 34 3)) (block (set! loop_var_3 (- loop_var_3 1)) (set! e (= (let ((g 10) (z (isnum true))) (if input -45 "g")) (block (= 31 19) (let ((b 35) (d "c")) "b") (* -60 47))))) (break (let ((a (+ (let ((b true)) -75) (let ((z "loop_var_3") (h true)) 4)))) "e")))))))) (g (sub1 81))) (let ((x (block (let ((x (let ((b (block -91 (let ((f "b") (h "g") (z true)) "f")))) (isnum (block -37 "e")))) (z (let ((x (+ 47 (let ((loop_var_148 60)) (loop (if (> loop_var_148 (- 60 148)) (block (set! loop_var_148 (- loop_var_148 1)) (set! x "g") (set! b "g")) (break "loop_var_148")))))) (d (block (+ 99 62))) (h (let ((z (<= 72 "d")) (b (block 40 -75 -82)) (d (block "d" "b" "b" input "d"))) (let ((d "x")) true)))) (block (add1 -20) (block false false false) (< "d" "g") (sub1 "x") false)))) (< (* "g" (* "g" "g")) (+ (let ((loop_var_66 "g")) (loop (if (> loop_var_66 (- "g" 66)) (block (set! loop_var_66 (- loop_var_66 1))) (break -89)))) (set! e -83)))))) (i (- "g" (let ((loop_var_32 (* 79 "g"))) (let ((loop_var_110 (add1 "g"))) (loop (if (> loop_var_110 (- (add1 "g") 110)) (block (set! loop_var_110 (- loop_var_110 1)) (set! g "g") (set! e (set! g (let ((d 9) (i 52)) 0))) (set! x (block (block "g" 86 "b") (add1 -63) (our_code_starts_here 32))) "g") (break (if (+ 70 84) (let ((e true) (z 90)) -16) (* 51 99))))))))) (j (let ((z (sub1 (let ((loop_var_141 (let ((j "e")) "g"))) (loop (if (> loop_var_141 (- (let ((j "e")) "g") 141)) (block (set! loop_var_141 (- loop_var_141 1)) (set! b (let ((x "g")) "i"))) (break (let ((z "x")) 2))))))) (a (* (let ((loop_var_3 (let ((b 46)) 25))) (let ((loop_var_89 (if "e" 3 "g"))) (loop (if (> loop_var_89 (- (if "e" 3 "g") 89)) (block (set! loop_var_89 (- loop_var_89 1)) (set! g (let ((c false)) -89))) (break (+ "z" 90)))))) (let ((d (block (let ((loop_var_167 "i")) (loop (if (> loop_var_167 (- "i" 167)) (block (set! loop_var_167 (- loop_var_167 1))) (break -84)))) (block input 30 99) (let ((loop_var_149 91)) (loop (if (< loop_var_149 (+ 91 149)) (block (set! loop_var_149 (+ loop_var_149 1)) (set! g true) (set! g true)) (break "x")))) (let ((b "g")) "x"))) (f (let ((d "g")) (let ((i 37) (a "d") (d "e")) "d")))) 25))) (i (let ((loop_var_37 (+ 63 45))) (let ((loop_var_33 (sub1 "z"))) (loop (if (> loop_var_33 (- (sub1 "z") 33)) (block (set! loop_var_33 (- loop_var_33 1)) (set! z "x") (set! x (block (set! i "b"))) (set! a (block (let ((y -40) (x 81)) "y") (set! e false)))) (break (= (block 70 input "b" "g") (let ((z 93)) 79))))))))) (isnum (let ((j (= (block 10 "i" -94 -36 "b") (let ((i "i") (y input) (e "b")) true))) (b (>= (let ((h true)) 32) (let ((z false) (i false)) -91)))) (< (* "z" -37) (let ((h -65)) -87))))))) (block (isbool (block (block (sub1 "i") (let ((i true) (j "g") (z "j")) "z") false) (= (let ((a false)) "g") "x") 56))))) (<= 87 (let ((loop_var_30 (block false -35 true false 1))) (loop (if (< loop_var_30 (+ (block false -35 true false 1) 30)) (block (set! loop_var_30 (+ loop_var_30 1)) (our_code_starts_here (block (let ((h (if -7 66 33)) (y (- "h" -16))) (let ((d "h") (j -17)) 49)))) (* (add1 (let ((c (= 84 -95))) (let ((h "c") (x true)) -86))) (our_code_starts_here (block (< 82 97) (let ((c true)) false) (* 7 -57)))) (if false (* (our_code_starts_here (let ((a true)) 16)) (- (let ((a false)) 50) (our_code_starts_here 12))) (our_code_starts_here 32))) (break (- -42 (- (let ((a 64)) (* -49 "a")) (set! loop_var_30 (+ "loop_var_30" "loop_var_30"))))))))))