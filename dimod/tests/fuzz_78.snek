(fun (our_code_starts_here energy e a) (if (<= energy 0) 71 (block (set! energy (- energy 1)) (block (add1 (set! a (add1 -20))) "a" (our_code_starts_here (add1 (block 20 "energy" "energy")) (let ((j (set! a 30)) (g (set! j false))) false) (set! energy (block 39 "a" 10 "e" false))) (= (add1 (sub1 -66)) -96) (+ (block (+ 70 -61)) (let ((i "a") (b (block "a" -2 "e" true))) (let ((d true)) "e")))))))
(fun (main energy e z a) (if (<= energy 0) false (block (set! energy (- energy 1)) (set! e (let ((z (let ((e (>= "energy" -22))) false)) (d (if (= "e" "a") (let ((e -15) (y true)) "z") (let ((d true) (j 6) (f false)) "z"))) (x (set! z (let ((x -10)) "d")))) (block (let ((a "x")) false) (main -35 false "e" "e") (block -10 -94 "d" "z")))))))
(fun (fun1 energy j g i e z d x) (if (<= energy 0) true (block (set! energy (- energy 1)) (block (let ((h (add1 (set! g -80))) (f (- (add1 67) (block 46 false "i" true -33)))) (let ((g (set! f "z")) (y (add1 "j")) (x (- 50 "h"))) (* "energy" -81))) (+ (let ((j (- "j" 19)) (c (set! d "g"))) (- 11 38)) (let ((d (> "energy" 25)) (g "energy")) (block false "d" -48 "j" "g"))) (<= (* (block "z" "e" true false "i") (* "j" "energy")) (let ((j (set! i "j"))) (fun2 -9 -75))) (<= (sub1 (- -28 20)) (set! energy (set! z "energy")))))))
(fun (fun2 energy b) (if (<= energy 0) 29 (block (set! energy (- energy 1)) (block (<= (let ((a (* 66 62)) (y (* 32 "b")) (j true)) (block "y" "j" 40 "b" "energy")) (set! b (- -95 49))) "energy"))))
(fun (fun3 energy b h d f c j) (if (<= energy 0) 8 (block (set! energy (- energy 1)) (sub1 (block (if "j" (isnum false) (let ((h "b") (z 13)) "f")) (block (block "f" "b") (+ "j" "b") false (let ((h false) (j false)) false) -72))))))
(fun (fun4 energy c) (if (<= energy 0) false (block (set! energy (- energy 1)) true)))
(fun (fun5 energy f j b) (if (<= energy 0) true (block (set! energy (- energy 1)) (isnum (= (let ((i (let ((d -56)) "d")) (y "f")) (isbool "j")) (let ((a true) (y (= -94 21))) (let ((b 48) (z false)) true)))))))
(> (let ((a true) (y (block (block (block (- (let ((i (* 35 76)) (j (let ((loop_var_189 "i")) (let ((loop_var_54 "i")) (loop (if (< loop_var_54 (+ "i" 54)) (block (set! loop_var_54 (+ loop_var_54 1))) (break "i"))))))) (block "a" "i" 30)) (let ((loop_var_162 -42)) (loop (if (> loop_var_162 (- -42 162)) (block (set! loop_var_162 (- loop_var_162 1)) 4 83) (break 51)))))) (block (add1 (- (let ((h "a")) 54) (block -90 false 37))) (block (add1 (add1 33)) (block (= 26 23) (let ((loop_var_191 64)) (let ((loop_var_163 98)) (let ((loop_var_43 64)) (loop (if (> loop_var_43 (- 64 43)) (block (set! loop_var_43 (- loop_var_43 1)) (set! a "a") false false) (break false)))))) (= true "a")) (> (block false 55 -37 "a" -59) (let ((loop_var_110 30)) (let ((loop_var_185 -5)) (loop (if (< loop_var_185 (+ -5 185)) (block (set! loop_var_185 (+ loop_var_185 1))) (break -43)))))))) (block (< (sub1 (block "a" true "a" -4 -42)) (let ((i (let ((h "a") (c false) (y input)) -53)) (d (- 77 "i")) (y (sub1 "i"))) (add1 -89))) (let ((i (- (add1 -44) 22)) (h (let ((c (> 52 -15)) (f (= input "a"))) (block false 71)))) (- 64 (sub1 -3))) (set! a "a") (isbool (let ((h (< -75 -51))) (block -8 14 25 "a")))) "a")))) (set! a (block (let ((c (block (fun2 (let ((loop_var_90 -83)) (loop (if (< loop_var_90 (+ -83 90)) (block (set! loop_var_90 (+ loop_var_90 1)) (set! a 20) (set! a 75) (set! y -97)) (break -19)))) (add1 -10))))) (let ((b (isbool (let ((c "c") (g -89)) "a"))) (i (= (isnum false) (let ((loop_var_90 "c")) (loop (if (< loop_var_90 (+ "c" 90)) (block (set! loop_var_90 (+ loop_var_90 1)) (set! b "b") (set! b input) (set! c false) false true) (break true))))))) (isnum (block input "i"))))))) (block (let ((loop_var_112 (- -45 -77))) (loop (if (< loop_var_112 (+ (- -45 -77) 112)) (block (set! loop_var_112 (+ loop_var_112 1)) (block true)) (break (let ((j (let ((d (< "loop_var_112" (+ -67 "loop_var_112")))) (set! loop_var_112 (block "loop_var_112" "loop_var_112" "loop_var_112" "loop_var_112" "loop_var_112")))) (z (+ (sub1 (add1 -80)) (set! loop_var_112 (+ "j" "loop_var_112"))))) (let ((y (add1 (set! loop_var_112 -56))) (e (block (fun3 84 "loop_var_112" true false false "j" "loop_var_112") (sub1 46)))) (isnum (<= -45 "z")))))))) true (block false (<= (block (>= (+ (- 85 -60) (block 20 true -42 -46)) (let ((f (* -72 -21)) (z (< "f" 47))) (- 50 "f"))) (let ((g (let ((b (let ((loop_var_168 3)) (let ((loop_var_129 -24)) (let ((loop_var_70 63)) (loop (if (> loop_var_70 (- 63 70)) (block (set! loop_var_70 (- loop_var_70 1))) (break true))))))) (z (let ((a "b") (z 53) (j "z")) false)) (f (let ((g -66) (c true)) "c"))) (sub1 37))) (i (block (let ((b "g")) -26) (fun2 "g" "g") (let ((y false)) "g") (let ((b true) (i "b")) false) (>= -24 "g"))) (y (- (let ((z "i")) "g") "g"))) (block (set! i 4) (let ((loop_var_55 "y")) (loop (if (< loop_var_55 (+ "y" 55)) (block (set! loop_var_55 (+ loop_var_55 1)) (set! i "i") (set! y true) (set! i input)) (break true)))) (let ((loop_var_188 "g")) (loop (if (< loop_var_188 (+ "g" 188)) (block (set! loop_var_188 (+ loop_var_188 1)) "i" "i" true) (break "i")))) (block "g")))) -14))))