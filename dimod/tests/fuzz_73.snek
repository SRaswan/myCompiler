(fun (our_code_starts_here energy f d i a y) (if (<= energy 0) 93 (block (set! energy (- energy 1)) (block (- (let ((e 72) (f (set! a 25))) (- -51 "f")) (block (let ((z false) (j -44) (b 95)) "f") (+ "f" 68) (* "f" "a") (sub1 -14))) (let ((b (block (< "energy" 74) (let ((j "i") (z "i") (g "energy")) "j"))) (g (+ 72 (let ((d true)) 21))) (y (= (let ((a -56) (e 39) (i "f")) "b") (<= -86 "energy")))) (>= (+ "g" "g") (block true true 91))) (< (block (set! a "d")) (set! energy (* 63 "d"))) (fun6 (let ((h (set! energy "d")) (z (fun7 "a" "y" "y" 20 "h" false "i")) (d (let ((a "z") (x "f") (i "a")) 44))) (add1 90)) (* (block "a" false "energy") -52) (let ((x (block "y" -81 "y" false 28))) (>= "d" 97)) (isnum (<= -56 "y")) (block (set! i true)) (if (- -29 15) (let ((x "f") (d false)) "a") (+ "a" -7))) -82))))
(fun (main energy d j a) (if (<= energy 0) true (block (set! energy (- energy 1)) (<= (* -2 (block (>= 63 -54) (sub1 "d") (if "d" "a" "a") (> "d" 80) (let ((y "a")) -18))) (* -3 (let ((z "a") (b (* -8 -4)) (e (let ((a "a")) true))) (if false 91 -10)))))))
(fun (fun1 energy f e) (if (<= energy 0) -17 (block (set! energy (- energy 1)) (let ((d (set! e (our_code_starts_here (block "energy" false 63) (block true -32 true false "energy") (isbool true) (let ((j 5) (z true) (f false)) "energy") (block true true "f" -87) (let ((e 3) (f -29) (d "e")) false))))) (let ((h (let ((f (let ((f false) (h false) (y "e")) false)) (x (let ((d "e") (i "f") (h "f")) "energy"))) (* -40 -15))) (e (block (let ((a -54)) "h") (set! f true))) (f (let ((e (+ "energy" 14))) (set! e "e")))) (- (sub1 "h") (* 12 "energy")))))))
(fun (fun2 energy z i h a j e y) (if (<= energy 0) false (block (set! energy (- energy 1)) (= (fun1 (* (- -53 "e") (set! j "j")) (let ((h (let ((a "j") (i false) (j "j")) -22))) (block "energy" -4 3)) (let ((x (block 99 -13 true true)) (d (let ((b false) (d "a")) "d")) (h false)) (* "j" -93))) "e"))))
(fun (fun3 energy g h z b x f c d) (if (<= energy 0) false (block (set! energy (- energy 1)) (set! x "h"))))
(fun (fun4 energy z x) (if (<= energy 0) -17 (block (set! energy (- energy 1)) (set! energy (let ((d (= (* 22 -39) (add1 "z")))) (fun4 (+ 10 "z") (block "d") (>= 96 "energy")))))))
(fun (fun5 energy a f) (if (<= energy 0) 13 (block (set! energy (- energy 1)) (block (fun4 (- (let ((h "f") (d 66)) -27) (- 82 "a")) (block (= false false)) false) (add1 (block (fun4 "a" "f" true)))))))
(fun (fun6 energy e z b x h) (if (<= energy 0) false (block (set! energy (- energy 1)) (>= (block (+ (let ((f -31) (a "energy")) 6) (let ((i "energy") (b "i")) 84)) (<= "z" (block "e" "energy" false "z" "energy")) (fun8 (+ -92 71) (let ((y -92)) 80) (set! h "x") (<= "e" -40) (let ((h false)) "energy") (let ((c "z") (x -7)) -10) (if "energy" "energy" "e") (block "e" -21 "z" false))) (* (+ (let ((b -7)) 43) (if "h" "energy" "energy")) (- (* 32 "z") (- "energy" "energy")))))))
(fun (fun7 energy d y g h i c) (if (<= energy 0) true (block (set! energy (- energy 1)) (>= (add1 (+ (let ((y true) (b false)) "y") (let ((e "c") (y -19) (c -1)) "g"))) (- (let ((h (let ((z "y") (x true)) "c"))) (block false "h" true false "i")) (+ (* 56 73) (set! g 2)))))))
(fun (fun8 energy f a b g y c e) (if (<= energy 0) 80 (block (set! energy (- energy 1)) (let ((b (set! e (+ (set! c 4) (* "y" 61))))) (- (- (sub1 55) (block "g" -28)) (block (+ "c" 29) (block "g" "g" false "b") (block "f" "b")))))))
(fun (fun9 energy g b h x i) (if (<= energy 0) true (block (set! energy (- energy 1)) (= (let ((h (set! b (let ((h false)) 85)))) (let ((y (block false 30 true "i")) (c true) (g (set! i "energy"))) (let ((j true)) "b"))) (add1 (fun8 (block false false true "i" "b") (let ((z "i") (e "x")) "x") (let ((f -10)) false) (isbool "i") (if "h" 47 36) (let ((e "h") (i "energy") (b false)) "g") (* -94 22) "h"))))))
(block (>= 76 (let ((b (if (isnum (block (fun4 (sub1 60) (fun3 -73 false 17 54 -85 -31 -44 false 42) (let ((c true) (g 3)) "c")) (>= (add1 70) (- -3 2)))) (let ((x (let ((loop_var_183 (sub1 99))) (loop (if (> loop_var_183 (- (sub1 99) 183)) (block (set! loop_var_183 (- loop_var_183 1)) (block true false input false true) (let ((d -76)) input)) (break (if false true false))))))) (isnum (isbool (isbool true)))) (block (let ((loop_var_39 -17)) (let ((loop_var_192 (block -39 29))) (let ((loop_var_115 (- -71 84))) (loop (if (> loop_var_115 (- (- -71 84) 115)) (block (set! loop_var_115 (- loop_var_115 1)) false (main 34 true false false) (let ((y false) (e -89)) "y")) (break (block true true))))))) (let ((loop_var_174 (let ((j false)) -45))) (loop (if (< loop_var_174 (+ (let ((j false)) -45) 174)) (block (set! loop_var_174 (+ loop_var_174 1)) (>= -91 -97) (let ((a 39) (f "a") (z "a")) false)) (break true))))))) (a (let ((loop_var_195 (if -48 -18 16))) (loop (if (> loop_var_195 (- (if -48 -18 16) 195)) (block (set! loop_var_195 (- loop_var_195 1)) (set! b (block (* (set! b 58) (- -15 19)) (* (* -73 32) (block 75 23 -76 73 36)) (- (+ -94 -44) (set! b 93)))) (set! b (+ (* (block 2) (let ((j false)) 39)) (+ (set! b -58) (+ 45 83)))) (block (fun5 (- -33 30) (let ((g "b") (c -72)) "b") (block 85 "b" -66 false "b")) (< (+ -36 20) (our_code_starts_here 92 -29 "b" 64 -100 false)) (- (fun8 -38 -42 true false 92 -32 63 true) 90) (let ((i false)) (+ -51 -93)))) (break (let ((x (let ((b (> "loop_var_195" 57))) (- "loop_var_195" "loop_var_195"))) (c (let ((b (block "loop_var_195" false false))) (block -49 "b" "b" "x" true)))) (set! c (- "loop_var_195" "loop_var_195"))))))))) (let ((e (fun6 (block (let ((c (* 86 -44)) (a (block 59 false "a" input))) (- "c" "a"))) (set! b (let ((loop_var_161 6)) (let ((loop_var_18 61)) (loop (if (> loop_var_18 (- 61 18)) (block (set! loop_var_18 (- loop_var_18 1)) (set! a "a") "a" "a" "a") (break "a")))))) (block (main (let ((d 59)) 87) (let ((x "a") (d "b")) "b") (block true -68 true) (>= "a" "a"))) "b" (<= (let ((x (let ((x "b") (b "b")) 15)) (i (* -35 -72))) (block "x")) (+ (block -8 "a" "a" "a") (- "a" "a"))) (* (let ((b (- -23 "a")) (h (let ((loop_var_134 89)) (loop (if (> loop_var_134 (- 89 134)) (block (set! loop_var_134 (- loop_var_134 1)) (set! b "b") (set! b "b") (set! a "b")) (break "b"))))) (c (> -74 -83))) (add1 "h")) (* (let ((i "b")) "a") (let ((loop_var_191 -86)) (loop (if (< loop_var_191 (+ -86 191)) (block (set! loop_var_191 (+ loop_var_191 1)) (set! a 55)) (break "a")))))))) (g 42) (x (< (add1 (block "a" (< 70 51) -46 (* "g" 29) (block "a" false true 87 -8))) (let ((e (block (block true true "a" -59 23) (let ((j "a") (y -28)) false) (block -84 true false -16) (if true true input) "b"))) (let ((f (< "a" "g"))) (block "g")))))) (let ((j (set! x (- (- "g" 62) 8))) (z (block (block (let ((j "e")) "j") (fun4 34 "e" "e") (set! b false))))) (let ((h "g") (a (block (+ -99 "j") (+ 91 -32) (< "h" 38)))) (+ (block false -77 true -1) (add1 -99))))))) (add1 (* (block -36 (let ((b (isbool (let ((z (let ((x 47) (h false)) "x")) (h (let ((d false) (e "z") (x 19)) "d"))) "h")))) (let ((loop_var_68 (let ((h -56) (c "h") (e "c")) "e"))) (let ((loop_var_81 65)) (loop (if (< loop_var_81 (+ 65 81)) (block (set! loop_var_81 (+ loop_var_81 1)) (set! b (add1 68)) (set! b (block 56)) (set! b (block -67 true -54))) (break (set! b "loop_var_81")))))))) (add1 (+ (let ((d (* (let ((loop_var_100 -3)) (loop (if (> loop_var_100 (- -3 100)) (block (set! loop_var_100 (- loop_var_100 1)) 94 -12) (break 25)))) (let ((loop_var_42 -46)) (loop (if (< loop_var_42 (+ -46 42)) (block (set! loop_var_42 (+ loop_var_42 1))) (break "loop_var_42")))))) (z (fun4 (* -21 -27) (let ((f "d") (b false)) true) (let ((j "d") (e "d")) true)))) (+ (let ((y "d") (j "d")) 28) (block false "d" "z" 44 "d"))) (let ((loop_var_152 (add1 -93))) (loop (if (< loop_var_152 (+ (add1 -93) 152)) (block (set! loop_var_152 (+ loop_var_152 1)) (sub1 -52) (our_code_starts_here -26 -87 true -2 68 false)) (break (+ "loop_var_152" "loop_var_152"))))))))) -28 (let ((x (let ((loop_var_50 (if false -94 -59))) (loop (if (> loop_var_50 (- (if false -94 -59) 50)) (block (set! loop_var_50 (- loop_var_50 1)) (let ((y (+ (add1 -3) (let ((a true)) (* -79 74)))) (a (block (<= (block false 36 -19 -44) (add1 -60)) (let ((f (if "y" -42 -77))) false))) (f (let ((e (isbool "a"))) (let ((i (set! y "y")) (y (let ((c -71) (g true) (y "e")) "i"))) (let ((h "e") (j "e")) 50))))) (* (* (* 57 "y") (block "f" "f" -68)) "f")) (* (let ((x (add1 (fun1 45 -55 88))) (i (let ((g (>= "x" 0)) (f (let ((f false)) "x")) (j (>= "x" "f"))) input))) (block (let ((b "x")) "i") (let ((i "x") (y 17) (e "x")) "y") (block 53))) (block (fun7 15 (our_code_starts_here -88 2 true -70 -88 false) (+ -25 -10) (let ((g -86) (x true)) "g") -1 (fun7 36 52 12 -46 19 false true) (let ((d 84)) input)) (* (sub1 20) (fun5 -15 false false)))) (* (if (< (let ((e input) (b -8) (j "e")) "b") -16) (if (main -43 input false true) (block true true 57) (+ 19 61)) (block (let ((f 53)) "f") (block false true) (block -7 true -91 false) (fun5 -40 true input) (let ((j true) (h true) (f -31)) "f"))) (block (>= (- 44 -56) (sub1 -65)) (>= (let ((z false)) 33) (let ((x false) (y -6) (a 20)) -66)) (let ((c (let ((y 15) (j "y")) -80))) (+ -67 "c"))))) (break (let ((c (let ((y (let ((g (block "loop_var_50" -22)) (b (- -5 100))) (block true "loop_var_50"))) (g (if (= false false) (>= "loop_var_50" -98) (>= "y" -60)))) (let ((f true) (j (block "loop_var_50" "g")) (a (* 71 "y"))) (= input "g")))) (z (let ((e (set! loop_var_50 false)) (i (let ((f (block -60 "e"))) (sub1 "loop_var_50"))) (y (block (set! e true) (block "c" 0 false) (if false "loop_var_50" 84) (block "i" 29 true -30 "loop_var_50")))) (set! c (* "y" "y")))) (a (let ((d (block (sub1 "z") (let ((z 52) (c 13) (x false)) "x") (- "loop_var_50" "loop_var_50") (block 10 "c" true))) (h (set! z (* 97 "loop_var_50")))) (- (+ "h" -55) (let ((c 59) (h "c")) 35))))) (let ((f (let ((e (fun8 "z" -57 false "c" "loop_var_50" -4 75 "c"))) (isnum "e"))) (j -15)) (block (block "j" "loop_var_50" "c" "z" "a") (let ((e "f") (c true)) "j") "z")))))))) (b (let ((i (sub1 (- (our_code_starts_here (block (block false "x" -50 74 "x") (let ((z 75) (e "x")) false) (set! x "x")) (let ((g (add1 "x"))) (let ((x 10) (d 79)) "g")) (let ((b (isnum input)) (z (let ((j true) (g "j")) false)) (a (add1 68))) (> -12 52)) (let ((loop_var_84 "x")) (loop (if (< loop_var_84 (+ "x" 84)) (block (set! loop_var_84 (+ loop_var_84 1)) (set! x "x") "x") (break "x")))) (let ((loop_var_164 "x")) (let ((loop_var_94 "x")) (loop (if (> loop_var_94 (- "x" 94)) (block (set! loop_var_94 (- loop_var_94 1)) (set! x -62)) (break "x"))))) (let ((e (if false "x" -13)) (y (let ((loop_var_58 -19)) (loop (if (> loop_var_58 (- -19 58)) (block (set! loop_var_58 (- loop_var_58 1)) (set! x -70)) (break 69)))))) (set! e true))) (let ((a (block true (let ((i "x")) true) (>= -27 -90) (let ((i true) (b 31)) false) false))) -51))))) (* (sub1 (let ((i (> -40 (set! x "x")))) (- (sub1 22) (let ((loop_var_196 "i")) (loop (if (< loop_var_196 (+ "i" 196)) (block (set! loop_var_196 (+ loop_var_196 1)) -89 -73) (break 42))))))) (sub1 (- (* "i" (block true 34 -76 11 "x")) (add1 (let ((loop_var_190 "x")) (loop (if (< loop_var_190 (+ "x" 190)) (block (set! loop_var_190 (+ loop_var_190 1)) (set! i 52)) (break -44))))))))))) (let ((loop_var_129 (block "x" 4 -34 -17))) (loop (if (> loop_var_129 (- (block "x" 4 -34 -17) 129)) (block (set! loop_var_129 (- loop_var_129 1)) (set! x (- (+ (set! b (block true -7)) (add1 -27)) (block false (set! b (add1 "b"))))) (+ (block (< (- "b" "b") (fun4 "b" false true)) (block (set! x 6) (= false true) (+ -57 "x") (let ((c false) (h "c")) 50) (sub1 44))) (let ((j "b")) (* (- -53 "x") (+ "x" 58)))) (* (set! b 54) (fun4 (let ((h (let ((h "x") (d 58)) "d"))) (fun5 22 false false)) (let ((y "x") (i (block true false)) (h (set! x true))) (block true)) (fun6 (let ((z false)) "x") 11 (set! b true) (let ((d "b") (c true) (x false)) "x") (< "x" 16) 10)))) (break (* (sub1 (fun4 (- -55 "loop_var_129") (let ((a false) (y 46) (i "x")) input) (block -48 -8 "x" true))) 85)))))) (* (+ (let ((a (let ((x (let ((loop_var_40 80)) (loop (if (< loop_var_40 (+ 80 40)) (block (set! loop_var_40 (+ loop_var_40 1))) (break (isnum false)))))) (j (let ((loop_var_122 (if true -99 97))) (let ((loop_var_170 (set! x -32))) (loop (if (> loop_var_170 (- (set! x -32) 170)) (block (set! loop_var_170 (- loop_var_170 1)) (block -91 -83 -98 92) (let ((z 14) (y "x")) -13)) (break (* -22 74)))))))) (let ((c (block (block false 46 false true false) (block true "j")))) (let ((x "c") (b (- "j" "x"))) (let ((loop_var_59 -87)) (loop (if (< loop_var_59 (+ -87 59)) (block (set! loop_var_59 (+ loop_var_59 1)) (set! b "c")) (break 25)))))))) (x (let ((loop_var_36 (let ((i true) (e "i") (h "a")) "h"))) (let ((loop_var_22 (block -75 74))) (loop (if (> loop_var_22 (- (block -75 74) 22)) (block (set! loop_var_22 (- loop_var_22 1)) 55 (- (sub1 "a") (if -72 "a" 100))) (break (let ((z (let ((z true) (h false)) "z")) (j (let ((e false) (d "loop_var_22") (j false)) false))) "loop_var_22"))))))) (j (- (let ((y (let ((e (+ "a" "x"))) (let ((c true)) "c")))) (let ((x (= 2 "a")) (y "x") (a (let ((h input) (z "x") (e -50)) false))) (sub1 47))) -73))) (let ((a (let ((f (let ((a (block false))) (let ((h true) (j "j")) "a"))) (z (+ (let ((x true) (i "j")) "j") (add1 "a")))) (+ (let ((z true) (g "f") (b "j")) "a") (let ((y "x") (f "x")) "f"))))) (- 11 (let ((loop_var_22 "a")) (loop (if (> loop_var_22 (- "a" 22)) (block (set! loop_var_22 (- loop_var_22 1))) (break "loop_var_22"))))))) (let ((f (let ((z (fun9 (- (- 11 -70) (if -74 -47 36)) (block (block true true true) (< 87 86) -43 (block false false false 81 -60) (sub1 20)) (main (let ((j true)) -79) (fun6 52 13 true true false -9) true (let ((y 7) (a true)) false)) -55 (<= (block 84 47 26 94 -40) (let ((f false) (x 52) (e 58)) 92)) (let ((y (= true true))) "y")))) (block (let ((loop_var_165 "z")) (loop (if (> loop_var_165 (- "z" 165)) (block (set! loop_var_165 (- loop_var_165 1)) (set! z true) (set! z true) false false) (break true)))) (isnum (block false))))) (y (< (set! f (fun1 (+ -57 -43) (block -15 96 "f" 4 11) (set! f -68))) (let ((x (let ((a (let ((z "f")) "z")) (c (let ((h false) (b "h")) 88))) (< "c" -85))) (h (set! x (- 18 83))) (j "x")) (+ (let ((d "f")) -92) -22)))) (z "y")) (set! y (block (set! y (let ((j "z") (a 33) (b "f")) input)) 61 (let ((loop_var_7 -49)) (loop (if (> loop_var_7 (- -49 7)) (block (set! loop_var_7 (- loop_var_7 1))) (break "loop_var_7")))))))) (- (add1 (block (isbool (>= (if false 63 -98) (block false 54 true 41 59))) (let ((g 47) (e (let ((j (let ((d 50)) -59)) (e false)) (let ((loop_var_162 "g")) (loop (if (> loop_var_162 (- "g" 162)) (block (set! loop_var_162 (- loop_var_162 1))) (break "g")))))) (z (block (let ((c 46) (e "g")) -7)))) "g"))) (block (- (let ((g (block (fun5 33 true input) (let ((c -89)) true) (> -15 -46))) (x (* (set! g -15) (- -55 -58)))) (let ((y (+ -6 "x")) (g (block -22 "x" "x" -52 "y"))) "g")) (add1 (let ((e (block 5 false 14 true false)) (b (isnum "e")) (d (add1 -1))) (add1 -28)))) (let ((d (let ((j false) (g (block (let ((j false) (a 78) (c -59)) "a") (block -30) (add1 -51))) (y (let ((a (- "g" "g")) (g "g")) (set! j -17)))) (let ((h (let ((f "g") (d -27) (a "g")) "g")) (f "h")) (block -10 true)))) (z (set! d (let ((b (let ((y -40)) "y")) (e (let ((f "d") (e "b")) "f"))) (main "b" true "d" "e"))))) (+ (block (block false) (let ((loop_var_173 36)) (let ((loop_var_165 -81)) (loop (if (< loop_var_165 (+ -81 165)) (block (set! loop_var_165 (+ loop_var_165 1)) (set! z 68) (set! d 76) -59) (break "loop_var_165"))))) (block 37 false "z" 80)) (+ (block -5 24) (let ((d "z")) -38)))) (- (let ((j (fun3 (if false 77 67) (> 23 -71) (let ((g 5) (z -91)) 58) (block false 87 -86) (let ((j false) (y 33)) -4) (+ 8 -10) (- 66 15) (< -99 -16) 33)) (c 19)) (+ (add1 "c") 21)) (let ((d (add1 (let ((i true)) -97))) (z (isbool (< "d" "d")))) (- (block true false "d") (* "d" 52)))) (let ((c true) (a (let ((i (let ((i (* 36 -78)) (c (block true "i" 19)) (y (block -42))) (isbool "c"))) (e -25)) (block 73 (let ((loop_var_120 70)) (let ((loop_var_139 -47)) (let ((loop_var_85 67)) (loop (if (> loop_var_85 (- 67 85)) (block (set! loop_var_85 (- loop_var_85 1))) (break -61)))))) (sub1 "e") (let ((x "e") (b -100)) "b") (>= "e" "e"))))) (- -87 (let ((g false) (f (* 11 9)) (x (> "f" "f"))) (+ 86 -90))))))))