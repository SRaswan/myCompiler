(fun (our_code_starts_here energy h j z a b x) (if (<= energy 0) 62 (block (set! energy (- energy 1)) (set! a (if (block (add1 28)) (set! z (let ((z "x") (c "x")) "j")) (set! energy (let ((j "j") (d false) (z -41)) "h")))))))
(fun (main energy x j i z y f) (if (<= energy 0) true (block (set! energy (- energy 1)) (block (block (block "i" (block false) (set! energy "z") (let ((g "z") (f "energy") (c "j")) "z") (our_code_starts_here "energy" -42 -20 68 "z" "y" false)) (set! x (let ((a "y") (y "y")) "i")) (> (let ((j 61) (b "y")) -67) (+ 52 "j")) (* "j" "x")) (> (block (block true "x" "x" true "x") (block -44 "i" -69 -49) (* "energy" 63) (let ((a false) (z false) (i "f")) "z") (let ((c "y") (x false)) "j")) (sub1 (let ((d "y") (g true) (f "f")) 82)))))))
(fun (fun1 energy j x f z e) (if (<= energy 0) 85 (block (set! energy (- energy 1)) 69)))
(fun (fun2 energy g i z c j a) (if (<= energy 0) false (block (set! energy (- energy 1)) (block (+ "i" (let ((z (let ((b false)) "b")) (f (< "g" "i"))) (* "i" "z"))) (set! c (>= (* -58 -68) (fun1 "i" "c" false "a" "c" "a"))) (our_code_starts_here (+ (let ((z true)) -58) (let ((i -82) (e "i")) -77)) (let ((z (* "energy" "i")) (h "c")) (let ((g "z")) -28)) (block (let ((x "c") (a false) (f "z")) 33)) (if (set! j "c") (let ((x 8)) -33) (+ "i" -44)) (block (<= 50 23) (set! c "energy") (set! energy true) (+ 96 -46)) (isnum "a") (block (block false false -67) (block false -14 "z" "c"))) (main (block (* "energy" "i")) (add1 (* "energy" -49)) (let ((c 66) (x (let ((d "c")) true)) (y (add1 12))) "energy") (our_code_starts_here (let ((y false)) "i") (set! z "j") "i" (let ((j 89)) 20) (let ((x false)) "j") (= false false) (block true)) (isnum (let ((d true) (y false) (x true)) "x")) (let ((a (+ -60 4))) (set! a 88)) (let ((b "j") (y (* -2 -28)) (c (* "g" -94))) (block false "c" -63 "a" 6)))))))
(let ((loop_var_67 (let ((z true) (y 26)) -62))) (loop (if (< loop_var_67 (+ (let ((z true) (y 26)) -62) 67)) (block (set! loop_var_67 (+ loop_var_67 1))) (break (< (* (- (let ((z (* -68 (block 60)))) (* (* 50 0) (let ((x 75)) "x"))) (set! loop_var_67 (let ((y true) (g (let ((h false) (c "loop_var_67")) true))) "loop_var_67"))) (let ((b (set! loop_var_67 (add1 (block 11 false true true -7)))) (z (> (let ((h (- -75 1)) (x (block false "h")) (d (set! loop_var_67 true))) (let ((i "d")) "h")) (our_code_starts_here (+ 32 "b") (+ "b" "b") (- 69 76) (let ((i true) (b "loop_var_67")) 17) (block false true -61) (block true true true) (isnum false))))) (- (+ (let ((h -20) (j "z") (b "loop_var_67")) -90) (block true 82)) (+ (block "z" "b" -24 "b") (let ((h "z") (f false)) 28))))) (let ((a (= (block "loop_var_67" (+ (block "loop_var_67" "loop_var_67") (sub1 36)) (if (block "loop_var_67" false 62 true) -46 "loop_var_67")) (+ (block (if false "loop_var_67" -90) (if false -7 "loop_var_67") (block "loop_var_67" false) (sub1 "loop_var_67")) (+ (let ((d "loop_var_67") (f 83) (b false)) 16) (block true "loop_var_67" -48)))))) (set! a (let ((g (* (let ((i "a") (x "loop_var_67") (g 75)) "g") 9)) (z (let ((f (let ((y -38)) 42)) (c (- 41 "loop_var_67"))) (let ((b false) (i "loop_var_67")) false))) (a (let ((j (isnum false)) (e (+ "loop_var_67" -8)) (f (fun2 "e" -81 "e" "z" -94 "j" "e"))) (set! z "a")))) 66))))))))