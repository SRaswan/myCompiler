(fun (our_code_starts_here energy d z j i f c e g) (if (<= energy 0) 8 (block (set! energy (- energy 1)) "d")))
(fun (main energy g b) (if (<= energy 0) true (block (set! energy (- energy 1)) true)))
(fun (fun1 energy y z d) (if (<= energy 0) -97 (block (set! energy (- energy 1)) (if (block (* (- 20 "y") (let ((g false) (x "energy")) "d")) "z") 67 (block (add1 (+ "y" "energy")))))))
(fun (fun2 energy i e x z c b) (if (<= energy 0) true (block (set! energy (- energy 1)) (>= (block "c") (let ((y (let ((i (block "z" 4))) (set! x -21))) (g (set! b (>= 99 "b"))) (z (<= (let ((z true) (i "x")) "e") (block false 74 true true 90)))) 2)))))
(fun (fun3 energy z h g d) (if (<= energy 0) true (block (set! energy (- energy 1)) (let ((y (if (let ((g (let ((z "h") (e -1) (f "g")) 57)) (d "g") (j (let ((i "d")) "h"))) (let ((a "z") (c 59)) true)) (sub1 (let ((i -94) (j 38)) 7)) (* (block "d" "d" 85 -38 0) (block false "z" 55)))) (i (- (+ (block "energy" -95) (block false "z")) (set! energy (block "d" 84 -88 "y")))) (d "g")) (set! d (set! z (<= "i" "g")))))))
(fun (fun4 energy g i x a y) (if (<= energy 0) true (block (set! energy (- energy 1)) (< (let ((f (add1 (* -18 "g"))) (x (set! g (>= "f" 95)))) (let ((e (+ -11 "f")) (a (+ 39 "energy"))) (block true 100 "e" "f" -76))) (block (set! energy (let ((b false)) -56)) (- (let ((z 15) (x "y") (h -35)) "h") (block "y" 79 30)))))))
(fun (fun5 energy e f g) (if (<= energy 0) -5 (block (set! energy (- energy 1)) (let ((x -70) (f (block (isnum (isbool true)) (= (* 58 -26) (* "g" 33)) (let ((i (= true false))) "g") (isbool (> "e" 31)))) (z (isbool (let ((b (isbool true)) (i (block true 41 "f" "f"))) (let ((j false)) "f"))))) (set! f (sub1 (* -17 -65)))))))
(fun (fun6 energy d f x c i a e j) (if (<= energy 0) -15 (block (set! energy (- energy 1)) (sub1 (let ((g (>= (fun8 "j" "d" true "e" "energy" "d") (block 6))) (j (set! e (* "a" 30)))) "x")))))
(fun (fun7 energy e a x) (if (<= energy 0) false (block (set! energy (- energy 1)) (let ((y (set! energy (- (let ((j true)) "energy") (+ "e" -67)))) (b (block true (set! y (if 62 false true)) (add1 (* -13 4)) 28 "energy")) (a (= (let ((i (isbool false))) (block "i" 6 93 "i")) (<= (let ((f "e") (a 89)) "e") (block false false -42 70))))) (set! a (block (+ "y" "x") (isbool "a")))))))
(fun (fun8 energy d x b f a) (if (<= energy 0) -4 (block (set! energy (- energy 1)) (let ((g "d")) (set! d (+ (- "d" "energy") (let ((j 74)) 72)))))))
(fun (fun9 energy b h z d x e a) (if (<= energy 0) false (block (set! energy (- energy 1)) (<= (add1 (let ((c 11) (f (* 66 "c")) (h (block "h" -48 "c" -96))) (sub1 "h"))) (set! z (* (block 14 -53 "z") (let ((b false) (f false) (y 77)) "y")))))))
(let ((a (block (let ((loop_var_196 (fun5 input -88 -3 -20))) (loop (if (< loop_var_196 (+ (fun5 input -88 -3 -20) 196)) (block (set! loop_var_196 (+ loop_var_196 1)) (block (let ((i (let ((h true) (c (> -1 68))) (block -59 "c" "h" "c"))) (b (>= (let ((y -86) (b 57) (h "i")) "y") (set! i 30)))) (<= 88 14))) false) (break (fun2 (add1 (sub1 (let ((g -66)) -68))) (add1 (add1 (fun8 "loop_var_196" "loop_var_196" true true 62 "loop_var_196"))) (sub1 (sub1 (fun5 -22 -5 "loop_var_196" 89))) (let ((h (if (set! loop_var_196 "loop_var_196") (if "loop_var_196" -86 32) (block 40 true 70 9))) (a (>= (- 79 "loop_var_196") (add1 6)))) (> (our_code_starts_here 17 true true true "a" 14 39 "a" true) (* -99 "h"))) (let ((a (if 59 false (let ((g false)) "g")))) "loop_var_196") (block (- (if 11 32 "loop_var_196") (set! loop_var_196 38)) (let ((b (let ((x 98)) false)) (h (set! b "b"))) (let ((b "loop_var_196") (z "h") (c "z")) -35)) (let ((y (- 54 "loop_var_196")) (z (let ((c -22) (e "y") (b false)) "y"))) (let ((f false) (h false)) "f")) true (let ((e (let ((d false) (h 74)) 21)) (x (let ((a input)) -66)) (g (>= -88 98))) "loop_var_196")) (sub1 (fun5 (let ((c true)) "loop_var_196") (our_code_starts_here "loop_var_196" false false true false -65 "loop_var_196" false true) (- 45 18) (let ((f -78) (b "f")) -80)))))))) (let ((d (isnum false))) (block (+ (sub1 (- (let ((f "d")) 51) (sub1 -87))) (- -52 (block (= true "d") (- 67 21) (block "d" -95 45) (let ((i "d") (h -47)) "h") (* -35 98)))) false (<= (let ((e (let ((b (let ((x 33) (c "d") (h -93)) 41)) (c 77)) (set! c -51))) (x (>= (let ((loop_var_125 58)) (loop (if (> loop_var_125 (- 58 125)) (block (set! loop_var_125 (- loop_var_125 1)) (set! d -51) "e") (break -17)))) (let ((loop_var_13 "e")) (loop (if (> loop_var_13 (- "e" 13)) (block (set! loop_var_13 (- loop_var_13 1)) 58 "e" input) (break -92)))))) (j (sub1 (+ -93 46)))) (set! d (add1 "j"))) (- (if (let ((f -60) (b false) (c 91)) "c") (fun1 77 true -30 true) (let ((y true)) 91)) (block (set! d -95)))) (block (isnum (let ((c (block 19))) (< 65 67)))) (let ((b (let ((loop_var_9 -43)) (loop (if (< loop_var_9 (+ -43 9)) (block (set! loop_var_9 (+ loop_var_9 1)) (set! d false) (let ((j false) (h false)) "j") (<= 35 -31)) (break (>= -3 -96))))))) (<= (let ((d (let ((z -70) (i "b")) "z")) (h (add1 "d"))) (let ((a "b") (f "h")) -68)) (let ((loop_var_165 -84)) (loop (if (> loop_var_165 (- -84 165)) (block (set! loop_var_165 (- loop_var_165 1))) (break 51)))))))) (> (+ (block (sub1 29) (let ((loop_var_143 (let ((z true)) 63))) (loop (if (< loop_var_143 (+ (let ((z true)) 63) 143)) (block (set! loop_var_143 (+ loop_var_143 1))) (break false)))) (* (+ (let ((d true) (e false)) 77) (block true -87 false -77)) (let ((e (let ((x true) (i "x") (y "x")) 43)) (b (> "e" 14)) (d (let ((a true)) true))) (block "b" true -83))) (let ((loop_var_172 (block false 41 -100 -25))) (loop (if (> loop_var_172 (- (block false 41 -100 -25) 172)) (block (set! loop_var_172 (- loop_var_172 1))) (break (block false false true false 24)))))) (- (let ((e (if (block false) (isbool false) (> -39 35)))) (* -36 (let ((loop_var_140 68)) (loop (if (< loop_var_140 (+ 68 140)) (block (set! loop_var_140 (+ loop_var_140 1)) (set! e 20)) (break 13)))))) (let ((f 48)) (fun1 (+ -99 37) (let ((loop_var_104 "f")) (loop (if (< loop_var_104 (+ "f" 104)) (block (set! loop_var_104 (+ loop_var_104 1)) (set! f true)) (break true)))) (let ((loop_var_191 "f")) (loop (if (< loop_var_191 (+ "f" 191)) (block (set! loop_var_191 (+ loop_var_191 1)) -9) (break 58)))) (let ((f false) (z true) (d input)) "z"))))) (let ((x (add1 (let ((j (let ((g (block 35 true -77))) (sub1 "g"))) (b (= (let ((g true) (i input)) 81) (block false -65 "j"))) (z (block (block false)))) (block (isnum "z") (* 64 -9) (let ((y "j") (a -79)) "a") (>= input "j") (let ((loop_var_94 68)) (loop (if (< loop_var_94 (+ 68 94)) (block (set! loop_var_94 (+ loop_var_94 1)) (set! b -19) (set! j -51) (set! j -77) 29) (break "loop_var_94"))))))))) (let ((loop_var_155 (let ((b true) (a "x")) "a"))) (loop (if (< loop_var_155 (+ (let ((b true) (a "x")) "a") 155)) (block (set! loop_var_155 (+ loop_var_155 1)) (set! x (set! x (let ((i "x") (c false) (h 1)) 18))) (set! x (let ((b (set! x -71)) (y (let ((a true) (b "a") (f 93)) "f"))) (fun1 "x" false "y" false))) (set! x 63) (set! x (+ -33 input)) (let ((c false) (h (* "x" "x"))) (let ((z 16)) "z")) (let ((g (block false)) (z (set! x true))) (let ((g -66)) input))) (break (fun8 (set! loop_var_155 -34) (block true -42) (block true true "loop_var_155" "loop_var_155" true) (set! x false) (let ((z false)) "loop_var_155") (+ 71 "x")))))))))) (g (block (block true) (let ((loop_var_39 (fun1 30 "a" 12 "a"))) (loop (if (< loop_var_39 (+ (fun1 30 "a" 12 "a") 39)) (block (set! loop_var_39 (+ loop_var_39 1)) (+ (- (let ((h (let ((i 62) (g "i")) "a"))) (set! h 83)) (let ((b (let ((e true) (a -83)) "e"))) (block input 50 78 51))) (fun5 (block (isbool false) (+ -3 -59)) (let ((h (let ((x 18) (y 37)) true))) (let ((e 4) (y "e") (d true)) 100)) (let ((f (isnum "a"))) (- 32 -99)) (+ (+ -61 76) (- 33 60))))) (break -1)))) (block (= (let ((g (let ((z (block (let ((loop_var_110 -53)) (loop (if (< loop_var_110 (+ -53 110)) (block (set! loop_var_110 (+ loop_var_110 1)) -85) (break "loop_var_110")))) (isnum "a") (+ -19 -8) (+ -49 74) -53))) (- (if true 1 99) (let ((j true) (x 73) (h true)) "z")))) (d (add1 13)) (e (block (set! a (let ((loop_var_137 "d")) (loop (if (> loop_var_137 (- "d" 137)) (block (set! loop_var_137 (- loop_var_137 1)) (set! g "a") (set! d false)) (break "a"))))) (< (block 66 "d" "d") (+ 14 -13))))) (block (let ((b (sub1 "g"))) (block "a" 36 73 "e")) (block (<= "d" -76) (isbool "e") (let ((e input) (a "g") (j 42)) "e") (let ((e true) (z "g")) "e") (let ((i 87) (c 99) (y "a")) 90)) (- (add1 95) (add1 "d")))) (+ (+ (let ((loop_var_87 -24)) (let ((loop_var_38 51)) (let ((loop_var_134 29)) (loop (if (< loop_var_134 (+ 29 134)) (block (set! loop_var_134 (+ loop_var_134 1)) 46) (break 53)))))) (+ (set! a input) (- -32 17))) (block (set! a "a") false (- (+ -22 -34) (- input -98))))) (let ((loop_var_86 (set! a -89))) (loop (if (< loop_var_86 (+ (set! a -89) 86)) (block (set! loop_var_86 (+ loop_var_86 1)) (set! a (set! a (fun6 (block 40) input (set! a -9) (if true -79 37) (> -35 25) 33 (> -21 83) (let ((f "a") (i true) (b true)) -63) -70))) (set! a (+ -18 (* (- -48 -92) (+ -96 -71))))) (break (if (add1 (+ "loop_var_86" -45)) (if (isnum "a") (fun1 "loop_var_86" "a" 36 "a") (sub1 -96)) (set! loop_var_86 "loop_var_86")))))) (block (> (let ((a -32) (e "a") (j (let ((b (< -80 "a")) (c (let ((i "a") (e "e")) false)) (g (let ((g true)) "a"))) (- 10 "g")))) (let ((loop_var_101 "a")) (let ((loop_var_11 51)) (loop (if (< loop_var_11 (+ 51 11)) (block (set! loop_var_11 (+ loop_var_11 1)) "j" -5 -93) (break 89)))))) 24) false) (isnum (< 60 (let ((b (> (let ((h -91) (a "h")) 76) (add1 27))) (c (- 13 (let ((i 33) (c "i") (j false)) "c"))) (i (let ((h (add1 41)) (j (let ((y true) (b false) (d "y")) false))) (* "c" -89)))) (set! a (- -36 -49))))) 22) (= (let ((h (let ((z (isbool (block (< -51 4) (block 8 input -68 -72 "a") (= "a" true))))) (+ 78 (- (let ((loop_var_7 39)) (loop (if (> loop_var_7 (- 39 7)) (block (set! loop_var_7 (- loop_var_7 1)) (set! a 27) (set! z 91) -20 -25) (break "loop_var_7")))) (- -72 -2)))))) (let ((loop_var_172 (let ((j "h") (i "a") (f -39)) 57))) (loop (if (> loop_var_172 (- (let ((j "h") (i "a") (f -39)) 57) 172)) (block (set! loop_var_172 (- loop_var_172 1)) (+ (let ((f true) (g true) (y "h")) 100) (- 78 "h")) "h" (let ((b (set! a "h"))) (let ((h true)) "b"))) (break (block (block -39 51 false "h") (= "loop_var_172" -70) (* -90 32))))))) (block (+ (+ (block (block true true "a") (sub1 -78) input) (set! a 42)) (+ (let ((i (let ((y -42)) "y")) (f (<= "i" "i")) (d "a")) (block "i" -77)) (- (+ 7 -95) input))) (let ((y (isbool (<= (let ((e -99)) "e") (sub1 -99)))) (f (let ((a (let ((e (let ((loop_var_22 86)) (loop (if (> loop_var_22 (- 86 22)) (block (set! loop_var_22 (- loop_var_22 1)) "y") (break "a"))))) (x input)) (add1 -22))) (c "a") (z (let ((a (* input "a"))) "a"))) (block (let ((loop_var_11 "z")) (loop (if (< loop_var_11 (+ "z" 11)) (block (set! loop_var_11 (+ loop_var_11 1)) (set! c 6) (set! y input) (set! a 26)) (break 36)))) (set! c "z") (let ((y true) (i "y") (g "a")) false) (let ((j "c") (f 96)) -85)))) (a (fun5 (add1 (* input "f")) (* (set! f "f") (set! y "f")) (- (if "y" "f" 24) (+ 70 "f")) (let ((x false)) (* -59 "f"))))) (add1 (let ((g (let ((f false) (j "a") (a "a")) "f")) (b (>= "f" -28))) (* -38 -33)))) (let ((e (add1 (let ((i (let ((g -16) (b "g") (h 21)) "a"))) (- 14 -72)))) (y (fun8 "e" (block (sub1 "e") (let ((h true) (c true)) -65) (block 70 "e" false) (- 24 27)) (>= (* 5 "e") 99) true (let ((y (block false true)) (c (let ((loop_var_52 22)) (loop (if (< loop_var_52 (+ 22 52)) (block (set! loop_var_52 (+ loop_var_52 1)) -89 "e" -20) (break -37)))))) (let ((loop_var_168 -44)) (loop (if (< loop_var_168 (+ -44 168)) (block (set! loop_var_168 (+ loop_var_168 1)) (set! a "e") (set! a "c") (set! a input)) (break -64))))) (let ((loop_var_67 "e")) (let ((loop_var_28 "e")) (let ((loop_var_148 "e")) (loop (if (< loop_var_148 (+ "e" 148)) (block (set! loop_var_148 (+ loop_var_148 1)) (set! a 78) -10 "e") (break 9))))))))) (+ (let ((loop_var_168 27)) (loop (if (< loop_var_168 (+ 27 168)) (block (set! loop_var_168 (+ loop_var_168 1))) (break 32)))) (block (let ((f 83) (x 2)) "x") (isbool true) (let ((loop_var_184 -52)) (let ((loop_var_96 "e")) (loop (if (< loop_var_96 (+ "e" 96)) (block (set! loop_var_96 (+ loop_var_96 1)) (set! y 30)) (break "loop_var_96")))))))) (set! a (if (* (block false "a" -13) (let ((i 95)) -56)) (block (let ((i 74)) 89) (let ((y false) (i false)) 73) true (if 34 "a" "a") (sub1 -1)) input))))))) (add1 (block (sub1 (sub1 (let ((i (let ((z (let ((loop_var_9 input)) (let ((loop_var_141 -20)) (loop (if (> loop_var_141 (- -20 141)) (block (set! loop_var_141 (- loop_var_141 1)) "a" "g") (break "g"))))))) (<= 78 -45)))) 24))) true)))