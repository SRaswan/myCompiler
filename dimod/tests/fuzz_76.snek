(fun (our_code_starts_here energy x h g) (if (<= energy 0) 78 (block (set! energy (- energy 1)) (if (let ((g (> (add1 "g") (fun5 56 true))) (e (isbool (isbool "g")))) (block (* "energy" "g"))) (let ((f (block (let ((c false)) true) (let ((z "x") (a -39)) -18)))) (block (- -95 -39) (block true true true true) (block "energy" -3 64 "h" -91) (+ -39 40))) (* (+ (block -54 "h" 94 "x") "x") (let ((j (* 94 -21))) (- -16 "energy")))))))
(fun (main energy i j z x c h) (if (<= energy 0) true (block (set! energy (- energy 1)) (if (block (let ((y (+ -4 "h")) (d (if -22 "i" 24)) (i "x")) (let ((a false) (x true)) 19))) (set! x (if (let ((c "j") (h -31) (y "i")) "z") (block "z" false "c") (if true true "c"))) (block (isnum (let ((d "j") (x "j")) false)))))))
(fun (fun1 energy c y d f j i x z) (if (<= energy 0) false (block (set! energy (- energy 1)) (isbool (block (* (block true -25 "x" 90) (block false 40)) false)))))
(fun (fun2 energy z) (if (<= energy 0) true (block (set! energy (- energy 1)) (isbool (block (* (+ -22 "energy") (add1 -10)) (block (+ -42 "z") (= 38 "energy") (isnum false) (let ((b true) (e "b") (y "b")) "z") (block true false false -17 false)) (let ((i (let ((g false) (y "z") (e 44)) "energy")) (h (let ((e 38)) 41)) (f (block 19 51))) (isnum false)) (= (* 54 "energy") (let ((x 24) (c "energy")) "c")))))))
(fun (fun3 energy j f b y h d g e) (if (<= energy 0) -20 (block (set! energy (- energy 1)) (let ((g (set! h (let ((x (> -53 "y")) (a (* 65 86)) (g 24)) (set! a false)))) (y (let ((f (set! energy true)) (i "h") (b (* (block true -10 "h" 54 "j") (sub1 "j")))) (let ((g (let ((x -12) (i 35) (z false)) false))) (isbool "f")))) (x (> (let ((x (let ((b 74) (c 35)) -94)) (b (our_code_starts_here "energy" "y" "j" false))) (* -73 "y")) (let ((a "h") (h (* -92 "y"))) (set! h "a"))))) (* (if (if "g" -60 40) (block -59) (let ((z "g")) "y")) (let ((d (+ -48 "y")) (z (let ((f "h")) false))) (* 88 "h")))))))
(fun (fun4 energy e z i g y) (if (<= energy 0) true (block (set! energy (- energy 1)) (fun4 energy (let ((a (- (let ((b "g") (i "e")) "y") (+ 92 29))) (c (if (let ((c true) (h "i")) 28) (isnum "g") (let ((j true) (h "e") (y "j")) false)))) (let ((g (< "y" "y")) (e (* "e" -22))) (block "g"))) (< (set! e (* "y" -40)) (- (block -41) (let ((a 77) (y "e")) 6))) (>= (block (fun3 "e" "z" "z" 72 "e" "g" true true false) (let ((h true)) "y") (>= "energy" "energy") (+ -45 -32)) (let ((b (- -28 97))) (set! g -57))) (* (if (> -32 -46) (let ((d "i")) "e") (* "y" 13)) (* (+ "e" "y") (* 37 "e"))) (set! i (isbool (set! e "z")))))))
(fun (fun5 energy f) (if (<= energy 0) 81 (block (set! energy (- energy 1)) (block (block (- (add1 -58) (+ "energy" 26)) (block (block 30 "f" true) (block -79 "f" "f")) (block (let ((g false) (j "g") (a -89)) "a") "f" (add1 "energy")) (<= (* 77 "f") (let ((g true) (x 17)) -8)) "f") (- (let ((x (- "f" -17)) (i (sub1 -81))) (* "energy" "i")) (sub1 (set! energy "energy"))) (- 60 (block (set! energy true) (let ((y false)) 50))) (add1 (add1 (set! energy "f")))))))
(fun (fun6 energy j g d i) (if (<= energy 0) -87 (block (set! energy (- energy 1)) 64)))
(fun (fun7 energy i e c j x d h g) (if (<= energy 0) true (block (set! energy (- energy 1)) (set! e (isbool (block (set! i "c")))))))
(fun (fun8 energy c h z d x a f) (if (<= energy 0) 54 (block (set! energy (- energy 1)) -100)))
(fun2 (let ((y (block (- (+ (add1 (let ((loop_var_32 -44)) (loop (if (< loop_var_32 (+ -44 32)) (block (set! loop_var_32 (+ loop_var_32 1))) (break -89))))) (let ((x (block (let ((f false) (x -63) (g true)) "x") (let ((a 59)) false) (fun1 input false 43 false -54 input false false 77))) (g (let ((f (> -87 -38)) (a (let ((d 20) (y true) (a input)) "d")) (h (* -95 "a"))) (let ((z false)) input))) (c (>= (let ((c "x") (y "x")) -40) (let ((y 97)) -54)))) (let ((loop_var_174 "g")) (let ((loop_var_151 "g")) (loop (if (< loop_var_151 (+ "g" 151)) (block (set! loop_var_151 (+ loop_var_151 1)) (set! c "g") "g" -64 "g") (break "g"))))))) 34) (let ((y (= (let ((f (fun2 24 (block false)))) (>= (let ((z "f") (e -15) (g "e")) "z") (fun3 "f" false true "f" "f" true false true true))) (< (let ((b (>= -11 -60)) (z (> -17 88))) (sub1 99)) (if (<= 100 -18) (let ((h -18)) "h") (let ((d 62) (i false)) "d"))))) (e (>= (- (block (let ((x 6) (d "x")) "d") input (add1 -68) (let ((d "y") (x 59)) true) (- -70 -47)) (* (set! y -61) (+ 49 -25))) 73)) (h (let ((loop_var_44 (add1 30))) (let ((loop_var_22 (set! e -31))) (loop (if (> loop_var_22 (- (set! e -31) 22)) (block (set! loop_var_22 (- loop_var_22 1)) (= (block 21) (sub1 74)) (isbool false)) (break (let ((c (let ((d "y")) "y")) (h (+ -15 "loop_var_22")) (i (let ((e -81)) "c"))) (let ((d "h") (e -25) (z "h")) true))))))))) (isbool (let ((g (sub1 (let ((loop_var_86 -35)) (loop (if (> loop_var_86 (- -35 86)) (block (set! loop_var_86 (- loop_var_86 1)) 62 -84) (break 27)))))) (a (< (sub1 "g") (block false "e" 72 "h" "g"))) (z (let ((y (< 55 "g")) (g 47)) (let ((e "g")) false)))) (isbool (set! h "e")))))))) (add1 (let ((a (< (let ((x (fun5 (block -92 78) (fun4 50 true "y" false 31 "y"))) (g (<= (block "y" "x" -70 87 82) -94)) (j (let ((f (add1 78)) (h (let ((b -1)) true)) (z (let ((e false) (i 89) (z "x")) "z"))) (block -65 -44 10 true)))) (* (add1 -66) (set! x 22))) (* (block (isnum "y") (block 8 71) (set! y 72) (+ 63 83) (block -62 63 -78 44)) (+ (let ((j -74) (b 75)) 50) 88)))) (c (fun6 (block (< (sub1 14) (let ((loop_var_155 0)) (loop (if (< loop_var_155 (+ 0 155)) (block (set! loop_var_155 (+ loop_var_155 1)) 92 44 -36) (break 18))))) (- (+ -59 53) (block false "a" 65 -82)) (sub1 (let ((b 29)) "b")) (let ((b (= 44 73))) (fun8 input -46 -46 "b" true -27 false "a"))) (let ((a -1)) (let ((loop_var_16 "a")) (let ((loop_var_129 -61)) (loop (if (> loop_var_129 (- -61 129)) (block (set! loop_var_129 (- loop_var_129 1)) (set! y "a") (set! a "a") (set! a 57) 47 "a" "a") (break "a")))))) (* (let ((b (isbool "a"))) (let ((a -86) (g "b") (y input)) 42)) (if (> 84 -31) 88 (+ 10 -35))) (set! y (let ((y (- -53 -52))) (block true 65 "y"))) (let ((loop_var_1 (set! a 9))) (loop (if (< loop_var_1 (+ (set! a 9) 1)) (block (set! loop_var_1 (+ loop_var_1 1)) (fun6 -62 -74 -91 input 2) (let ((x -43)) -32)) (break -48)))))) (f (let ((x (let ((g (let ((e (<= 4 "c")) (d (block "y" false "y"))) (< -19 input))) (e (let ((x (<= "c" "c")) (f (<= 69 "c")) (c (* "c" input))) (let ((c "f")) -48)))) (> (set! c "c") (let ((loop_var_100 "c")) (let ((loop_var_156 "c")) (let ((loop_var_51 "e")) (loop (if (> loop_var_51 (- "e" 51)) (block (set! loop_var_51 (- loop_var_51 1)) "e" -19) (break "e")))))))))) "y"))) (let ((c "c") (b "a")) (set! b -22))))) (< (block (let ((g (let ((loop_var_54 (let ((z true) (b -82)) input))) (loop (if (> loop_var_54 (- (let ((z true) (b -82)) input) 54)) (block (set! loop_var_54 (- loop_var_54 1)) (block (let ((h true) (d false)) "h") (block -31 74 -40)) (* (let ((h false) (f true)) -66) (let ((e true) (g 35) (j "e")) -85))) (break (set! loop_var_54 (add1 "loop_var_54"))))))) (z (let ((g (let ((i (+ (let ((b "g")) -56) (* "g" "g"))) (h (fun1 (sub1 "i") (set! g true) (* "i" 64) (<= -93 "i") (block true true "i" "g") (let ((loop_var_11 -40)) (loop (if (> loop_var_11 (- -40 11)) (block (set! loop_var_11 (- loop_var_11 1)) (set! i "g")) (break "loop_var_11")))) (fun1 0 false 85 false 31 65 false false "g") (let ((e -40)) false) (block false true -41)))) false)) (b (block (= (let ((b 50) (d true) (g "g")) false) (let ((h true)) false)) (block (let ((loop_var_176 "g")) (loop (if (< loop_var_176 (+ "g" 176)) (block (set! loop_var_176 (+ loop_var_176 1))) (break -17)))) (>= "g" "g") (+ -58 "g")) (let ((i (block "g" false 85))) (let ((c "g") (b -52) (g "g")) false)) (- (let ((c 87)) "c") (let ((loop_var_134 28)) (loop (if (< loop_var_134 (+ 28 134)) (block (set! loop_var_134 (+ loop_var_134 1)) (set! g 26)) (break -71))))) (block (< 55 22))))) (let ((loop_var_38 (+ -72 -14))) (let ((loop_var_75 (let ((d "g") (y "b") (i "b")) -95))) (loop (if (> loop_var_75 (- (let ((d "g") (y "b") (i "b")) -95) 75)) (block (set! loop_var_75 (- loop_var_75 1)) (set! g (< "g" -63)) (set! g (let ((g "g") (x true)) true))) (break (let ((d "g") (b "b")) "g"))))))))) (< (block (+ (sub1 -44) (let ((j "z") (x 73)) -93))) (+ (block (<= input -25) (isbool false) (let ((d "g") (g "d")) "g") (- -53 input) (fun8 "g" 57 -31 "z" "z" "g" true "z")) (add1 (let ((c -77) (a true) (y -82)) 79))))) (let ((loop_var_73 (sub1 -60))) (loop (if (> loop_var_73 (- (sub1 -60) 73)) (block (set! loop_var_73 (- loop_var_73 1))) (break (isbool (let ((a (set! loop_var_73 false))) (block "a"))))))) (isnum (block (block (block (let ((f false) (g 12) (z "f")) "g") true -71) (let ((loop_var_162 -90)) (loop (if (> loop_var_162 (- -90 162)) (block (set! loop_var_162 (- loop_var_162 1)) 61) (break "loop_var_162"))))) (let ((i (let ((y (isnum false))) (let ((d 15)) 100))) (y (* (* "i" -79) (let ((e "i")) "i")))) (set! y (block 43 false false))) (* -43 (let ((b (fun5 75 false))) (block 29))) (let ((j (- (let ((y true) (c false)) 70) (add1 10))) (y (>= 27 (block "j")))) 60) (let ((loop_var_26 (if true 19 -13))) (let ((loop_var_47 (let ((i true)) -31))) (loop (if (< loop_var_47 (+ (let ((i true)) -31) 47)) (block (set! loop_var_47 (+ loop_var_47 1)) (if -85 false true)) (break (set! loop_var_47 false)))))))) (* (let ((f (< (let ((loop_var_69 79)) (let ((loop_var_31 -78)) (loop (if (< loop_var_31 (+ -78 31)) (block (set! loop_var_31 (+ loop_var_31 1)) -41 -21 69) (break -71))))) (* (let ((loop_var_174 -50)) (loop (if (< loop_var_174 (+ -50 174)) (block (set! loop_var_174 (+ loop_var_174 1))) (break -42)))) (let ((x -60)) "x"))))) (set! f (+ (block -41) 7))) (let ((f (fun3 (+ (block false -18 -93 -47) (block -10 false true 80)) (let ((loop_var_167 56)) (loop (if (> loop_var_167 (- 56 167)) (block (set! loop_var_167 (- loop_var_167 1))) (break true)))) (>= (* 10 input) (sub1 30)) (- (let ((loop_var_33 100)) (let ((loop_var_83 -59)) (loop (if (> loop_var_83 (- -59 83)) (block (set! loop_var_83 (- loop_var_83 1))) (break "loop_var_83"))))) 5) (sub1 (- input 17)) (> (sub1 2) (let ((x true)) -14)) (= (block true) (let ((j -82)) false)) (isnum (>= -38 -68)) (block (block input false -80 true)))) (a (let ((e (block (block true false) (let ((loop_var_102 24)) (loop (if (< loop_var_102 (+ 24 102)) (block (set! loop_var_102 (+ loop_var_102 1)) (set! f true) (set! f false) (set! f false) "f" "f") (break false))))))) (block (isbool false) false (isnum "f"))))) (block (sub1 (set! f input)) (let ((loop_var_73 38)) (let ((loop_var_141 input)) (loop (if (< loop_var_141 (+ input 141)) (block (set! loop_var_141 (+ loop_var_141 1)) "f") (break true))))) (let ((z (block -90))) (let ((loop_var_165 "z")) (loop (if (< loop_var_165 (+ "z" 165)) (block (set! loop_var_165 (+ loop_var_165 1)) "z" -34 input) (break "loop_var_165"))))))))) (* (- (let ((g (let ((f (fun5 (- -4 -93) (let ((a true) (b 84) (z "b")) false))) (j (let ((loop_var_178 input)) (let ((loop_var_127 -49)) (loop (if (> loop_var_127 (- -49 127)) (block (set! loop_var_127 (- loop_var_127 1)) "f") (break "f"))))))) (sub1 (add1 35))))) (let ((loop_var_86 (let ((h true) (j "h")) "g"))) (loop (if (> loop_var_86 (- (let ((h true) (j "h")) "g") 86)) (block (set! loop_var_86 (- loop_var_86 1)) (set! g (block 58)) (set! g (let ((d true) (y "g")) 8)) (set! g (let ((f true) (a true)) "g"))) (break input))))) (let ((z 48) (d (fun4 (- (block false -34 true 50) (sub1 5)) (let ((loop_var_101 "z")) (loop (if (> loop_var_101 (- "z" 101)) (block (set! loop_var_101 (- loop_var_101 1)) true) (break true)))) (isbool (let ((y true) (e "z") (b -97)) true)) (< (let ((loop_var_173 -13)) (loop (if (> loop_var_173 (- -13 173)) (block (set! loop_var_173 (- loop_var_173 1)) (set! z "z") (set! z "z") (set! z "z")) (break "loop_var_173")))) (block true false "z")) (set! z 29) (if (if true true false) (block "z" false true) (block true)))) (y (- (let ((j "d") (f (let ((loop_var_103 -43)) (loop (if (> loop_var_103 (- -43 103)) (block (set! loop_var_103 (- loop_var_103 1))) (break "j")))))) (let ((y "f") (z true)) 92)) (let ((loop_var_65 "z")) (loop (if (> loop_var_65 (- "z" 65)) (block (set! loop_var_65 (- loop_var_65 1)) (set! d 70) 56 -83) (break 75))))))) (let ((g -20) (c (block (let ((j "y") (d "d")) false) (set! d false)))) (let ((c (let ((c -5)) -77)) (i (block "g" 18 "z" "d"))) (block "g" "d" "c" true "c"))))) 25)))