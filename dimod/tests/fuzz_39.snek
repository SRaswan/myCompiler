(fun (our_code_starts_here energy y) (if (<= energy 0) -48 (block (set! energy (- energy 1)) (block "y" (fun1 -63 (set! energy (set! y 41))) (isnum (block (>= "y" -81))) (block false (= (let ((b -23)) false) (let ((b false) (c "energy") (x "b")) false)) (* (add1 "energy") (+ -27 "y")) (let ((a (>= "energy" "energy")) (c (let ((h false) (b "h") (c "y")) "energy"))) (set! y -80))) (* 45 (- (+ 69 "y") (block -97 -82 false true -66)))))))
(fun (main energy c) (if (<= energy 0) false (block (set! energy (- energy 1)) (set! c (let ((a (+ (add1 "c") (+ "energy" 78)))) (block (set! energy 52) (block true true "energy") (<= "c" "a") (< "energy" 55)))))))
(fun (fun1 energy f) (if (<= energy 0) false (block (set! energy (- energy 1)) (< (- "energy" 98) (let ((g 36) (f true) (x (block (<= "g" -17) (let ((d "g") (b false) (z "f")) true) (isbool false) (fun1 "f" 14)))) (let ((h (let ((x "f")) "g")) (b (block true)) (g (isnum "x"))) (* "energy" 26)))))))
(fun (fun2 energy h f g c i a y b) (if (<= energy 0) 48 (block (set! energy (- energy 1)) (block (- (block (block false "a" 0)) (set! c (+ 77 "y")))))))
(fun (fun3 energy x g d) (if (<= energy 0) 100 (block (set! energy (- energy 1)) (let ((z (block (block (let ((g 24) (e "g")) 45) (let ((j -83) (a "d")) false)) (main (set! energy "d") (let ((a 80)) "x")))) (y 60)) (let ((d (set! y (let ((i 81)) "z"))) (j (isnum (fun6 -85 "d"))) (i (block (>= "x" -17) (block -69 true 79 "y" "energy") (sub1 "y")))) "y")))))
(fun (fun4 energy a z) (if (<= energy 0) 93 (block (set! energy (- energy 1)) (- -45 (block (if (>= -17 "a") (let ((x -20)) -79) (* 78 "energy")) (let ((f (let ((f "a") (b "energy")) "z")) (x (add1 -67))) (+ "energy" "energy")))))))
(fun (fun5 energy h b e g x j c) (if (<= energy 0) -20 (block (set! energy (- energy 1)) (+ (let ((j (< (fun2 "x" "e" "energy" "j" true "g" -29 "c" "g") (block -15))) (f (* (set! x "h") 63))) (block (block "f" true 51 "x" -14) "x")) (set! b (fun2 "c" (isbool "j") (set! b -32) (block "energy" "g" "b") (let ((x true) (d "g")) false) (let ((e -77)) true) (block -35 false "h" "e" "h") (let ((z true) (i "j") (x "z")) "c") "g"))))))
(fun (fun6 energy d) (if (<= energy 0) false (block (set! energy (- energy 1)) (let ((d (add1 (fun3 (block 31 "d") (> "energy" "d") "d" (fun1 "energy" 28)))) (j (block (let ((z (let ((i "d") (a 4)) "i")) (d (let ((x -49)) true)) (f "d")) "energy") "d" (= "d" (fun5 22 false true true "d" false "energy" true))))) (let ((f (> (let ((a "j")) 29) (if "j" "d" -16)))) (block (> "d" -80) (set! j "d") (set! d "f") (let ((a -63) (y true)) "d") (= -86 0)))))))
(- (let ((g (if (let ((g (add1 (add1 (- (let ((j true)) 8) (* 73 -18))))) (a (let ((i (add1 (if (- "g" "g") (let ((e -29) (y "e") (d -5)) "y") (let ((y false)) 4))))) (let ((h (let ((loop_var_79 "i")) (loop (if (< loop_var_79 (+ "i" 79)) (block (set! loop_var_79 (+ loop_var_79 1)) (set! g true) (set! g false) (set! i true) input) (break false)))))) (let ((c (block 34)) (b (set! c -69))) "h"))))) (let ((x (- (let ((a (isbool "a")) (f (let ((i 30)) false))) (- 0 75)) (* (block "a" false "g" true "g") (add1 12)))) (i (let ((y (block (block 8 "a" "a") (<= 52 "g") (let ((loop_var_155 10)) (loop (if (> loop_var_155 (- 10 155)) (block (set! loop_var_155 (- loop_var_155 1)) (set! g 66)) (break -18)))) 48 (< 7 38))) (g (* (let ((e false)) -56) (+ 51 "g"))) (b (let ((e (let ((e 58) (y "a") (z "e")) true)) (h (< "g" "x"))) (let ((loop_var_38 "g")) (loop (if (> loop_var_38 (- "g" 38)) (block (set! loop_var_38 (- loop_var_38 1)) (set! h "g") (set! g "x") (set! a "x")) (break "x"))))))) (isnum (let ((loop_var_26 "b")) (loop (if (> loop_var_26 (- "b" 26)) (block (set! loop_var_26 (- loop_var_26 1)) (set! b true) (set! x false) (set! a "y")) (break "y")))))))) (let ((c (block (let ((loop_var_115 47)) (let ((loop_var_114 "x")) (let ((loop_var_165 -49)) (loop (if (> loop_var_165 (- -49 165)) (block (set! loop_var_165 (- loop_var_165 1)) 86) (break "x")))))) (* "g" 61) (- -48 -58) 12)) (b (fun4 (let ((f -64) (i "i")) "g") (isnum "i") (- "g" -26))) (i (isnum (block "a" false "g" "b" "a")))) (block (if "b" -8 "g") (block "b" "i" "i" "g") (let ((loop_var_200 81)) (loop (if (< loop_var_200 (+ 81 200)) (block (set! loop_var_200 (+ loop_var_200 1)) "c" -39 "c") (break -25)))))))) (block (fun6 4 (let ((loop_var_59 -16)) (loop (if (< loop_var_59 (+ -16 59)) (block (set! loop_var_59 (+ loop_var_59 1)) (= 26 -5) (< 53 3) (< -15 93)) (break (isbool false)))))) (let ((e (main (block (fun2 -10 false 29 true false false 85 22 true) (let ((loop_var_36 89)) (loop (if (> loop_var_36 (- 89 36)) (block (set! loop_var_36 (- loop_var_36 1)) 59 79 -98) (break -32)))) 93) (let ((y (< -16 -58)) (d (block -80 -66 89 true "y"))) (let ((a true) (e 44) (x false)) -8))))) (- 6 (sub1 (* -46 29)))) (block (let ((y (>= (- -52 -29) (- -27 51)))) (+ (let ((j true) (e "j") (f "y")) -28) (let ((i "y")) 64))) false (let ((x (<= (sub1 -3) (let ((x false) (h "x") (e true)) 91))) (g (fun5 (block "x" -11) (isnum "x") (< -99 -81) (block "x" false -31 true false) (* 47 -17) (<= 0 -16) (let ((a 59) (f 55) (z -76)) "z") (set! x "x")))) -20) (block (block (if true true true) (block -10 71 false 53) (let ((g true)) 87) (- -92 57) (- -75 -12)) (let ((e (let ((h true) (d "h") (i "h")) 1))) (- "e" 46)) (sub1 (block 11 93 true -64)) (- (add1 -11) (block true 58 false true -64)) (let ((y (= 34 42)) (f (block true)) (h (- 71 8))) (add1 "h"))) 79)) (* (* (block 76 (let ((a (let ((i true)) -21))) (isnum input)) (block (let ((h 23) (d -41)) true) (block 6) (= false false) true (if 63 6 -57))) (block (+ (let ((loop_var_165 26)) (let ((loop_var_77 -7)) (let ((loop_var_134 56)) (loop (if (> loop_var_134 (- 56 134)) (block (set! loop_var_134 (- loop_var_134 1)) -66 94 -33) (break "loop_var_134")))))) (block true true -30 72)))) (+ (if (let ((a false) (x (let ((loop_var_87 -99)) (loop (if (> loop_var_87 (- -99 87)) (block (set! loop_var_87 (- loop_var_87 1))) (break -7)))))) (fun1 39 "x")) (fun4 (let ((loop_var_69 -85)) (let ((loop_var_110 97)) (let ((loop_var_81 -74)) (loop (if (> loop_var_81 (- -74 81)) (block (set! loop_var_81 (- loop_var_81 1)) -17 84) (break -9)))))) (<= -30 -85) (+ 25 94)) (fun3 (block false 22 false 60) true 48 (isbool false))) (sub1 (let ((h (block 55 false true 23 -81)) (g (let ((f -87)) true))) -18)))))) (h (< (- (+ (let ((loop_var_117 (our_code_starts_here -41 "g"))) (loop (if (< loop_var_117 (+ (our_code_starts_here -41 "g") 117)) (block (set! loop_var_117 (+ loop_var_117 1))) (break (* -41 "loop_var_117"))))) (let ((e (> "g" (fun3 "g" false "g" true))) (c (block (add1 -45))) (f (- (let ((h -64) (y false)) "h") (let ((x "c") (b "c") (z true)) "x")))) (let ((b (let ((b true)) input))) (- "c" "f")))) (block true "g" (block (sub1 (let ((y false) (c true)) "g")) (block (let ((a -78)) true) (>= "g" 87)) (let ((g (* -36 "g")) (b (sub1 "g"))) (let ((y 61)) false))) (+ (let ((z (let ((loop_var_110 "g")) (loop (if (> loop_var_110 (- "g" 110)) (block (set! loop_var_110 (- loop_var_110 1)) 19) (break "g"))))) (h (let ((z false) (d "g") (g 36)) "g")) (i (- -23 "h"))) (- "h" -83)) (let ((c false)) 3)) (block (let ((loop_var_72 51)) (loop (if (< loop_var_72 (+ 51 72)) (block (set! loop_var_72 (+ loop_var_72 1))) (break true)))) (block (+ -22 12) (block "g" true -57) (sub1 86))))) (* (block (* (set! g (block 78 "g")) (fun5 (block -92) true (block -19 -78 true) (block input 19 true) (let ((e 19)) -14) (= false true) (* 13 100) (<= "g" "g"))) (let ((b (- (block true false "g" 26) (let ((y -58) (d 93)) -86))) (e (+ (* "b" "g") "g"))) (isnum (let ((x true) (i "b") (h "b")) "x"))) (let ((f (add1 (let ((loop_var_67 "g")) (loop (if (< loop_var_67 (+ "g" 67)) (block (set! loop_var_67 (+ loop_var_67 1)) (set! g -88) (set! g "g") (set! g 45) "g" 19) (break "g"))))))) (- (set! g -52) (block true -49)))) (sub1 (add1 (sub1 (let ((x "g") (d "x") (f 76)) 41))))))) (e (add1 (let ((b (- (let ((loop_var_119 (let ((d false) (g -87)) "g"))) (let ((loop_var_17 (+ "g" "g"))) (let ((loop_var_62 "g")) (loop (if (< loop_var_62 (+ "g" 62)) (block (set! loop_var_62 (+ loop_var_62 1))) (break (set! h "loop_var_62"))))))) (let ((loop_var_91 (+ 97 39))) (loop (if (> loop_var_91 (- (+ 97 39) 91)) (block (set! loop_var_91 (- loop_var_91 1)) (let ((h 4) (j "g")) 14) (block 100 -53 true true 69) (block "g" "g")) (break (* -16 "loop_var_91")))))))) (set! b (add1 (- (- "g" 11) (- "b" 1)))))))) (let ((z (>= (* (block (block (- 59 -28) (let ((loop_var_112 -70)) (let ((loop_var_6 "g")) (loop (if (> loop_var_6 (- "g" 6)) (block (set! loop_var_6 (- loop_var_6 1)) (set! e false) (set! h "h")) (break false))))) (let ((loop_var_18 "e")) (loop (if (> loop_var_18 (- "e" 18)) (block (set! loop_var_18 (- loop_var_18 1)) (set! g false) (set! e true) "h" "h") (break "h"))))) 98) (let ((j (isbool (block true false "h"))) (c (- (add1 "g") "e")) (i (let ((a "h") (h (block 12 "j" "c" input "h")) (y (let ((loop_var_178 "g")) (loop (if (> loop_var_178 (- "g" 178)) (block (set! loop_var_178 (- loop_var_178 1))) (break 47)))))) (>= 91 "e")))) (+ (let ((a "i") (e "j") (j 59)) "j") 93))) (block (set! h (let ((c (let ((z false) (y false) (e true)) "y")) (g (< -18 -92))) -60))))) (x (+ (* (let ((j true) (b (- (block "e" 59 false true -73) (block 96 -56)))) (* (let ((loop_var_49 24)) (loop (if (< loop_var_49 (+ 24 49)) (block (set! loop_var_49 (+ loop_var_49 1))) (break -27)))) (let ((y "b") (e "z")) "e"))) "g") (+ (if (>= (block -45 false false "e" "e") (+ "e" "g")) (let ((d (if false "e" "g")) (i (let ((d "h") (g "d") (b "d")) 25))) (let ((z "g")) "d")) (let ((loop_var_66 -94)) (let ((loop_var_21 91)) (let ((loop_var_52 "g")) (loop (if (> loop_var_52 (- "g" 52)) (block (set! loop_var_52 (- loop_var_52 1)) (set! e "g") "e" 6) (break "g"))))))) (sub1 (let ((y (set! g "g"))) (* 8 "y")))))) (b (<= -76 (let ((loop_var_109 (let ((d -10) (x true)) 39))) (loop (if (< loop_var_109 (+ (let ((d -10) (x true)) 39) 109)) (block (set! loop_var_109 (+ loop_var_109 1))) (break "loop_var_109"))))))) (* (* "g" (block (- 62 (our_code_starts_here "x" -64)) (+ (sub1 "x") (let ((loop_var_76 -99)) (loop (if (> loop_var_76 (- -99 76)) (block (set! loop_var_76 (- loop_var_76 1))) (break "x"))))))) (- (- (let ((loop_var_102 -51)) (loop (if (< loop_var_102 (+ -51 102)) (block (set! loop_var_102 (+ loop_var_102 1)) (set! g -10) -87 "e") (break 61)))) (if (block "g" false false "x") (* "e" "e") (sub1 9))) (add1 (- (let ((x -38)) 15) (let ((d -13)) 88))))))) (+ (block (if (let ((c (isbool true)) (f (* (- (set! c -78) (let ((loop_var_95 60)) (loop (if (> loop_var_95 (- 60 95)) (block (set! loop_var_95 (- loop_var_95 1)) (set! c 25)) (break "loop_var_95"))))) (block (let ((a -27) (b -95) (f true)) 11)))) (y (let ((j (let ((f (<= "f" 62)) (d (let ((loop_var_21 65)) (loop (if (> loop_var_21 (- 65 21)) (block (set! loop_var_21 (- loop_var_21 1)) (set! f false) (set! c true) (set! f true) "c" true) (break false))))) (j (block "c" "f" "f" "f"))) (add1 89))) (x (sub1 (- "f" "f")))) (block (<= "j" 74))))) (block (let ((loop_var_148 -95)) (loop (if (> loop_var_148 (- -95 148)) (block (set! loop_var_148 (- loop_var_148 1))) (break -98)))) "y")) (block (+ (let ((a (let ((g true)) "g")) (d -19)) (block "a" 6 "d" "d" "d")) (sub1 (* 99 26))) (block (block (let ((f false) (e "f") (x true)) 33) (- 16 35) (sub1 4)) (main (* 94 89) (let ((i -6)) -69)) (isnum (block true true true false)) (let ((a -100) (x (block false false false))) (let ((c false)) false))) (let ((loop_var_4 (fun4 70 true 39))) (loop (if (> loop_var_4 (- (fun4 70 true 39) 4)) (block (set! loop_var_4 (- loop_var_4 1))) (break (if "loop_var_4" "loop_var_4" "loop_var_4"))))) 71) (- 72 (sub1 (block (* -14 -51) (let ((loop_var_21 -3)) (loop (if (> loop_var_21 (- -3 21)) (block (set! loop_var_21 (- loop_var_21 1)) true) (break true)))) (< -6 25) (block -70 false 99 37))))) (our_code_starts_here (* (+ (block (* -82 78) (block 94 true input -47) (isnum true) (let ((loop_var_148 -37)) (loop (if (< loop_var_148 (+ -37 148)) (block (set! loop_var_148 (+ loop_var_148 1))) (break "loop_var_148"))))) 81) (fun3 (block (> -46 -44) (let ((f true)) 14) (let ((g false) (d "g")) 88) (* 24 -53) (let ((loop_var_198 -19)) (let ((loop_var_49 -18)) (let ((loop_var_162 39)) (loop (if (> loop_var_162 (- 39 162)) (block (set! loop_var_162 (- loop_var_162 1))) (break "loop_var_162"))))))) (if (let ((g false)) 72) (> 32 40) true) -30 (let ((h false) (b (let ((i "h")) true))) (let ((c false) (h "b")) true)))) (let ((f (= (+ (block false true true false 46) (let ((loop_var_2 11)) (loop (if (< loop_var_2 (+ 11 2)) (block (set! loop_var_2 (+ loop_var_2 1)) 35) (break "loop_var_2"))))) (- (let ((g true) (a "g")) 69) (block 84 false 93)))) (a (let ((loop_var_75 (let ((h -77) (j "h") (b false)) 34))) (let ((loop_var_168 -6)) (loop (if (> loop_var_168 (- -6 168)) (block (set! loop_var_168 (- loop_var_168 1)) (set! f (= 68 42)) (set! f (= "f" "f")) (set! f (block true)) true (block input) (block false -96 false)) (break (set! f "f"))))))) (c (block (let ((loop_var_60 -93)) (let ((loop_var_90 81)) (loop (if (< loop_var_90 (+ 81 90)) (block (set! loop_var_90 (+ loop_var_90 1)) (set! a 37) -76 26) (break "loop_var_90"))))) (block (block "a" true "f" "a") (set! a 68))))) (block (isnum (>= 96 "c")) (- (block -21) (+ -64 "c")) (< (block "c") (add1 83)) (>= (let ((h false) (b true) (z input)) "c") (block -54 "c")) (block (let ((loop_var_189 "c")) (let ((loop_var_40 -42)) (loop (if (> loop_var_40 (- -42 40)) (block (set! loop_var_40 (- loop_var_40 1))) (break "f"))))) (add1 "c"))))) (block (block (- (let ((b (<= 1 72)) (a (* -34 -58)) (y (block "b" true))) (block "a" "a")) (- (add1 -93) (block 58 true -29 44)))) (if (sub1 -67) (<= (* (- 1 -30) (let ((loop_var_132 33)) (let ((loop_var_100 -77)) (loop (if (< loop_var_100 (+ -77 100)) (block (set! loop_var_100 (+ loop_var_100 1))) (break -85)))))) (* (- -9 -45) (* 48 -88))) (block (- 70 (fun5 10 false true false 1 false -26 true)) (<= (block false false 15 -12 -47) (let ((e true)) -3)))) (if (> (+ (let ((c 76)) 60) (let ((loop_var_79 52)) (loop (if (< loop_var_79 (+ 52 79)) (block (set! loop_var_79 (+ loop_var_79 1)) -37 -99) (break "loop_var_79"))))) 2) (+ (sub1 -62) (let ((loop_var_59 -86)) (let ((loop_var_181 39)) (loop (if (< loop_var_181 (+ 39 181)) (block (set! loop_var_181 (+ loop_var_181 1)) -49 -94 54) (break -74)))))) (+ (let ((e (block false true true true -52))) (if true 17 -41)) (let ((y (block false false true))) (set! y 19)))) (block (let ((d (block (let ((loop_var_96 -64)) (loop (if (> loop_var_96 (- -64 96)) (block (set! loop_var_96 (- loop_var_96 1))) (break -45)))) (our_code_starts_here 28 24))) (j (* (+ "d" "d") (let ((d false) (g "d") (h input)) "g"))) (x (let ((b (fun5 -71 false false false "d" true -43 false)) (i (block "b" -89)) (c (let ((loop_var_105 "b")) (loop (if (> loop_var_105 (- "b" 105)) (block (set! loop_var_105 (- loop_var_105 1)) (set! j true) (set! d true) false true) (break true)))))) (sub1 16)))) (let ((loop_var_78 70)) (loop (if (< loop_var_78 (+ 70 78)) (block (set! loop_var_78 (+ loop_var_78 1)) (set! d -61)) (break 32))))) true (add1 (block (block false true false) (let ((b false) (g "b")) false) (let ((c false) (j -67)) "j") (main 70 19) (- 73 -25))) (add1 (block (isbool true) (+ -14 -17) (> -2 19) (if -13 -33 -18))) true) (block (let ((c (- (block 59 95) (if 9 -68 88)))) (< (set! c -55) (let ((a false) (f "c") (j true)) "c"))) (let ((y (let ((loop_var_193 -11)) (let ((loop_var_131 14)) (loop (if (> loop_var_131 (- 14 131)) (block (set! loop_var_131 (- loop_var_131 1))) (break true)))))) (c (let ((loop_var_15 34)) (let ((loop_var_175 -25)) (let ((loop_var_101 68)) (loop (if (< loop_var_101 (+ 68 101)) (block (set! loop_var_101 (+ loop_var_101 1)) (set! y "y") (set! y false) (set! y true) false "y" "y") (break "y")))))))) (block (block true true -36 -20 "y") (block "y" false false -23 false) (set! c "y") (set! y 69) (let ((e 27) (x false)) "e"))))) (let ((y (let ((b (> (let ((a (let ((loop_var_44 29)) (let ((loop_var_99 85)) (loop (if (> loop_var_99 (- 85 99)) (block (set! loop_var_99 (- loop_var_99 1))) (break 2)))))) (b (= -93 -38))) (block -88)) (let ((i (- -64 98)) (d (block "i" true false true "i"))) (- -67 "i"))))) (block (let ((loop_var_130 56)) (loop (if (< loop_var_130 (+ 56 130)) (block (set! loop_var_130 (+ loop_var_130 1)) (set! b "b") (set! b "b") "b" "b") (break "b")))) (= 9 (set! b 33)) (let ((y (let ((z -31) (c 12)) true))) (let ((loop_var_25 97)) (loop (if (< loop_var_25 (+ 97 25)) (block (set! loop_var_25 (+ loop_var_25 1)) (set! y 59) (set! y 99) -55 18 96) (break "loop_var_25"))))) (let ((a (let ((g true) (y true) (h 26)) false))) (+ -2 54)) (set! b (block "b" "b"))))) (c (isbool (>= (if (* 79 53) (let ((loop_var_147 -3)) (loop (if (> loop_var_147 (- -3 147)) (block (set! loop_var_147 (- loop_var_147 1)) (set! y 84) (set! y -16) -65 23) (break -61)))) 90) (let ((i (add1 -88)) (d (let ((j input) (y false) (h -7)) "i")) (h (* -52 48))) (sub1 "d")))))) (block "c" (let ((loop_var_156 (our_code_starts_here 22 -9))) (loop (if (> loop_var_156 (- (our_code_starts_here 22 -9) 156)) (block (set! loop_var_156 (- loop_var_156 1)) (set! c -15) (block 56 -68) (- 67 90)) (break (block "y" -100))))))) (let ((a (<= (sub1 (* (block true false -71 false 32) (fun2 99 true 70 true false false 3 92 false))) (let ((x (block -61 (if 30 81 69) (+ 70 32) (if -8 false false))) (h (let ((h (>= -84 31))) (< 57 20)))) (- (block "h" 14) (+ -76 81))))) (x (block (let ((loop_var_114 (block -97 -61))) (loop (if (< loop_var_114 (+ (block -97 -61) 114)) (block (set! loop_var_114 (+ loop_var_114 1)) (set! a (sub1 -20)) (set! a (* 26 -72)) (set! a (+ 71 -81))) (break (+ 63 "loop_var_114")))))))) (* (- (block (+ "x" "x") (let ((c "x") (i "c") (f "a")) true) (let ((y "a")) 84) (set! a "a") (add1 "x")) (block (let ((loop_var_90 "x")) (loop (if (> loop_var_90 (- "x" 90)) (block (set! loop_var_90 (- loop_var_90 1))) (break true)))) (block "x"))) (let ((g (block (< -75 -5) true (let ((loop_var_155 -53)) (loop (if (> loop_var_155 (- -53 155)) (block (set! loop_var_155 (- loop_var_155 1)) (set! a "x") (set! a "x") (set! x "x")) (break "loop_var_155")))))) (x (main (let ((loop_var_147 -7)) (loop (if (> loop_var_147 (- -7 147)) (block (set! loop_var_147 (- loop_var_147 1))) (break -71)))) (+ "x" 40))) (b (let ((d (block "a" "a" true "g")) (g (let ((h 42)) false)) (f (let ((loop_var_104 "x")) (loop (if (< loop_var_104 (+ "x" 104)) (block (set! loop_var_104 (+ loop_var_104 1)) (set! a "g")) (break false)))))) (let ((x false) (y -29)) "f")))) (let ((b (add1 "x"))) (* -64 87)))))) (if (block (add1 (block (+ (fun3 -92 input 40 true) 43))) (block (= (let ((y (block 96 true false true)) (j (< -40 -44))) (let ((x 58) (y false)) "x")) (if (isbool false) (let ((a 6) (i "a") (h "i")) "i") (let ((d false) (x -60) (e "x")) "x"))) (let ((x (- -7 (fun4 -72 input -30)))) false) (< (* (let ((y 88)) "y") (let ((b 2)) 65)) (- (let ((loop_var_68 60)) (loop (if (> loop_var_68 (- 60 68)) (block (set! loop_var_68 (- loop_var_68 1))) (break -14)))) (let ((f 80)) "f"))) (let ((loop_var_32 (let ((c 82) (b 65)) "c"))) (loop (if (> loop_var_32 (- (let ((c 82) (b 65)) "c") 32)) (block (set! loop_var_32 (- loop_var_32 1))) (break false)))) (> (let ((e (let ((f -91)) true)) (f (isbool false))) (* 62 29)) (let ((d (let ((y -57) (c -90) (d "y")) true))) (let ((b -30)) -95)))) (* (let ((c (let ((b (block false 35 true 72))) (isnum false))) (x true) (z (< (set! x -30) (- -23 82)))) (* (set! c -7) (let ((y "c") (c "c")) 59))) (let ((loop_var_116 (- 64 -79))) (loop (if (> loop_var_116 (- (- 64 -79) 116)) (block (set! loop_var_116 (- loop_var_116 1))) (break (set! loop_var_116 "loop_var_116")))))) (let ((loop_var_89 (let ((x true) (i "x") (g 88)) "g"))) (let ((loop_var_147 90)) (let ((loop_var_155 (block -29))) (loop (if (< loop_var_155 (+ (block -29) 155)) (block (set! loop_var_155 (+ loop_var_155 1))) (break (* (let ((h false) (a "h") (x -3)) "loop_var_155") (block true -59 true input "loop_var_155")))))))) (isbool (isbool (let ((loop_var_71 -65)) (loop (if (< loop_var_71 (+ -65 71)) (block (set! loop_var_71 (+ loop_var_71 1)) true false true) (break false))))))) -11 (let ((j (let ((loop_var_71 -34)) (loop (if (< loop_var_71 (+ -34 71)) (block (set! loop_var_71 (+ loop_var_71 1)) (if false (= 27 47) (fun6 28 true))) (break (let ((h (if true true true)) (j "loop_var_71") (b (fun1 "loop_var_71" "j"))) (= "loop_var_71" "loop_var_71")))))))) (let ((i (* (block (let ((c 99) (d true)) false) (+ 9 52)) (block (sub1 78)))) (d (- (* -96 (set! j -27)) (block (let ((e true) (d "i")) "d"))))) (let ((a (>= (let ((i "j")) "d") (block -61 -15 17 "d" 87))) (e (+ (let ((loop_var_135 72)) (loop (if (> loop_var_135 (- 72 135)) (block (set! loop_var_135 (- loop_var_135 1)) "d" 69) (break 10)))) (if -20 -97 "d"))) (x (- (let ((i "d")) "i") (let ((loop_var_170 -40)) (loop (if (> loop_var_170 (- -40 170)) (block (set! loop_var_170 (- loop_var_170 1)) (set! e "i")) (break -12))))))) (let ((g -22) (x (> 4 -71)) (a (let ((x "d")) 58))) (set! x "g"))))))))