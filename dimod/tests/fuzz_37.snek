(fun (our_code_starts_here energy c) (if (<= energy 0) -98 (block (set! energy (- energy 1)) (let ((g (< (let ((e (sub1 -58)) (g false) (f (* 74 63))) (set! f 2)) (let ((j (* "energy" 61))) (let ((b true) (z true)) 25))))) (our_code_starts_here (set! c (+ "c" 13)) (set! c (set! g "c")))))))
(fun (main energy x a g) (if (<= energy 0) false (block (set! energy (- energy 1)) (> (+ (block (let ((i "energy") (a 9) (g true)) "g") (set! g 53) (>= "a" 9) (isnum true) "x") (+ (add1 "energy") (let ((h "g") (e "energy") (a "g")) -84))) (set! x (block (sub1 "energy")))))))
(fun (fun1 energy j) (if (<= energy 0) true (block (set! energy (- energy 1)) (set! energy (main (block 54 (block false false) (set! energy 29) (block true false true true "j")) (add1 (block "j")) (set! energy (isnum true)) (<= (set! j 3) "j"))))))
(fun (fun2 energy) (if (<= energy 0) true (block (set! energy (- energy 1)) (set! energy (block (< (block "energy") (* "energy" "energy")) (+ (block false false "energy" -46) (fun7 "energy" "energy" true true)) (<= (if true -75 94) (let ((i -89) (b "energy")) -54)))))))
(fun (fun3 energy h) (if (<= energy 0) false (block (set! energy (- energy 1)) (let ((i (+ (block (if -29 false true) (- "h" -63)) (block (isbool true) "energy" (add1 95) (block -97 true true "energy")))) (y (<= (* (let ((j false) (b 42) (e "i")) -40) (let ((y -53) (g "h") (j true)) 68)) (if (let ((y false)) false) (block "energy" true -86 -71 -58) (sub1 "energy"))))) (> (let ((d (set! energy "energy"))) (set! energy "h")) (* -84 (block "y" "i" "y" 21 90)))))))
(fun (fun4 energy c z e d g) (if (<= energy 0) -29 (block (set! energy (- energy 1)) (sub1 (add1 (let ((b (fun4 "energy" false "c" -88 "z" false)) (f (= "d" "c"))) (let ((j 2) (y false) (d "y")) "c")))))))
(fun (fun5 energy j a x f z) (if (<= energy 0) false (block (set! energy (- energy 1)) (block (+ (let ((f (<= -15 "a"))) (block -68 -41)) (block (<= "energy" "a") (block 46 "a" "f" "z" 92) (let ((z true)) "z") (< -53 "a") (+ -53 -98))) (> (add1 "j") (block (block true 70) (fun7 "a" "energy" "z" "z"))) (<= (* (block -57 "f" "energy") (let ((y 42) (a "a") (x "energy")) 71)) -9) (block "a" (let ((y (block "f" -80 "j"))) (let ((x -54)) 99)) (let ((e (let ((x true) (h -10) (a "x")) "energy")) (d (let ((j true)) true)) (h (- "f" "e"))) (main "j" "e" "d" false)) 30 (set! energy (set! z false))) (let ((h (add1 (* "energy" -53))) (i (add1 (add1 "a")))) (let ((j (+ -47 "a")) (b (isnum false))) (let ((e "x") (d false)) "d")))))))
(fun (fun6 energy c x j i e a g f) (if (<= energy 0) true (block (set! energy (- energy 1)) false)))
(fun (fun7 energy b g z) (if (<= energy 0) -47 (block (set! energy (- energy 1)) (fun4 energy (= (fun7 (- 64 "energy") (+ "b" 50) (<= 67 -35) (isnum true)) (block "b" (>= 32 "b") (block false 19 "z" true true) (- "g" 5))) (- (let ((y (let ((z false)) "b"))) "b") (- (if true -24 -35) (set! b 56))) (set! b 90) (> "b" (block (> "energy" "energy") (let ((i "b") (e true) (d "z")) "z") (let ((i true)) "z") (set! g "z") (our_code_starts_here -36 71))) (fun2 (* (- 37 "b") (block true 97)))))))
(fun (fun8 energy) (if (<= energy 0) false (block (set! energy (- energy 1)) true)))
(let ((e (fun7 (our_code_starts_here (+ (let ((d (let ((loop_var_34 (let ((j 76)) -71))) (loop (if (> loop_var_34 (- (let ((j 76)) -71) 34)) (block (set! loop_var_34 (- loop_var_34 1)) (let ((x -43) (e "x")) false) (block true) (block 94 true true 38 true)) (break (< -8 "loop_var_34")))))) (b (* (* (let ((loop_var_115 -65)) (loop (if (< loop_var_115 (+ -65 115)) (block (set! loop_var_115 (+ loop_var_115 1))) (break -35)))) (let ((loop_var_100 -33)) (loop (if (< loop_var_100 (+ -33 100)) (block (set! loop_var_100 (+ loop_var_100 1)) (set! d 14)) (break "loop_var_100"))))) (block (let ((j true) (e "d") (d "d")) 3))))) (+ (let ((loop_var_139 9)) (loop (if (> loop_var_139 (- 9 139)) (block (set! loop_var_139 (- loop_var_139 1)) (set! d -15) (set! b input) (set! b "b") 99) (break 98)))) (+ (- -69 -19) (block "d" "d" "b" "b" "b")))) (let ((z (* -50 (block -10 24 -62))) (c (let ((i "z") (d "z")) (let ((loop_var_3 "z")) (loop (if (> loop_var_3 (- "z" 3)) (block (set! loop_var_3 (- loop_var_3 1)) true true false) (break true))))))) (* 36 (- (block "z") (let ((b "z") (c "c")) "z"))))) (let ((x (* (let ((loop_var_174 (* -19 47))) (loop (if (> loop_var_174 (- (* -19 47) 174)) (block (set! loop_var_174 (- loop_var_174 1)) (let ((x true) (b 80) (y true)) input) (- -54 -33)) (break (if "loop_var_174" "loop_var_174" "loop_var_174"))))) (if (let ((f (block -58)) (h (let ((h "f")) -5)) (g (let ((loop_var_21 76)) (loop (if (< loop_var_21 (+ 76 21)) (block (set! loop_var_21 (+ loop_var_21 1))) (break "h")))))) (isnum false)) (block (let ((c true) (y 89) (x true)) 26)) (let ((h (block true 39)) (y false)) (block "h" true "y" -6 "h"))))) (e (let ((loop_var_194 (let ((a true)) 99))) (loop (if (< loop_var_194 (+ (let ((a true)) 99) 194)) (block (set! loop_var_194 (+ loop_var_194 1)) (set! x (block true (block "x" input false "x" input))) (set! x "x") (set! x (sub1 -57))) (break (set! x (set! x "loop_var_194"))))))) (b (- (let ((loop_var_72 (set! x 75))) (loop (if (> loop_var_72 (- (set! x 75) 72)) (block (set! loop_var_72 (- loop_var_72 1)) -54) (break (let ((c 13) (g 46) (y true)) "x"))))) (* (let ((g (let ((x -3)) false)) (f (let ((c "x") (b "g") (f "x")) "g")) (i (let ((loop_var_80 "e")) (let ((loop_var_3 28)) (loop (if (> loop_var_3 (- 28 3)) (block (set! loop_var_3 (- loop_var_3 1))) (break 20))))))) (block "f" 80 "i" 48 36)) (- (let ((loop_var_34 "x")) (loop (if (< loop_var_34 (+ "x" 34)) (block (set! loop_var_34 (+ loop_var_34 1)) (set! e "e")) (break "loop_var_34")))) (- 60 4)))))) (block (add1 (let ((i (fun4 30 false 14 "x" false true)) (y (let ((loop_var_169 "e")) (loop (if (< loop_var_169 (+ "e" 169)) (block (set! loop_var_169 (+ loop_var_169 1)) (set! e "e") (set! i 66)) (break -39)))))) (block "y" false true "y" "x")))))) (let ((e (isbool (let ((z (>= (block false (let ((loop_var_188 12)) (let ((loop_var_176 37)) (loop (if (< loop_var_176 (+ 37 176)) (block (set! loop_var_176 (+ loop_var_176 1))) (break "loop_var_176"))))) (let ((x true)) 11) (let ((loop_var_27 55)) (loop (if (> loop_var_27 (- 55 27)) (block (set! loop_var_27 (- loop_var_27 1))) (break -11)))) (block -12 -85 52)) (let ((c (if false 44 10)) (z (block 42 true true "c" "c"))) (let ((a input) (i true) (h "z")) 46)))) (h (let ((loop_var_160 23)) (loop (if (< loop_var_160 (+ 23 160)) (block (set! loop_var_160 (+ loop_var_160 1)) (set! z (block "z" "z")) (set! z (let ((h -68)) true)) (set! z (let ((g "z") (z 47)) "z"))) (break (>= 3 61)))))) (g (let ((d (< (let ((j "z")) input) (* 6 -73)))) (let ((f (set! d 0))) (let ((g 74)) "g"))))) (let ((z (set! g (let ((loop_var_7 54)) (loop (if (< loop_var_7 (+ 54 7)) (block (set! loop_var_7 (+ loop_var_7 1)) (set! g false)) (break false)))))) (j (let ((f (set! g false)) (i "h")) (<= -82 -38)))) (isbool (block -44 false))))))) input) (= (isnum (fun8 (block (+ (fun7 93 -39 true false) (fun4 86 false 39 100 true true)) (block true (isnum true) (let ((h 73) (e false)) false) (let ((i true)) -61)) (let ((loop_var_153 96)) (let ((loop_var_169 -39)) (loop (if (< loop_var_169 (+ -39 169)) (block (set! loop_var_169 (+ loop_var_169 1)) false) (break false))))) (* (let ((c true)) 97) 7) (- (* -78 -41) (+ 23 43))))) true) (= (if (if (let ((loop_var_173 (let ((b 100) (f false) (h -31)) -43))) (loop (if (< loop_var_173 (+ (let ((b 100) (f false) (h -31)) -43) 173)) (block (set! loop_var_173 (+ loop_var_173 1))) (break (set! loop_var_173 "loop_var_173"))))) (block false) (block false (+ -38 -49) (- (block 92) (- -96 88)) (let ((h (sub1 -12)) (z (block false 18 true false false))) (let ((a "z")) "z")))) (let ((y -7) (d (isnum (< (let ((i false) (h "i") (f "y")) 86) (block 71 false 35)))) (z (< (* (let ((j "y") (z "d") (d "d")) -28) (fun4 75 "d" 33 10 "d" false)) (- (add1 "y") (let ((a true)) "y"))))) (let ((e (let ((loop_var_95 65)) (loop (if (< loop_var_95 (+ 65 95)) (block (set! loop_var_95 (+ loop_var_95 1)) 46 input) (break -63))))) (j (* (+ "e" input) (set! y "y"))) (z (set! y (let ((loop_var_133 "e")) (loop (if (< loop_var_133 (+ "e" 133)) (block (set! loop_var_133 (+ loop_var_133 1)) (set! j 75) (set! d 72) (set! j 90)) (break "y"))))))) "e")) (- (let ((h (isnum (block true))) (x (sub1 (block true "h" 51 96))) (a (* (let ((f -91) (z "x")) "f") (let ((i -52) (c "x") (j 70)) 6)))) (+ (let ((f "h") (b "a")) "x") (+ "x" "a"))) -69)) (- (block (= (>= (let ((a -28) (j false) (c "a")) "a") (let ((loop_var_187 -98)) (loop (if (> loop_var_187 (- -98 187)) (block (set! loop_var_187 (- loop_var_187 1)) 71 22 68) (break 28))))) (= (* -13 17) (sub1 19))) (if (let ((d (let ((loop_var_45 42)) (let ((loop_var_26 -19)) (loop (if (> loop_var_26 (- -19 26)) (block (set! loop_var_26 (- loop_var_26 1)) -41) (break "loop_var_26"))))))) (< 30 -10)) 9 (* (let ((loop_var_18 69)) (let ((loop_var_63 -5)) (loop (if (> loop_var_63 (- -5 63)) (block (set! loop_var_63 (- loop_var_63 1))) (break "loop_var_63"))))) (* -41 87)))) (let ((b (>= (let ((c (let ((a 60) (c 51)) true)) (z (let ((a -7)) "a"))) (add1 "z")) (if true (let ((b -13) (h true) (f true)) -38) (add1 -73))))) (let ((loop_var_94 1)) (loop (if (< loop_var_94 (+ 1 94)) (block (set! loop_var_94 (+ loop_var_94 1)) (set! b (sub1 -46)) (set! b (block -69 true -20 -86)) (set! b (let ((x -47)) "x"))) (break (let ((e false)) 34)))))))))) (z (+ (fun4 (* (set! e (- (let ((h (set! e "e")) (g (let ((loop_var_173 31)) (loop (if (> loop_var_173 (- 31 173)) (block (set! loop_var_173 (- loop_var_173 1)) (set! e false) (set! e false) (set! e true) false) (break true))))) (d (< "h" 1))) (let ((j "d") (y -33)) 67)) (+ (- 60 69) (if -39 input "e")))) "e") (set! e (block (let ((loop_var_106 (add1 "e"))) (let ((loop_var_115 (+ "e" -23))) (let ((loop_var_2 (* input -94))) (loop (if (> loop_var_2 (- (* input -94) 2)) (block (set! loop_var_2 (- loop_var_2 1)) (block "e" false 56 false false) (block 69 true)) (break (>= "loop_var_2" "e"))))))) (let ((loop_var_199 (block true -40))) (let ((loop_var_56 (* -69 "e"))) (loop (if (> loop_var_56 (- (* -69 "e") 56)) (block (set! loop_var_56 (- loop_var_56 1)) (set! e (if "e" false true)) false (let ((b input) (c true) (g true)) true) (let ((h 17)) true)) (break (let ((c -52) (z false)) "z")))))))) (let ((e (let ((d true) (g -80)) (isnum false)))) (let ((loop_var_46 (block false "e" false 90))) (loop (if (< loop_var_46 (+ (block false "e" false 90) 46)) (block (set! loop_var_46 (+ loop_var_46 1))) (break (* (let ((b "e")) "e") (- 75 "e"))))))) (let ((g (block (block (let ((loop_var_60 -80)) (let ((loop_var_146 -93)) (let ((loop_var_16 -82)) (loop (if (> loop_var_16 (- -82 16)) (block (set! loop_var_16 (- loop_var_16 1))) (break true)))))) (* (let ((b "e") (a true) (c -55)) "e") (set! e -71)) (let ((b (let ((x 49)) -64)) (x (let ((z false) (g "z") (j true)) false))) (let ((z true) (b false) (d "e")) "b"))) (add1 (let ((i (* "e" "e")) (g (let ((g "e") (d false)) "g"))) (set! g "i"))) (block (let ((loop_var_55 "e")) (let ((loop_var_183 "e")) (loop (if (< loop_var_183 (+ "e" 183)) (block (set! loop_var_183 (+ loop_var_183 1)) (set! e 93)) (break -82))))) true (block (let ((loop_var_182 "e")) (let ((loop_var_16 "e")) (loop (if (< loop_var_16 (+ "e" 16)) (block (set! loop_var_16 (+ loop_var_16 1))) (break "e"))))) (block 87 "e" "e") (* "e" -100) (< 100 "e"))) (let ((f (block (let ((e "e") (c false)) -35) (let ((e "e")) 86) (let ((loop_var_44 "e")) (loop (if (< loop_var_44 (+ "e" 44)) (block (set! loop_var_44 (+ loop_var_44 1)) (set! e 26)) (break 41)))) 79 (let ((x true) (a "e") (c "e")) input))) (h (let ((x (- 66 "e")) (f (block "x" "e" false "f" "f")) (b (- -29 input))) (block 29 39 true))) (b (* (add1 56) -24))) (let ((f (let ((h "b") (y "h") (a "y")) "b"))) (block "e"))) (isbool (<= (block "e" true false -17) "e")))) (e (= true (<= (let ((i (block true -22 true)) (b (let ((i "e")) "g")) (y (>= "e" -88))) (sub1 76)) (sub1 (let ((x -35) (g false) (f false)) "e")))))) 42) (let ((loop_var_130 (block true true "e" true -76))) (loop (if (< loop_var_130 (+ (block true true "e" true -76) 130)) (block (set! loop_var_130 (+ loop_var_130 1)) (let ((d (block (block 6 true 59 false true))) (h (if (block "e" -75 23) (block true "d" true "e" "e") (let ((d false) (f "d")) -64)))) (= "d" (if "d" true "d"))) true) (break (let ((a -91) (d (block (+ -63 -41) (= false true) (set! e "loop_var_130") (let ((b 19) (z 97)) true))) (e (if (- -27 "loop_var_130") (<= "loop_var_130" 43) (block "d")))) (let ((x true) (j (block 37 "x" -78 input)) (y (add1 86))) (let ((x "e") (e "e")) "d"))))))) (fun6 (set! e "e") (let ((x (< (let ((loop_var_20 "e")) (loop (if (> loop_var_20 (- "e" 20)) (block (set! loop_var_20 (- loop_var_20 1)) (set! e 52) (set! e "e") (set! e -22)) (break "e")))) (+ (set! e 3) (let ((d "e") (e true)) -28)))) (j (block (let ((b (* "e" -36)) (z (* -5 -31)) (i (> "e" -11))) (let ((z true)) 0)) (let ((i (let ((loop_var_30 -38)) (loop (if (< loop_var_30 (+ -38 30)) (block (set! loop_var_30 (+ loop_var_30 1)) "e" 67) (break -32))))) (y (let ((x "i") (b true)) -9)) (d (let ((y 51) (c "e") (f "c")) false))) -88) 4 (* (sub1 "e") (+ 91 -58))))) (let ((e (block (- -67 79)))) (> "e" (let ((y "e") (c false)) "e")))) (= (let ((e (let ((b (let ((f true)) "e")) (g (- input input)) (h (let ((loop_var_116 -63)) (loop (if (> loop_var_116 (- -63 116)) (block (set! loop_var_116 (- loop_var_116 1)) (set! b "b") (set! b "e") (set! e 36)) (break -77)))))) (let ((i false) (h 70)) true))) (b (= (<= 55 "e") (let ((h "e") (z 65)) "e")))) (- (- 94 input) (+ "e" 55))) (block (let ((c (let ((d 75)) 19))) (let ((f true)) false)) (sub1 (+ 14 66)))) (* (sub1 (sub1 (block -92 true false false 19))) (let ((y (let ((a (* -61 22))) false)) (z 14) (e "e")) (sub1 -62))) (let ((loop_var_59 (block false "e"))) (loop (if (> loop_var_59 (- (block false "e") 59)) (block (set! loop_var_59 (- loop_var_59 1)) (set! e (add1 (block -12 "e"))) (set! e (let ((c (set! e 90)) (a 66)) (add1 "c")))) (break 53)))) (<= (let ((loop_var_115 (+ 93 "e"))) (loop (if (> loop_var_115 (- (+ 93 "e") 115)) (block (set! loop_var_115 (- loop_var_115 1)) (set! e (* "e" "e")) (set! e (let ((x false)) "e"))) (break input)))) (let ((j (let ((x (* "e" "e")) (c (- -54 -88)) (h (+ "c" "e"))) (let ((loop_var_1 "c")) (let ((loop_var_170 "h")) (let ((loop_var_172 "c")) (loop (if (> loop_var_172 (- "c" 172)) (block (set! loop_var_172 (- loop_var_172 1)) "c" -62) (break "loop_var_172")))))))) (z (let ((e (- "j" -12)) (j (add1 -50)) (y (+ -30 "j"))) (- -69 "e")))) (set! j (let ((b "j") (j 28)) "j")))) (let ((h (- "e" (- (* "e" -30) (* "e" "e")))) (g (block (+ (let ((loop_var_2 "e")) (loop (if (< loop_var_2 (+ "e" 2)) (block (set! loop_var_2 (+ loop_var_2 1))) (break "h")))) (add1 "h")) false (fun3 (let ((loop_var_146 "h")) (loop (if (< loop_var_146 (+ "h" 146)) (block (set! loop_var_146 (+ loop_var_146 1))) (break 71)))) (let ((j "e")) false)) (isnum (let ((loop_var_86 input)) (let ((loop_var_141 -25)) (loop (if (< loop_var_141 (+ -25 141)) (block (set! loop_var_141 (+ loop_var_141 1)) (set! e true)) (break true)))))) (* (let ((z "e")) 36) (- -68 51)))) (f (let ((i (isnum (>= 43 -96))) (x (block (fun4 "g" false "h" -19 false false))) (z (let ((e -61) (f (* "x" "h"))) (* "e" "f")))) (* (block "i" "i" "g" -25) (+ "g" 99))))) true) (let ((loop_var_165 (block input false "e" "e"))) (loop (if (< loop_var_165 (+ (block input false "e" "e") 165)) (block (set! loop_var_165 (+ loop_var_165 1)) (set! e (<= (set! e input) input)) (set! e (= (+ "e" "e") (fun4 1 true "e" "e" false false))) (set! e (fun3 44 true)) (let ((z (<= "e" "e")) (g (let ((d "z")) 97)) (h (if "z" 94 "e"))) (isbool false))) (break (>= (add1 "loop_var_165") (block false true false true -74)))))) (fun3 (set! e (let ((loop_var_160 65)) (let ((loop_var_29 "e")) (loop (if (< loop_var_29 (+ "e" 29)) (block (set! loop_var_29 (+ loop_var_29 1)) (set! e 84) "e" 48) (break 15)))))) (isnum true)))) (let ((e (sub1 (block (let ((e (let ((i (let ((h true) (i "h")) -47))) (let ((g 99) (y -94) (i "g")) -40))) (a (- (fun7 -63 3 true true) (sub1 73))) (z (let ((g (block "e" true true "e"))) (* -12 "e")))) (let ((c (let ((loop_var_152 "z")) (loop (if (< loop_var_152 (+ "z" 152)) (block (set! loop_var_152 (+ loop_var_152 1)) (set! e "e")) (break 23))))) (d (block false "e")) (a (our_code_starts_here "z" "e"))) (block false input))) (let ((loop_var_90 (add1 "e"))) (loop (if (< loop_var_90 (+ (add1 "e") 90)) (block (set! loop_var_90 (+ loop_var_90 1)) (add1 "e")) (break (+ "e" input))))) (sub1 (let ((loop_var_15 -64)) (let ((loop_var_117 "e")) (loop (if (< loop_var_117 (+ "e" 117)) (block (set! loop_var_117 (+ loop_var_117 1)) (set! e "e") (set! e -97) "e" "e" 56) (break "loop_var_117")))))) (<= (* (let ((b 70) (g false) (z 37)) -82) (block true "e" true "e")) (let ((f (let ((loop_var_145 91)) (loop (if (< loop_var_145 (+ 91 145)) (block (set! loop_var_145 (+ loop_var_145 1)) "e" "e") (break "e"))))) (g (block true true false))) (let ((f true) (x 29) (a -92)) -59))) (let ((c (+ (- 37 93) (- "e" "e"))) (e (>= (* "c" "c") (let ((loop_var_98 "c")) (loop (if (> loop_var_98 (- "c" 98)) (block (set! loop_var_98 (- loop_var_98 1)) (set! e -51) (set! c 22) (set! e 51)) (break 9)))))) (f (<= "c" "c"))) (let ((loop_var_90 "e")) (let ((loop_var_44 "e")) (loop (if (> loop_var_44 (- "e" 44)) (block (set! loop_var_44 (- loop_var_44 1))) (break 24)))))))))) (our_code_starts_here (sub1 (+ (let ((x (main "e" 48 false true)) (d (block "x" "e"))) (sub1 "e")) (+ (let ((j "e") (b "e")) 46) (* input 75)))) (+ (block -79) (sub1 (sub1 (+ "e" -15)))))))) (y (let ((b (> (set! z (* (block (let ((j -50) (y (sub1 -89))) (block input false "j" 36)) (block (let ((loop_var_55 "e")) (loop (if (> loop_var_55 (- "e" 55)) (block (set! loop_var_55 (- loop_var_55 1)) (set! z "e")) (break "loop_var_55")))) (let ((g false)) -1) true (* "z" 53)) (block (sub1 "z") "z")) (let ((x (- (let ((a -87) (z false) (i "z")) "a") (sub1 -98))) (z (- (set! x -64) (- 41 input))) (y false)) (if (+ 17 "x") input (let ((j true) (e 66) (i input)) "z"))))) (fun7 (let ((loop_var_41 (set! z "z"))) (let ((loop_var_22 (- -21 67))) (loop (if (< loop_var_22 (+ (- -21 67) 22)) (block (set! loop_var_22 (+ loop_var_22 1))) (break (set! z (if "loop_var_22" "e" -43))))))) (- (- (* (let ((y "z") (z true)) "y") 92) (if (let ((loop_var_163 99)) (let ((loop_var_164 "e")) (let ((loop_var_107 -74)) (loop (if (> loop_var_107 (- -74 107)) (block (set! loop_var_107 (- loop_var_107 1)) -82) (break 75)))))) (let ((h false) (d 45)) -20) -49)) (- (set! z (let ((g 35)) 12)) (let ((loop_var_18 63)) (let ((loop_var_183 33)) (loop (if (< loop_var_183 (+ 33 183)) (block (set! loop_var_183 (+ loop_var_183 1)) -11 "e") (break 18))))))) (let ((loop_var_5 (let ((j -48) (a 66) (i -90)) "a"))) (let ((loop_var_92 (* "e" 8))) (loop (if (> loop_var_92 (- (* "e" 8) 92)) (block (set! loop_var_92 (- loop_var_92 1)) (set! z (= (let ((j false) (f "e") (i "j")) true) (block "e" true true false true)))) (break (let ((e (isnum true)) (f (let ((g -25)) -13))) (< "f" "z"))))))) (let ((h (>= (let ((loop_var_113 13)) (let ((loop_var_188 -67)) (let ((loop_var_56 40)) (loop (if (< loop_var_56 (+ 40 56)) (block (set! loop_var_56 (+ loop_var_56 1))) (break "e")))))) (- (block true "e" false true 82) (block "e")))) (z (isnum (block (= "e" -34) (let ((e "z") (h 36)) "h") (let ((e "h") (x false)) "x"))))) (let ((loop_var_148 (- -31 "e"))) (loop (if (> loop_var_148 (- (- -31 "e") 148)) (block (set! loop_var_148 (- loop_var_148 1)) (set! z (let ((h 40)) "h")) (set! e (>= "e" "z")) (set! e (block 86 "h" "e" true "z")) (let ((h -53)) true) (= "z" "z") (> "e" 21)) (break (set! h true)))))))))) (if (<= (- "e" (* "z" (sub1 (block "b" "e")))) -31) (- (let ((d (sub1 (block (set! b "z") (main "z" "e" "b" "b") (let ((loop_var_122 32)) (let ((loop_var_62 -80)) (let ((loop_var_43 "e")) (loop (if (< loop_var_43 (+ "e" 43)) (block (set! loop_var_43 (+ loop_var_43 1)) (set! z "e") (set! b "e")) (break "e")))))) (- "z" "z") "e"))) (g (add1 (let ((z (let ((h "e") (a true)) true))) "z"))) (b (block (let ((c (let ((f "g") (e true) (z "b")) -19)) (b (set! e true)) (y 50)) 48) (* (let ((loop_var_117 -32)) (loop (if (> loop_var_117 (- -32 117)) (block (set! loop_var_117 (- loop_var_117 1)) (set! z 57) (set! b "e")) (break "z")))) (let ((a 95) (e "e")) "e")) (* (let ((a "b")) "e") (set! g 17)) "g"))) (let ((i (let ((g (if true -50 -31)) (z (let ((h false)) true)) (d true)) (let ((y "z") (h 42) (c "g")) 45))) (x (+ (set! b "d") (block -44 "z"))) (e (add1 (- "e" "g")))) (let ((loop_var_122 "g")) (let ((loop_var_75 "g")) (loop (if (< loop_var_75 (+ "g" 75)) (block (set! loop_var_75 (+ loop_var_75 1))) (break "d"))))))) (let ((loop_var_157 (let ((c "e")) "c"))) (loop (if (> loop_var_157 (- (let ((c "e")) "c") 157)) (block (set! loop_var_157 (- loop_var_157 1)) (let ((y (let ((b true) (e false)) input))) (set! y 26)) (let ((x (set! z "e")) (b (let ((g true)) false))) -49) (* (block 8 "e" 23) (set! e "e"))) (break (block (- -38 "loop_var_157") (if 57 31 "e") (let ((z 36) (x input) (e "x")) 59) (- "z" "e") (let ((d 29) (z "b") (g true)) -22))))))) (let ((loop_var_125 (set! e "z"))) (loop (if (< loop_var_125 (+ (set! e "z") 125)) (block (set! loop_var_125 (+ loop_var_125 1)) (set! z (let ((j (our_code_starts_here (let ((z -87) (g -91)) "g") (let ((f -85) (i false) (d -85)) -75))) (b (let ((g (+ -14 "z"))) (>= input -81)))) -6)) (set! e (let ((z (set! e (let ((d "b") (y "z")) 43))) (b (block (let ((d false) (e -82) (i "z")) "z"))) (i (> (- "b" 99) (block false "z" "z" "e")))) (let ((g (let ((g "z")) "z")) (f (* -32 87)) (h (let ((c "z") (e false)) false))) (block "g"))))) (break (if (* (block 30) (+ -61 -98)) (set! b (fun7 -59 -48 "b" "b")) (let ((a (let ((a "b") (z "b")) "z")) (f (our_code_starts_here 50 "loop_var_125"))) (let ((c false) (y 80)) "y"))))))))))) (let ((h (add1 (set! y (sub1 (* (let ((g (- "z" "z")) (z (set! e -93))) (block "y")) (let ((d (* "y" -91)) (g (block true true false 49)) (y (< 40 "y"))) (add1 "e"))))))) (i (= false (set! z (block (let ((loop_var_151 (- "y" "z"))) (loop (if (< loop_var_151 (+ (- "y" "z") 151)) (block (set! loop_var_151 (+ loop_var_151 1)) (set! e 100) (- "h" "h") (let ((i -6)) input)) (break (block "h" -61 60 "e"))))) (sub1 (+ (block false "z" true 75) (sub1 85))) (let ((g (let ((x (let ((e false) (i "e") (d -42)) "z")) (c (block false false true true)) (e (< "x" 9))) (isbool true))) (y (>= (let ((d "h") (e "g") (z -60)) input) (block "g" 76)))) (<= (sub1 -71) (let ((h false) (b "g")) "y")))))))) (sub1 (let ((f -97) (a (= (* (* (- -23 -100) (add1 "y")) (let ((loop_var_1 -66)) (loop (if (> loop_var_1 (- -66 1)) (block (set! loop_var_1 (- loop_var_1 1)) 60) (break 39))))) (+ (let ((a (let ((x false)) "x")) (g (sub1 "h")) (x (- "g" "f"))) (let ((a true)) "z")) (block (set! z false) (let ((b "z") (h true)) -48) (let ((h 60) (g true) (f true)) input) (add1 -88)))))) (set! a (let ((d (let ((e (block "a" "e" "e" "f" false))) -69)) (y (block (let ((z true)) "f"))) (i (block (isnum false) (= -86 "y") (main "d" "y" true false)))) (<= (isbool "a") (sub1 "y"))))))))