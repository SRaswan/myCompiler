(fun (our_code_starts_here energy a f b i c) (if (<= energy 0) 22 (block (set! energy (- energy 1)) (* (+ (let ((y (- "energy" -33))) (* "y" "energy")) (let ((j (set! f 85))) (if "i" "a" "a"))) "energy"))))
(fun (main energy a h) (if (<= energy 0) false (block (set! energy (- energy 1)) (let ((z (+ (* (- 86 "h") (fun7 15 true false false false true)) (block (block "energy" true) (fun1 "h" false) (let ((h true)) false) (if "h" "h" "energy") (set! energy "h"))))) (< -34 (- (block "energy" "a" false true 98) 39))))))
(fun (fun1 energy x) (if (<= energy 0) 34 (block (set! energy (- energy 1)) (let ((i (isnum (let ((g (let ((a false) (i "a")) "x")) (e (sub1 -34)) (h (let ((c -53)) false))) (= "energy" "x")))) (z (let ((j (main (set! x 100) (let ((e 25)) -43) (let ((h "i") (c "x")) 93))) (h (let ((z (let ((f "energy")) "f")) (y (sub1 57))) (isbool true))) (c (block (block "x" "energy" "energy") (* "x" "energy") (set! j "h")))) (* (our_code_starts_here "energy" "x" "h" "i" false -26) (let ((f -49)) -34))))) (* (if (+ -11 -64) (block -67) (block "z" "x")) "energy")))))
(fun (fun2 energy x j z a y b f) (if (<= energy 0) false (block (set! energy (- energy 1)) (<= (let ((i (set! y (let ((h "j") (x 95) (y "j")) "x"))) (x (block (> "b" "z") (if -48 "j" "f")))) (block (block "x" 58 28 "j" 89) (- "y" -72) (+ -19 -76) (> "b" 68) (sub1 -100))) (let ((z (+ (set! z -53) (+ "x" -23))) (d (<= (add1 100) (fun1 54 true)))) (sub1 (add1 "z")))))))
(fun (fun3 energy) (if (<= energy 0) true (block (set! energy (- energy 1)) (set! energy (block (let ((d (sub1 73)) (y (let ((j "d") (f true) (h true)) "f")) (g (isnum true))) (set! energy true)))))))
(fun (fun4 energy i h b) (if (<= energy 0) true (block (set! energy (- energy 1)) (let ((c (>= (+ (* "energy" -53) (set! energy 11)) (add1 (let ((d "h")) "i")))) (h (set! c (block (let ((a true)) "c")))) (d (sub1 (let ((h (let ((a 56) (h true)) 84)) (f (block "h" -46 "c" false "h")) (x (+ "b" -93))) (our_code_starts_here "i" -51 "c" "c" "h" -18))))) (block (>= (- "d" -49) (* "b" 75)))))))
(fun (fun5 energy y x h d j f) (if (<= energy 0) false (block (set! energy (- energy 1)) (set! f (> (* (let ((x false) (i "energy")) -84) (let ((d "x")) 83)) (- (if true 67 "h") (block 92 false "d" -68)))))))
(fun (fun6 energy y z j g a e c h) (if (<= energy 0) 99 (block (set! energy (- energy 1)) (let ((j (let ((a (if (block false true -18 "c" 100) (block "y" "y" "y") (let ((d "c")) "j"))) (i (* (block "e" "e" "g" "j" -40) (let ((e true) (j "j")) "j")))) (fun2 (block false "a" "j") (fun2 -92 true "a" "y" "i" "a" true "j") (set! g 64) 28 -87 (let ((h "y") (z 26) (i false)) 20) (let ((d "z") (f 16)) true) (block 51 false "i" "energy" 23)))) (h (block (let ((b (isbool false)) (j (= 32 "energy"))) (+ "j" 79)) (let ((h (if "z" "j" "energy")) (i (* -48 71)) (y (if "j" -97 -37))) "j"))) (x (set! y (set! energy (block 45 true true "h"))))) (block (>= (set! j 34) (set! g "j")) (add1 (+ "h" "j")))))))
(fun (fun7 energy d h a z b) (if (<= energy 0) -42 (block (set! energy (- energy 1)) (- (block (block (- 88 "d") (fun4 -39 "a" 68 "z") (block "energy" false) (let ((h -38) (y "h") (a true)) "a")) (set! b (block "b")) (if (block "d" "b" false "a" -94) (fun7 "d" "h" true "a" true "a") (* "d" 56))) (set! energy 28)))))
(block (let ((e (let ((b (block (block (let ((d (- (our_code_starts_here -87 65 false true true -67) (+ 34 -51))) (h (* (let ((d false) (a "d")) -30) (let ((h -49)) "h")))) (if "h" (block true false 60 4 true) (isnum true))) (let ((a (* (let ((loop_var_122 3)) (loop (if (< loop_var_122 (+ 3 122)) (block (set! loop_var_122 (+ loop_var_122 1)) -68 -46 -52) (break "loop_var_122")))) (our_code_starts_here 72 -50 true true true -70)))) (>= (+ "a" 64) (set! a "a"))) true)))) (isbool (let ((b "b") (f (block (< (block 2 -5) (set! b -31)) (* (let ((y true) (i -77) (c 35)) "i") (* 19 44)))) (j (set! b (let ((f (let ((loop_var_33 "f")) (let ((loop_var_39 27)) (loop (if (> loop_var_39 (- 27 39)) (block (set! loop_var_39 (- loop_var_39 1)) (set! b "f") (set! b 29) (set! f "f")) (break -8)))))) (a (block -41))) (> "f" "a"))))) (let ((loop_var_140 (* "f" 66))) (loop (if (> loop_var_140 (- (* "f" 66) 140)) (block (set! loop_var_140 (- loop_var_140 1)) (let ((x false) (h "f") (g "b")) false)) (break (let ((z "f") (h false)) true))))))))) (f (let ((z (block (let ((loop_var_143 (block "e" "e" -23 true 25))) (let ((loop_var_102 (block true "e" "e" -71))) (loop (if (> loop_var_102 (- (block true "e" "e" -71) 102)) (block (set! loop_var_102 (- loop_var_102 1)) (set! e (sub1 94)) (set! e (let ((f (if "e" -80 49)) (x (+ "f" 1)) (i (<= -90 49))) (if "x" 84 -51)))) (break (block (add1 -9) (fun7 -19 "e" false true "e" true))))))) (isnum (<= (let ((z (isbool "e")) (h (isnum false))) (let ((loop_var_54 -77)) (let ((loop_var_158 -19)) (loop (if (< loop_var_158 (+ -19 158)) (block (set! loop_var_158 (+ loop_var_158 1)) -28 59 20) (break "loop_var_158")))))) -24)) (if (= (block (let ((b false)) true) (* 96 -83) (let ((z "e") (y false)) 46) (isbool input) (let ((loop_var_189 -46)) (loop (if (> loop_var_189 (- -46 189)) (block (set! loop_var_189 (- loop_var_189 1))) (break -81))))) (sub1 (* -91 52))) (let ((z (add1 (+ 15 -57))) (g true)) "z") (* (let ((b (let ((j -67) (f "j") (y false)) "j")) (y (fun1 "b" false))) "b") (block (our_code_starts_here -40 47 true "e" "e" 87) (let ((loop_var_194 12)) (loop (if (< loop_var_194 (+ 12 194)) (block (set! loop_var_194 (+ loop_var_194 1)) (set! e true) true false true) (break true)))) (let ((a 66)) "a")))) (let ((loop_var_79 (let ((c false) (h 53)) "h"))) (loop (if (> loop_var_79 (- (let ((c false) (h 53)) "h") 79)) (block (set! loop_var_79 (- loop_var_79 1)) (set! e (block (let ((d true) (h 58)) "d"))) (set! e (block (main -56 64 -63) (>= -16 -15) (set! e false))) (let ((i (+ -85 -62)) (j (block "i" true "i" "e"))) (set! i true)) (= (main -93 -11 38) (= "e" false))) (break (let ((f (- -43 "loop_var_79")) (y (let ((e -26) (h true)) false)) (h (add1 45))) (= input "e")))))) "e")) (b (let ((a (<= (- (let ((loop_var_60 -62)) (let ((loop_var_103 34)) (loop (if (< loop_var_103 (+ 34 103)) (block (set! loop_var_103 (+ loop_var_103 1)) -49 -99) (break -75))))) (let ((loop_var_47 86)) (loop (if (< loop_var_47 (+ 86 47)) (block (set! loop_var_47 (+ loop_var_47 1))) (break 41))))) (let ((e (let ((g (fun6 35 false 85 "z" "e" true true true 89)) (a (+ -8 -59)) (j (let ((c true) (d "c")) 56))) (> 81 "j"))) (a (let ((i (set! e "e"))) -92)) (c (let ((b (sub1 -95))) (<= 60 -43)))) (if (let ((j "a") (b "e")) "e") (block "a" "e" 100 "z" "a") (* "a" "a"))))) (c 5) (i (if (let ((x (let ((h (> "c" "c")) (z (let ((f -13) (i true) (c "c")) "c")) (c (fun3 29))) (< 25 49)))) (<= (let ((h -68) (e 57) (f false)) 59) (if 54 "c" "c"))) (let ((y (block (if "c" 4 "c") (let ((i "c") (b "z") (h -17)) -9) (let ((a 72)) -79) (block 37) (let ((h "c") (g "e")) 46))) (j (let ((loop_var_58 -96)) (loop (if (< loop_var_58 (+ -96 58)) (block (set! loop_var_58 (+ loop_var_58 1)) (set! e false) (set! y "a") "z" true true) (break input))))) (g (let ((e (let ((loop_var_178 90)) (loop (if (< loop_var_178 (+ 90 178)) (block (set! loop_var_178 (+ loop_var_178 1)) true "z" "j") (break false))))) (h -79)) (let ((i "c") (g "z") (e "c")) 93)))) (block (let ((c -73) (g "a") (z true)) 16) (* -77 "y") (let ((loop_var_6 "c")) (loop (if (< loop_var_6 (+ "c" 6)) (block (set! loop_var_6 (+ loop_var_6 1))) (break "a")))) (block -46 "g" true) (<= "c" -58))) "e"))) (* (let ((loop_var_124 (if "a" "c" 69))) (loop (if (> loop_var_124 (- (if "a" "c" 69) 124)) (block (set! loop_var_124 (- loop_var_124 1)) (let ((g -62) (e "i")) "g")) (break (let ((g 7) (a -66)) -5))))) (let ((e (> (+ -60 23) (let ((e false) (x true)) "c"))) (i (let ((i (= "e" true))) (let ((x "c") (d false)) false))) (f (let ((b (let ((e true) (d 94) (a false)) false)) (c -83) (i (- "c" -59))) (let ((g false)) false)))) (let ((loop_var_72 -66)) (loop (if (> loop_var_72 (- -66 72)) (block (set! loop_var_72 (- loop_var_72 1)) 25 "c") (break "loop_var_72"))))))))) (let ((h false) (c (block (add1 (block (let ((y "h")) -18) 46)) (let ((a (let ((loop_var_164 7)) (loop (if (< loop_var_164 (+ 7 164)) (block (set! loop_var_164 (+ loop_var_164 1)) "b") (break "loop_var_164"))))) (x (let ((i (= "h" "z"))) (+ "a" "a"))) (c (let ((i (<= "x" "b"))) false))) (set! a (set! z "b")))))) (let ((i (let ((loop_var_20 (if -55 -58 70))) (loop (if (> loop_var_20 (- (if -55 -58 70) 20)) (block (set! loop_var_20 (- loop_var_20 1)) (set! b -86) (set! e (set! e -95)) (set! e (block -27 82))) (break (- "b" "b")))))) (j (>= "c" (let ((b (let ((y "i") (b "h") (h false)) -28)) (i false)) (* -71 "b")))) (x (block "j" (- (let ((f "h") (y "i")) "c") (add1 60))))) (* (block (* -65 "b") (let ((d "j")) true) (add1 -13) (let ((loop_var_108 "c")) (loop (if (< loop_var_108 (+ "c" 108)) (block (set! loop_var_108 (+ loop_var_108 1))) (break -52)))) (let ((loop_var_77 "b")) (loop (if (> loop_var_77 (- "b" 77)) (block (set! loop_var_77 (- loop_var_77 1)) 6 85) (break -26))))) (let ((b (block 25 false -7)) (g (fun4 -35 true "i" "e"))) (+ 53 "b"))))))) (d (<= (fun7 (- (let ((a (let ((loop_var_79 -91)) (loop (if (> loop_var_79 (- -91 79)) (block (set! loop_var_79 (- loop_var_79 1))) (break "f"))))) (y (if (- -38 -89) (let ((h -96) (f "e")) "f") (let ((d "f") (i "e")) false))) (f (fun5 (let ((loop_var_73 -89)) (loop (if (> loop_var_73 (- -89 73)) (block (set! loop_var_73 (- loop_var_73 1)) (set! f -93) (set! a -7)) (break "f")))) (let ((f true)) "f") -14 true (let ((loop_var_90 "a")) (loop (if (> loop_var_90 (- "a" 90)) (block (set! loop_var_90 (- loop_var_90 1)) (set! y 98) "f") (break "f")))) -17 (let ((b -92)) 36)))) (+ (* -7 "f") (block "f" -33))) (let ((i (block (* 72 "f") (set! f 84) (> "f" -33) (* -11 "f")))) (block (+ 15 -79) (block false "e" "e") (let ((d -96)) true) (* -20 -6)))) true (isbool (let ((loop_var_14 "f")) (loop (if (> loop_var_14 (- "f" 14)) (block (set! loop_var_14 (- loop_var_14 1)) (set! e (let ((d false) (h "f") (x 22)) true)) (set! f (let ((i "f") (z 27) (j -93)) false)) (set! e (isbool true)) (isnum false)) (break (isbool "e")))))) (let ((loop_var_170 -71)) (let ((loop_var_8 (let ((f false)) -7))) (loop (if (< loop_var_8 (+ (let ((f false)) -7) 8)) (block (set! loop_var_8 (+ loop_var_8 1)) (set! e (let ((i (isbool "e"))) (let ((e false) (d true)) "d"))) (set! f false) (set! e "e")) (break (block (block false "e" "e" -8 3) (>= -47 3) (let ((z false)) 7) (if -11 "f" "loop_var_8") true)))))) (let ((loop_var_19 (let ((c -6) (h "c")) 36))) (loop (if (> loop_var_19 (- (let ((c -6) (h "c")) 36) 19)) (block (set! loop_var_19 (- loop_var_19 1))) (break (> (* -49 "loop_var_19") (fun6 63 false 69 true true "e" false "e" -13)))))) (let ((j (let ((c (let ((e (let ((loop_var_26 "f")) (loop (if (> loop_var_26 (- "f" 26)) (block (set! loop_var_26 (- loop_var_26 1)) 98 24 25) (break 10))))) (z (- "e" "e")) (c true)) (let ((c true) (z true) (j -90)) 42))) (h (block (= input true) (add1 "f") "c" (- "c" 1)))) (block (let ((loop_var_178 "h")) (loop (if (> loop_var_178 (- "h" 178)) (block (set! loop_var_178 (- loop_var_178 1)) (set! f "f") (set! c 71) (set! e "f")) (break -41)))) (let ((a "e")) false) (let ((a "f") (g false)) input) (> 48 -42))))) (let ((c (add1 (+ "f" -90)))) (set! f (isnum false))))) (let ((z (our_code_starts_here (add1 (sub1 (+ -90 "f"))) (* (let ((h (if "f" "e" false))) (sub1 5)) (let ((j (block "f" "f"))) (let ((d 22) (e "e") (b true)) -33))) (< (let ((loop_var_19 "f")) (loop (if (> loop_var_19 (- "f" 19)) (block (set! loop_var_19 (- loop_var_19 1)) "f" "f") (break "f")))) (+ (+ 63 "f") (let ((loop_var_27 65)) (loop (if (< loop_var_27 (+ 65 27)) (block (set! loop_var_27 (+ loop_var_27 1)) (set! f 17) (set! f "f") (set! f "f") 60 -70 "f") (break -16)))))) (set! f (let ((j (> "f" "f"))) (isnum false))) (>= (block (< -54 "f") (let ((c false)) 27)) "f") (let ((h (add1 21)) (j (>= (- 65 63) (let ((loop_var_159 "h")) (loop (if (< loop_var_159 (+ "h" 159)) (block (set! loop_var_159 (+ loop_var_159 1))) (break "f")))))) (f (<= (let ((loop_var_83 -65)) (loop (if (> loop_var_83 (- -65 83)) (block (set! loop_var_83 (- loop_var_83 1)) "h" 56 -42) (break "f")))) (set! j "h")))) (block (* -18 -76))))) (y (let ((z (<= (let ((h (* "z" "z")) (f (block -63 "e" "h" true)) (j (let ((loop_var_126 64)) (let ((loop_var_109 -35)) (loop (if (> loop_var_109 (- -35 109)) (block (set! loop_var_109 (- loop_var_109 1)) 32 -16 9) (break "h"))))))) 52) (+ (let ((loop_var_20 "f")) (loop (if (< loop_var_20 (+ "f" 20)) (block (set! loop_var_20 (+ loop_var_20 1))) (break "f")))) (let ((loop_var_93 -70)) (loop (if (> loop_var_93 (- -70 93)) (block (set! loop_var_93 (- loop_var_93 1)) (set! f 26) (set! z "z") "z") (break -74))))))) (j (let ((loop_var_146 (let ((i 64)) -85))) (loop (if (> loop_var_146 (- (let ((i 64)) -85) 146)) (block (set! loop_var_146 (- loop_var_146 1)) (set! e (if "e" "z" "f")) (set! z (block "e" false -8)) (set! z (sub1 "f"))) (break (block "f")))))) (h (* (let ((a (let ((h "j") (e false) (j false)) "f")) (e (let ((a -94)) "z")) (x (>= "f" "f"))) (let ((b "a") (f "x")) "z")) (* (sub1 -90) (let ((loop_var_135 "j")) (let ((loop_var_96 "j")) (loop (if (< loop_var_96 (+ "j" 96)) (block (set! loop_var_96 (+ loop_var_96 1)) (set! e "f") -86 "j" -95) (break "j"))))))))) "h"))) (sub1 (let ((loop_var_31 (+ 57 "z"))) (loop (if (< loop_var_31 (+ (+ 57 "z") 31)) (block (set! loop_var_31 (+ loop_var_31 1)) (set! z (let ((e "e") (x "e")) "f")) (set! f (block "e" input "e" true 90)) (set! z (add1 "y")) (- -63 36)) (break (let ((d -1) (a "z") (i -2)) "z")))))))))) (< (let ((z (+ (* (add1 (let ((loop_var_200 4)) (let ((loop_var_8 "f")) (loop (if (> loop_var_8 (- "f" 8)) (block (set! loop_var_8 (- loop_var_8 1))) (break 82)))))) (let ((i (add1 "f")) (y (* "f" "f"))) (block "f" "i"))) (block "f" (- (if false 78 "f") (block 73 input 33))))) (c (= (block (fun1 (block "f" false "d" "f") (> 87 "z")) (let ((loop_var_117 "f")) (loop (if (< loop_var_117 (+ "f" 117)) (block (set! loop_var_117 (+ loop_var_117 1))) (break true)))) (if (let ((loop_var_76 "f")) (loop (if (< loop_var_76 (+ "f" 76)) (block (set! loop_var_76 (+ loop_var_76 1)) (set! z -26) (set! z -23)) (break "f")))) "z" (if false "z" -79)) (< (sub1 -24) (let ((x -84) (i input)) "x")) (- (our_code_starts_here 93 "f" true true false -4) (let ((loop_var_75 -92)) (loop (if (> loop_var_75 (- -92 75)) (block (set! loop_var_75 (- loop_var_75 1)) (set! e -38) (set! f "z") (set! d -35)) (break "loop_var_75")))))) (let ((a (block (let ((j -88) (d "j") (y true)) "f") (>= "f" "f"))) (y (> (let ((e "e")) -87) (let ((f -38)) "f")))) (* (let ((loop_var_28 0)) (let ((loop_var_38 72)) (let ((loop_var_38 "z")) (loop (if (> loop_var_38 (- "z" 38)) (block (set! loop_var_38 (- loop_var_38 1))) (break "f")))))) (let ((z false) (a "f") (d input)) -17))))) (h (* (let ((x (* (- "z" "f") (add1 83))) (a (set! d true))) (let ((loop_var_102 "x")) (loop (if (< loop_var_102 (+ "x" 102)) (block (set! loop_var_102 (+ loop_var_102 1)) (set! z -61) (set! c "f") (set! a 34)) (break "x"))))) (* (- (let ((x false)) -37) (let ((b "f") (a "c")) -89)) (let ((loop_var_194 "z")) (loop (if (> loop_var_194 (- "z" 194)) (block (set! loop_var_194 (- loop_var_194 1))) (break -98)))))))) (block (let ((loop_var_54 (set! h 89))) (loop (if (< loop_var_54 (+ (set! h 89) 54)) (block (set! loop_var_54 (+ loop_var_54 1)) (set! c (set! z "z")) (set! d (- "z" 31)) (set! c (block false input -71)) (* 3 -23)) (break (let ((y -89) (b "e")) -74))))))) (block (>= (let ((z (block (block false) (isnum false) (our_code_starts_here "f" -66 true false false "f") (let ((y 21)) "f") (block false input "d")))) (let ((j true)) (let ((loop_var_114 -20)) (loop (if (< loop_var_114 (+ -20 114)) (block (set! loop_var_114 (+ loop_var_114 1)) (set! f 80) (set! e 61) (set! d "f") 47 "f" -69) (break 85)))))) (* (* (let ((loop_var_26 -87)) (let ((loop_var_67 -93)) (loop (if (< loop_var_67 (+ -93 67)) (block (set! loop_var_67 (+ loop_var_67 1)) (set! d "f") "f" "f" 16) (break "loop_var_67"))))) (- -3 28)) (let ((loop_var_36 8)) (loop (if (< loop_var_36 (+ 8 36)) (block (set! loop_var_36 (+ loop_var_36 1))) (break "loop_var_36")))))) (block (let ((c (if (let ((e 29) (d 88) (i 36)) true) -78 (sub1 -89))) (e (- (set! d "c") (+ 56 "c")))) (let ((f (let ((f "e")) -80)) (h (block -100 true -16 "d" true))) (isbool "h"))) (> (sub1 (block "f")) (block (= "e" false) (if false -41 "f") (let ((g -6)) "f") (+ "f" -100) (let ((loop_var_140 "f")) (loop (if (> loop_var_140 (- "f" 140)) (block (set! loop_var_140 (- loop_var_140 1))) (break "loop_var_140")))))) (let ((loop_var_158 "f")) (loop (if (< loop_var_158 (+ "f" 158)) (block (set! loop_var_158 (+ loop_var_158 1))) (break (* 89 -37)))))) (block false (- "f" (add1 (+ -79 "f"))) (block (- (+ "f" 43) (let ((a -93)) "a")) (* -70 (- 26 "f")) (= (let ((z "f")) "e") (let ((x "d")) true)) (block (set! e "e"))) 40 (let ((e (if (block "d") (let ((y -26)) 72) (fun6 -83 true "f" true "e" false false false -77)))) (let ((z (block 40))) (let ((loop_var_144 88)) (loop (if (> loop_var_144 (- 88 144)) (block (set! loop_var_144 (- loop_var_144 1)) (set! e true) (set! e true) (set! e "d") "e" true "e") (break false))))))) (let ((z (sub1 (let ((z (= "f" "f")) (c (block "z" "e" -72 "e" "f")) (j (let ((a "f") (x -98) (z 14)) -21))) (block "c" "e" -14)))) (a (let ((loop_var_95 (let ((f 67)) 36))) (loop (if (< loop_var_95 (+ (let ((f 67)) 36) 95)) (block (set! loop_var_95 (+ loop_var_95 1)) "f" (let ((i "f") (j -89)) -43)) (break (set! e "loop_var_95")))))) (j (+ (- (let ((z true) (b true)) "f") (* "a" 80)) (let ((b (* 38 "f")) (z (sub1 99))) (let ((e "z")) "b"))))) (let ((y (<= (add1 21) (* "a" 50))) (z (let ((loop_var_46 -55)) (let ((loop_var_99 37)) (loop (if (< loop_var_99 (+ 37 99)) (block (set! loop_var_99 (+ loop_var_99 1)) (set! j 61) (set! a 43) -56 "z" "f") (break "f"))))))) (let ((d (block -48))) (set! z -30)))) (* (fun1 (set! e -35) (let ((b (let ((f -65)) -87))) false)) (let ((c (block (add1 -42) (set! e false))) (j (fun2 (let ((b 95) (h true) (c "d")) 21) (block "d") (let ((e "f")) "e") (block -35 30 true false -56) (let ((loop_var_139 "f")) (loop (if (> loop_var_139 (- "f" 139)) (block (set! loop_var_139 (- loop_var_139 1)) (set! e "f") (set! c -81) (set! e "f")) (break "f")))) (block "f" 83 "f") (>= "f" -77) (set! f "f")))) (block (let ((y false) (f "j") (b "f")) "j") (* -3 -31) (block "f") (let ((a 5) (h "d") (d false)) "a") "f")))))))