(fun (our_code_starts_here energy a h x z) (if (<= energy 0) 73 (block (set! energy (- energy 1)) (block (= (block (>= -15 "energy") (add1 "a")) 22) (add1 (let ((h (let ((f "h") (c -97) (h true)) true))) (block "energy" 85 "x")))))))
(fun (main energy a f i x) (if (<= energy 0) false (block (set! energy (- energy 1)) (let ((y (let ((h (<= (let ((d "i") (i -47) (a "x")) -5) (+ "f" "a"))) (y (let ((h (+ "energy" "energy")) (g true) (z (let ((i true)) "g"))) (= 28 -12)))) (block (set! y "h")))) (j (set! f (if (set! f false) (< "a" 93) (isnum "i")))) (x (<= (if (<= -73 -44) (block "a" "a" "j" "energy") (let ((f "a") (a true) (z "i")) "f")) (set! f (block 28))))) (set! j (set! f (set! energy "i")))))))
(fun (fun1 energy a g b z y f i) (if (<= energy 0) 48 (block (set! energy (- energy 1)) (let ((c (let ((x (isbool (block false 84 "energy" "b" "b")))) (block "z" (let ((d "y") (x -26) (h -56)) "b") (isnum "b") (block "z" "x" "y" true) (set! i true)))) (h (> (let ((b (set! i true)) (c (* 35 -5))) (let ((c "b")) -84)) (let ((b "energy") (e (< -56 19))) (set! e "b")))) (x (let ((e (set! h (let ((c false) (h "i") (z true)) "a"))) (j (if (set! b false) (+ "g" 75) (set! h -55)))) (set! energy (set! f "j"))))) (- (- (block true "g") (fun1 -30 "g" "c" "z" 74 67 "b" "z")) (+ (let ((e -75) (j "b")) "e") (block "b" "h" true 19)))))))
(fun (fun2 energy j f) (if (<= energy 0) -6 (block (set! energy (- energy 1)) (set! energy (block (let ((j (- "j" 12)) (g (block false 71 36 false 9))) (block 67 "f" 64 true 25)))))))
(fun (fun3 energy) (if (<= energy 0) -31 (block (set! energy (- energy 1)) (let ((j (block (* (let ((j true)) "energy") (block false "energy")) (- (add1 -44) (block false "energy" "energy" -53)))) (y (let ((e (let ((h (block -6 true 29)) (y (set! j false))) (set! y "j"))) (f (add1 (- "e" "e")))) (let ((c (let ((y false) (h "y")) "j"))) (main "j" 22 false false -80))))) (let ((i (<= (- 62 "j") (let ((a "y") (y "energy")) -30)))) (block (block -77 31)))))))
(fun (fun4 energy f y j a) (if (<= energy 0) true (block (set! energy (- energy 1)) (let ((z (block (* (* "f" -72) -86) (set! f (block "j" "y" 72))))) (let ((a (- (block "j" "z" "f" 74 "energy") (block false -36 "energy")))) (< (fun1 41 "energy" "y" "f" "f" "f" "j" 81) (block "a" false "a" -68)))))))
(fun (fun5 energy i a) (if (<= energy 0) -63 (block (set! energy (- energy 1)) (* (block (< (* -87 "a") (block "energy" "energy" "a")) (let ((x (set! i -4)) (i (set! i false))) (fun4 "x" false "i" false "x")) (+ (block 48 "a") (fun3 "a")) "a") (set! a (set! energy (* 34 -28)))))))
(fun (fun6 energy j d a c) (if (<= energy 0) 98 (block (set! energy (- energy 1)) (- (let ((b (if (add1 "j") (let ((i "d")) 47) (add1 "a"))) (d (let ((x true) (d (let ((b "j") (z "c")) -61))) (>= "j" 63)))) (set! energy (fun7 "b"))) (+ (let ((e (- 90 -56)) (x (set! a false))) (block "d" "x" "energy" -78 51)) (let ((x (>= "a" 48)) (a (let ((f "energy") (i "a") (b "x")) 90))) (block -56)))))))
(fun (fun7 energy) (if (<= energy 0) 79 (block (set! energy (- energy 1)) (let ((b (set! energy (block (block 28 false) (if true true true) (sub1 -48) (block false true false) (let ((g 43) (a -32) (e 62)) false)))) (y (fun2 (let ((h (let ((h true) (z "b")) "h")) (f "h") (d (= "energy" 40))) (let ((g -2) (a -98)) "g")) (let ((x (+ "energy" "energy")) (g (fun1 "energy" 37 "b" "energy" "energy" "x" "b" 26)) (h (let ((f -21) (y "b")) true))) (let ((f "g") (c false) (x 12)) true)) (let ((i (if -63 true "b"))) -20)))) 20))))
5