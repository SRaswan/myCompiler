(fun (our_code_starts_here energy f) (if (<= energy 0) -96 (block (set! energy (- energy 1)) (sub1 (block (> (* "energy" "f") (sub1 27)) (fun4 (block "f" 14) (set! energy 63) (if false "energy" 53) (our_code_starts_here "energy" false) (>= 44 -67) (block -87 false true true) (* -12 -35) (let ((a "energy") (c false) (x "f")) "x") (sub1 "f")))))))
(fun (main energy j i z b) (if (<= energy 0) false (block (set! energy (- energy 1)) (= (if (+ (add1 -75) (set! z -8)) (block (sub1 -35) (if "b" "z" "z") (block "energy" "z" -2) (our_code_starts_here 26 true) (set! b "i")) (+ (block -46 94) (+ "j" "i"))) (let ((j (block (if false 11 "j") (<= -15 "energy")))) (+ (sub1 "energy") (if false "energy" "i")))))))
(fun (fun1 energy) (if (<= energy 0) -22 (block (set! energy (- energy 1)) (fun2 energy true (let ((c (<= (let ((h false) (f "h")) 73) (sub1 "energy")))) (> -53 (let ((a 87) (x "energy") (y false)) "a"))) (our_code_starts_here (let ((j (<= -56 90)) (x (>= "energy" 41))) (let ((f "energy") (e "x") (i -53)) "f")) (set! energy (isbool false))) (isbool (block (let ((j false)) 69) (set! energy true) (let ((j false) (a true)) "energy") (let ((i -87) (z "i")) false))) (isbool (let ((i (let ((j false) (g "j")) false)) (x 85) (b (if 58 -6 "energy"))) (< "energy" -85)))))))
(fun (fun2 energy g b y h f) (if (<= energy 0) -29 (block (set! energy (- energy 1)) (add1 (- (let ((y (let ((e -80)) false)) (x (isbool false))) (set! h "h")) (let ((i (- -30 99)) (x (<= "g" -31)) (b (block 48 false))) (fun2 -83 "b" "b" "h" false "y")))))))
(fun (fun3 energy g z y d f b c) (if (<= energy 0) false (block (set! energy (- energy 1)) false)))
(fun (fun4 energy x b a g j i y f) (if (<= energy 0) -9 (block (set! energy (- energy 1)) (block (+ (- (sub1 "x") (- "a" "energy")) (- (let ((j "j") (z false)) -68) (let ((j -79)) "y"))) (let ((y (block (block -20 79 "energy" "j" 52) "b" (> "x" -20) (set! b -20) (- -47 "x"))) (i (let ((j (main -20 -55 true -66 15))) (> "y" 58)))) -20) (fun8 (if (if false true true) (block "i" "g" -50) (let ((i "i")) -43)) (+ (let ((x "i") (f -97) (a false)) "energy") (if 89 95 64)))))))
(fun (fun5 energy z y e d c) (if (<= energy 0) -2 (block (set! energy (- energy 1)) (let ((h "c") (y (block (block (* "z" "z")) (block (let ((z "d") (c 71) (y "energy")) 75) (add1 20) (let ((f "d") (c -84)) false)) (block (fun9 45 -39 false false) (let ((a 38)) 79) (let ((c 71)) "energy") (let ((b "d") (f "z")) "d") (sub1 "energy")))) (b true)) (block (< (let ((g 55)) "e") (block "energy" "b" "d" "c" "energy")) "h" (let ((j (block "y" true 17 "y" "energy")) (b (< "d" "energy"))) (set! j true)) (* (fun6 -21 "d" "d" "d") (let ((a "y") (x false) (d "a")) "y")) (let ((g (set! b -34)) (c (<= 14 "g"))) (fun4 52 "z" 51 7 false "b" "e" -31 60)))))))
(fun (fun6 energy e g c) (if (<= energy 0) 32 (block (set! energy (- energy 1)) (block (block (block (isbool true)) true (block (if true 25 -81) (* "c" "c") (block true false "e") (* 44 "e") (>= -78 "e")) (block (block -22 -87 -80 true false) (if false false false) (let ((b 78) (j false) (x 94)) -97) (set! g true) (set! c -83)) (< (fun4 "c" "c" 94 "energy" true false 13 7 "g") (- "energy" "energy"))) (let ((j (+ (* "e" -97) (* 15 "energy"))) (c false) (x (let ((z (block "c" "j" "g"))) (block "c" "c" true true)))) (- (let ((y 80)) "j") (sub1 -47))) (= (isbool (set! c true)) (set! c (< 71 13))) (let ((y (if (let ((f "c") (e 44)) "e") (block 13 -42 -24 true) (block 13 true -49 13 false)))) (+ (* "c" 64) (let ((e "y") (g 99)) -22)))))))
(fun (fun7 energy c e h g) (if (<= energy 0) true (block (set! energy (- energy 1)) (isbool (if (if (let ((f "e") (z false)) -4) (add1 -4) "c") (isbool (= 96 "c")) (= (>= -8 "e") (block "energy" false)))))))
(fun (fun8 energy b) (if (<= energy 0) 88 (block (set! energy (- energy 1)) (let ((e (if (let ((g (set! b -71)) (x (let ((x false) (g 10) (d 10)) "d")) (z (set! energy false))) (block 10 false -61)) (block (if false "b" "energy")) (- (let ((y true) (h "b") (i "y")) "energy") (let ((h -20)) "h")))) (a (block (>= "energy" (set! energy -75)) (set! energy (let ((c -27) (j true)) "c")) (set! e (sub1 -59))))) (add1 (set! e (- "e" 18)))))))
(fun (fun9 energy j i g) (if (<= energy 0) false (block (set! energy (- energy 1)) (< (fun1 (let ((z (+ -16 "j"))) (let ((y false) (g true)) "j"))) 12))))
-79