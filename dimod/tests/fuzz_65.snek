(fun (our_code_starts_here energy a y f i x) (if (<= energy 0) 42 (block (set! energy (- energy 1)) -70)))
(fun (main energy a f c z d i y) (if (<= energy 0) false (block (set! energy (- energy 1)) (isnum (isbool (block (block "d" "z" "i") (let ((d "a") (f "a") (y -59)) "c")))))))
(fun (fun1 energy g a b e) (if (<= energy 0) false (block (set! energy (- energy 1)) (block (block (- (set! a "a") (* "energy" "a")) (let ((i -31)) (let ((z -63) (b "b")) "energy")) (> "a" (+ -1 -11)) (- (set! a "g") (sub1 -67))) (fun2 (- (* "a" 78) (let ((f false)) 58)) (block (* 26 47) (set! energy -45) (block "e" "a") (>= -67 -5)) true false (let ((j (block "energy" true false "energy" true))) true) (block (block -90 false "g") (add1 "a") (our_code_starts_here 62 "a" "e" "e" 5 "g") (block "b")) (let ((c (isbool "b"))) (* -83 "energy"))) (* (set! e (sub1 "g")) (let ((g (block "b" "g" "g" -68 "energy")) (f (if "energy" 98 -95)) (h (set! energy "e"))) (sub1 "f"))) (block (> (let ((c "a") (e true)) "energy") (if false -9 "energy")) (if (let ((f "e")) "a") (< -50 90) (let ((h "g")) "b")) (set! g (let ((c "b") (g false)) false)) (block (block "b" 27 "a" -63) (add1 "g") (block -76 false false "e")))))))
(fun (fun2 energy f e i x j z) (if (<= energy 0) 71 (block (set! energy (- energy 1)) (let ((i (block (+ (let ((c "f")) "f") (- "energy" "f"))))) (- (* (set! j "f") (* "i" -34)) (- "f" "i"))))))
(fun (fun3 energy) (if (<= energy 0) 83 (block (set! energy (- energy 1)) (+ (let ((z (let ((z (add1 -81)) (c (> "z" 79))) (block "c" true -80)))) (set! energy (let ((f 31) (e 8) (x 36)) -51))) (block (let ((f (add1 35)) (g (>= "f" 17)) (y (block "f" -33 73 false))) (let ((b -5) (z true) (c "f")) "b")))))))
(fun (fun4 energy a i e h) (if (<= energy 0) 100 (block (set! energy (- energy 1)) (+ (- (let ((z (let ((g true)) false)) (j (let ((a "a")) false))) (- -38 56)) (let ((y (if 42 -81 -42)) (e (if 70 true false))) (set! e -34))) (let ((g -64)) (sub1 (block "h" true true "energy")))))))
(fun (fun5 energy a j c b y z) (if (<= energy 0) false (block (set! energy (- energy 1)) (< (block (let ((d (<= "energy" -51)) (g (>= "b" 46)) (e (let ((y "a")) "d"))) (> 59 "c")) (>= (add1 -81) -89) (let ((h (block "j" false 5 true "z")) (c (- 2 22))) -11) (let ((d (let ((e "energy") (g "y") (z -50)) "a"))) (let ((f false) (y false)) "c"))) (if (let ((z (set! j -90)) (f (set! energy "energy"))) (< 25 26)) (block (let ((d true) (f "b")) false) -57) (let ((f (let ((g "z") (b true)) "b"))) (let ((i "b") (j "c") (c -90)) -34)))))))
(fun (fun6 energy z a i x g j y) (if (<= energy 0) 97 (block (set! energy (- energy 1)) -19)))
(fun (fun7 energy) (if (<= energy 0) 35 (block (set! energy (- energy 1)) (set! energy -52))))
(>= (< (let ((d (+ -36 (let ((i (block (block (* 9 -97) (+ -88 -9)) false)) (e (- (let ((a "i") (f (let ((f -30) (d "f")) "a")) (c (= -1 59))) -92) (block (let ((a true) (j true)) "i") (block -36 "i") (block 98) (let ((loop_var_9 56)) (loop (if (> loop_var_9 (- 56 9)) (block (set! loop_var_9 (- loop_var_9 1))) (break "loop_var_9")))))))) 39))) (z true) (g (isbool (>= (let ((b (< (+ "d" "d") (let ((x false)) -40)))) (set! d (let ((c "d") (j "z")) -17))) (let ((g (<= (block input "d" input "d") 65)) (b (block (let ((a input)) "a") (let ((loop_var_145 -84)) (loop (if (> loop_var_145 (- -84 145)) (block (set! loop_var_145 (- loop_var_145 1))) (break "loop_var_145")))) (let ((z -93) (f "g") (y "f")) true))) (e false)) (let ((b (let ((loop_var_123 "d")) (let ((loop_var_85 "d")) (loop (if (> loop_var_85 (- "d" 85)) (block (set! loop_var_85 (- loop_var_85 1)) (set! b 49) (set! g -62) (set! d "d")) (break "d")))))) (e (fun2 -15 false true "e" true "g" "d"))) (set! b 51))))))) (let ((a (let ((i (isnum (let ((g (let ((z true) (i "z") (b "d")) 65)) (a (let ((e "z") (x -47)) "x")) (b (block "z" true "z" true false))) (= 32 "d")))) (b (let ((c (block (let ((e 100) (c "d")) false) (<= 53 84) (>= -57 "d") "z")) (j (+ (* "d" "d") (add1 69)))) (> (+ -67 "d") (- "j" -22))))) (let ((e (block 58 (let ((a "b") (z "d") (i "b")) "a")))) (+ (block "b" false 64) (- "d" -5)))))) 19)) (let ((loop_var_38 (let ((f -96)) "f"))) (let ((loop_var_85 (+ 10 -32))) (loop (if (> loop_var_85 (- (+ 10 -32) 85)) (block (set! loop_var_85 (- loop_var_85 1))) (break (add1 (add1 (add1 (* "loop_var_85" 0)))))))))) (> 93 (let ((g (let ((g (* (- (let ((d (= true true)) (x (block 98 67 67 -25 false)) (i (- 35 66))) (let ((y "x")) "i")) -46) (let ((x true) (i (block (set! x -69) 59 (let ((z "x") (c true) (e -65)) "e"))) (e (= false (isbool "x")))) (- (our_code_starts_here 15 "i" "e" false "i" "i") (* "i" "i"))))) (c (+ (block (block (block 47 "g") "g" (let ((d false) (h false)) "g") -88)) (* (- (let ((loop_var_145 "g")) (loop (if (< loop_var_145 (+ "g" 145)) (block (set! loop_var_145 (+ loop_var_145 1)) (set! g -44)) (break -16)))) (block "g")) (+ (block "g" false 44) (if "g" -35 "g"))))) (e (<= (let ((z true)) (block (set! g "z") "c")) (add1 (add1 -92))))) (block (let ((f (let ((loop_var_14 "g")) (let ((loop_var_55 -70)) (let ((loop_var_36 40)) (loop (if (> loop_var_36 (- 40 36)) (block (set! loop_var_36 (- loop_var_36 1))) (break 74))))))) (b (block (let ((y false) (h -34) (a 63)) "c") (- "c" 90) (* "f" "c") (= false true) (* 1 53)))) (block (let ((j "e")) false) (< 30 -35))) (< (+ (let ((d -31) (a -18)) "a") (add1 "c")) (set! c (let ((e -99) (f 95) (b "e")) 68))) (* (+ (+ "c" "g") (* -72 "c")) (let ((loop_var_199 "g")) (loop (if (> loop_var_199 (- "g" 199)) (block (set! loop_var_199 (- loop_var_199 1)) (set! g "g")) (break "loop_var_199")))))))) (a (let ((f (isnum (isnum (< "g" (block -49 true -14)))))) (let ((d (* (+ (* 54 -69) (add1 3)) (+ (let ((loop_var_179 18)) (loop (if (< loop_var_179 (+ 18 179)) (block (set! loop_var_179 (+ loop_var_179 1)) (set! f 62) (set! f "g") (set! g -40)) (break "g")))) (- 34 "g")))) (x (= (+ (add1 "d") (let ((h -64) (c 36) (b "g")) 9)) (sub1 (block "d" "f" 6 false "d"))))) (let ((x (let ((e (block "g" "x" "x")) (h (sub1 "d"))) (block -95 "x"))) (g (isbool (let ((loop_var_22 "d")) (loop (if (< loop_var_22 (+ "d" 22)) (block (set! loop_var_22 (+ loop_var_22 1))) (break "f"))))))) (* (set! g "d") (fun6 -46 "f" false input "g" false "g" "g"))))))) (block (let ((j (block (let ((g (isbool input))) (set! g -57))))) "a")))))