(fun (our_code_starts_here energy h) (if (<= energy 0) -8 (block (set! energy (- energy 1)) (let ((x (- (fun2 (block true -31 false "h") (block "energy")) (block -1)))) (+ (set! x (add1 -5)) -11)))))
(fun (main energy) (if (<= energy 0) false (block (set! energy (- energy 1)) (= (let ((x (block (sub1 "energy") (isnum false) (set! energy false) (if false true true)))) (+ (sub1 31) (let ((d true) (z "energy")) "energy"))) (+ (let ((g true)) (set! energy "energy")) (- -53 "energy"))))))
(fun (fun1 energy g e y) (if (<= energy 0) -68 (block (set! energy (- energy 1)) (set! e (- (sub1 (let ((c "energy") (x -2) (y 88)) -66)) "g")))))
(fun (fun2 energy y) (if (<= energy 0) 97 (block (set! energy (- energy 1)) 18)))
(< (+ (* 90 (+ (let ((y (our_code_starts_here (+ (- 0 -56) (let ((loop_var_156 -32)) (loop (if (< loop_var_156 (+ -32 156)) (block (set! loop_var_156 (+ loop_var_156 1)) input -1) (break input))))) (< (block 72) (block 41))))) (let ((x (block (block -56))) (f (* (let ((f "x") (b -4) (h true)) input) (block 18 "x" true true "x")))) (sub1 (+ input "x")))) (let ((d 44) (y (set! d -53))) (+ (block (let ((loop_var_124 "y")) (loop (if (> loop_var_124 (- "y" 124)) (block (set! loop_var_124 (- loop_var_124 1))) (break "d")))) (let ((h "d") (b input) (c false)) 42)) (* (let ((loop_var_37 "d")) (loop (if (> loop_var_37 (- "d" 37)) (block (set! loop_var_37 (- loop_var_37 1)) (set! d 1) (set! y -86) (set! y "y") input -61) (break -58)))) (let ((loop_var_197 input)) (loop (if (< loop_var_197 (+ input 197)) (block (set! loop_var_197 (+ loop_var_197 1))) (break -57))))))))) -12) (> (sub1 (let ((loop_var_77 (block true -62 -46 false 51))) (let ((loop_var_73 (- -14 -14))) (let ((loop_var_27 2)) (loop (if (< loop_var_27 (+ 2 27)) (block (set! loop_var_27 (+ loop_var_27 1))) (break (block (block (block true "loop_var_27" false "loop_var_27") (<= "loop_var_27" "loop_var_27") (set! loop_var_27 47) 59 (block 36 false true false false)) (block (let ((z "loop_var_27") (d "loop_var_27") (e "z")) true)) (if (let ((i false) (y false)) true) (let ((x "loop_var_27") (g true) (e input)) false) (isbool false)) (+ (if 50 "loop_var_27" "loop_var_27") (* "loop_var_27" "loop_var_27")) (set! loop_var_27 (set! loop_var_27 "loop_var_27")))))))))) (- (our_code_starts_here (block (let ((x (let ((x (let ((loop_var_17 -20)) (loop (if (< loop_var_17 (+ -20 17)) (block (set! loop_var_17 (+ loop_var_17 1))) (break false)))))) (<= 19 -17)))) (let ((loop_var_176 18)) (loop (if (< loop_var_176 (+ 18 176)) (block (set! loop_var_176 (+ loop_var_176 1)) -97 95) (break 98))))) (let ((g (<= (block 69 true -79 -85) (let ((d false) (h -11)) input))) (c (>= (* 80 -24) (* -40 59))) (e (block (block "c" true) (* input 69)))) (block (let ((z "c") (c "z")) 75) (block false -38 "g" "e" -20) (block false) (+ 36 38)))) (if (< (- 74 (* 28 -95)) (let ((h (+ -72 78)) (x (+ -64 82))) (* 51 "x"))) true (main (+ (- -53 -19) (block -45))))) (- (* (sub1 (- -72 (block -87 -78))) (let ((loop_var_63 (let ((h 62)) "h"))) (let ((loop_var_174 (let ((j false) (h false)) 65))) (let ((loop_var_98 (block -67 -60))) (loop (if (> loop_var_98 (- (block -67 -60) 98)) (block (set! loop_var_98 (- loop_var_98 1)) (our_code_starts_here -25 true) (if -86 -94 98)) (break (set! loop_var_98 "loop_var_98")))))))) (let ((loop_var_196 (let ((z false) (j -50)) "j"))) (let ((loop_var_88 (let ((z -75) (i "z")) "i"))) (loop (if (> loop_var_88 (- (let ((z -75) (i "z")) "i") 88)) (block (set! loop_var_88 (- loop_var_88 1)) (- (fun1 82 false true 45) -54)) (break 31)))))))))