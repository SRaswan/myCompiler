(fun (our_code_starts_here energy y h) (if (<= energy 0) 82 (block (set! energy (- energy 1)) (fun3 energy (block (set! energy (if true true true)) (block (let ((a true) (b true)) false) (if -75 "h" 75))) (let ((y (> (- 54 -67) (set! energy "y")))) (let ((g (+ 62 -22)) (y (set! g true)) (z (fun3 14 "y" "y" "g" "h" "y" "y" "y" false))) (let ((b true)) "y"))) (let ((a (block (block "h" -2) (set! y false) (block -4 9 "y") (fun2 "y") (add1 "h")))) (let ((i (* "y" 51))) (block 43 99))) "y" (main (- (* -46 53) (let ((a "energy")) "energy")) (+ 62 (set! h -45)) (block (block -35 "h") (set! y false) (isbool false) (set! y false) (- "y" "h"))) (let ((z (let ((j (= false false)) (c (let ((f false) (j "energy") (e 49)) "j"))) (isnum "j"))) (i (- (let ((f true) (y "z") (a "energy")) "h") (let ((c "h")) "energy"))) (c (fun2 (let ((a "z") (x "z") (d 55)) 84)))) (set! energy (- "c" -66))) (let ((g (let ((b (block "h")) (x (let ((f true) (z "y") (e "f")) -69)) (j (let ((e -65)) true))) (> -23 29))) (z (set! g (let ((e "g") (y true) (g -90)) "h")))) (* (block "g" false 69 -93 "h") (let ((e true) (x "e") (g false)) 77))) (< (block (>= "energy" 65) (block false false true) (set! h 9)) (our_code_starts_here (let ((z "energy")) "z") "energy" (isnum true)))))))
(fun (main energy c g) (if (<= energy 0) true (block (set! energy (- energy 1)) (block (set! energy (let ((b (let ((d false) (f "d") (e -26)) 3))) (isbool true))) (let ((i (let ((d (block 8)) (c (isnum false)) (z (let ((h -47)) "c"))) (our_code_starts_here "d" 43 true))) (b (our_code_starts_here (- -91 -51) (block true "c" -87) (fun4 63 "i" "energy" "i" "i" 83))) (a (let ((z (set! c "i")) (f (let ((x 36) (z "i")) -19))) 23))) (set! g (let ((f false) (i "b") (y "energy")) "i")))))))
(fun (fun1 energy f d e) (if (<= energy 0) false (block (set! energy (- energy 1)) (let ((y (block (let ((i (if "f" "d" false)) (y (let ((y "d") (j -11) (i "e")) "i"))) (let ((i -32) (g false)) true)) (set! d (let ((b "f")) -51)))) (x (let ((h (block (* -40 19) (< "energy" -69))) (e (block (isbool true) (block false))) (j (= (* 68 "energy") (add1 -35)))) "f")) (j (isnum (block (let ((d "f")) false) "d" (if "x" -69 "y") (> "f" -88))))) (isbool (block (<= "energy" 6)))))))
(fun (fun2 energy) (if (<= energy 0) true (block (set! energy (- energy 1)) (fun1 energy (set! energy (> (set! energy "energy") (- "energy" "energy"))) (let ((f (set! energy (block "energy" "energy" false -20))) (z (let ((f (block "energy" "energy")) (b (sub1 -25)) (y (isbool false))) (isnum false))) (i (let ((c (let ((d "energy")) "z")) (y (block "f" "energy" false)) (z (- "energy" "f"))) (- -20 "z")))) (let ((z (fun1 -41 true "z" -54)) (j "z") (i (let ((d true) (b "z") (e -32)) false))) false)) (block (>= (let ((g true)) -20) (let ((b true) (g false) (e "energy")) 46)) (let ((y (block "energy" "energy" false)) (i (let ((y false) (c -76) (x false)) -20))) (block -28 "i" 4)) (+ (set! energy 70) (add1 -28)))))))
(fun (fun3 energy i h j f y b d a) (if (<= energy 0) 51 (block (set! energy (- energy 1)) (let ((b (> (add1 (block 16 "energy" "j" "d")) (+ (our_code_starts_here "f" 70 "j") (let ((j "b") (g true)) "a"))))) (let ((i (block (isnum false) (set! d "j") (+ "h" "energy") (= "f" 53) (block -22 false -82))) (b (block (= true "b") (>= -73 "y") (block -80) (+ "i" 20) (* "y" "a"))) (h (> (set! b "d") (sub1 62)))) -82)))))
(fun (fun4 energy f y e a c) (if (<= energy 0) false (block (set! energy (- energy 1)) (block (let ((y (let ((e "c") (i (main 22 9 "e")) (d (set! energy 21))) (let ((d "y")) "e"))) (d (isnum (>= "energy" 83)))) (block (+ -86 -4))) (let ((b (+ (block 58 "y" 3 "e") 48)) (y (let ((h (block true -45 false -5 -100)) (f (* "b" -39)) (x (let ((h -19)) "c"))) (set! h "e"))) (h (let ((b (set! c "f")) (d (let ((c 75) (z true) (i false)) false))) "f"))) (set! a (block false)))))))
true