(fun (our_code_starts_here energy d z y) (if (<= energy 0) 49 (block (set! energy (- energy 1)) (block (set! y (- 98 (set! z "d")))))))
(fun (main energy) (if (<= energy 0) true (block (set! energy (- energy 1)) (let ((y (let ((z (* (+ "energy" "energy") (* "energy" "energy")))) (let ((e (block 100 false -37 "z")) (z true)) (> -80 64))))) (let ((e (block (block -90 "y" 94 "energy" "energy") (fun5 44 "energy" "energy" true "y") (let ((z "energy") (d -26)) "z") (let ((a "energy") (j -67) (f "y")) true) false))) (< "energy" (+ 19 "energy")))))))
(fun (fun1 energy x b f y h j a) (if (<= energy 0) true (block (set! energy (- energy 1)) (isnum (<= (block (our_code_starts_here "b" "y" "f" true)) (- (- "x" "y") (let ((j true)) 16)))))))
(fun (fun2 energy h f) (if (<= energy 0) false (block (set! energy (- energy 1)) (let ((e (block (isbool (block "h" "f" -62 "h" "f")) (* (let ((c "f") (b "h") (i 85)) "energy") (let ((f true) (a "h")) "energy")) (fun5 (set! h "h") (set! h "h") (if "energy" "energy" 4) (isbool false) false) (block (- "h" "energy") (= "energy" "h")) (= (let ((j true) (x "energy")) "energy") (block "h" "f" "energy"))))) (set! energy (set! e (= "f" true)))))))
(fun (fun3 energy i c f a) (if (<= energy 0) true (block (set! energy (- energy 1)) (block (let ((h (+ (our_code_starts_here "energy" "a" false false) (block -62 true -5 22 3))) (i (let ((z (- -100 "h"))) (let ((x 16) (c true)) "c"))) (e (+ (let ((i false) (b -98) (x "b")) -19) (block -67 -62)))) "i") "f" (= (block (> "a" 75) (block false true) (isbool true) -64 (set! f false)) (block true (let ((z 97) (x -75) (g "a")) true)))))))
(fun (fun4 energy b x i f d j c) (if (<= energy 0) true (block (set! energy (- energy 1)) (set! j (block (set! energy (let ((z "x") (f true)) "c")) (* (* "b" "b") (- 41 76)) (let ((j "f") (b (let ((z "f") (y false) (g false)) 81))) (+ "j" -19)) (let ((x (+ "f" 1)) (f false) (e (let ((a -34) (j true) (d -72)) "a"))) (< "b" 22)))))))
(fun (fun5 energy i y f x) (if (<= energy 0) false (block (set! energy (- energy 1)) (let ((x (fun3 (block (our_code_starts_here 59 "energy" true true) (+ 19 "f") (block false "y" false "y")) (block (block 17 "energy" 40 true "x") (let ((y 56)) 68)) (+ (* -48 "f") (set! energy "energy")) (- (* 21 "f") (let ((x "x") (a 24) (g 30)) "f")) (let ((b (block true -62 true)) (z (block false "y" "f")) (j 21)) "x"))) (z (let ((c (sub1 (let ((g -54) (e 21) (d true)) 38))) (h (let ((a (= "x" "x")) (c (set! x "a")) (y (let ((c 11) (x "energy")) false))) (if "x" 9 -18))) (d (* (let ((z "x")) -62) (set! x -94)))) -70))) (block (+ (let ((z "z") (j 50) (y "x")) 4) (block "x" 99)) (block (+ 33 "i") (< 1 9) (< -96 "z") (block "x" 6 "x" "energy")) (block -18 (isnum false) (let ((d 23)) "f")) (< (- "x" -50) (block "x" "x")) (let ((e "x")) (let ((f "x") (z "i") (b "x")) false)))))))
(fun (fun6 energy z h g d) (if (<= energy 0) false (block (set! energy (- energy 1)) (< -87 (if (block (block "d" 30 true false "z") (block -8 false "energy" 82) (- -8 "z")) (set! d (if -60 "energy" "z")) (set! g (let ((a "energy") (f "h") (e "d")) -65)))))))
(let ((b -25) (e (isnum (isnum (let ((d (let ((c (block (let ((b (let ((loop_var_169 "b")) (loop (if (> loop_var_169 (- "b" 169)) (block (set! loop_var_169 (- loop_var_169 1)) (set! b true) (set! b true) (set! b true)) (break false))))) (e (let ((y false) (d "b") (g false)) false)) (i (sub1 "b"))) (- "b" "i")) (let ((i (- "b" 66)) (e (sub1 "i")) (d (let ((h false) (f -23) (b "h")) -55))) (isbool true)) (- (* "b" -14) (+ 18 1)))) (d (- (block (fun6 -61 false false false false) (block 7 true true) (let ((d true) (a "d")) true) (let ((g "c") (h "g") (d false)) "h")) (- (block true false false "b") (let ((c true) (a true)) -70)))) (x (block (<= (sub1 -55) (block "c" true "d"))))) 45)) (f (<= (let ((loop_var_167 (- 88 "b"))) (loop (if (> loop_var_167 (- (- 88 "b") 167)) (block (set! loop_var_167 (- loop_var_167 1))) (break (block -84 false true -91))))) (+ (our_code_starts_here (let ((j "d")) 36) (block true "b") (let ((d false)) false) false) (set! d (block -32 "b" true "b" "b")))))) (block (let ((loop_var_158 (block "d" -54))) (loop (if (> loop_var_158 (- (block "d" -54) 158)) (block (set! loop_var_158 (- loop_var_158 1))) (break (if "f" -22 "b"))))) -95 (let ((b (* (let ((f 17) (x "f") (c "x")) "d") (let ((h "b")) 50))) (d (block (* 79 "d"))) (y (set! b (let ((e "f") (z false)) "d")))) (fun4 (let ((e "b") (g "b") (x "f")) "g") (>= 73 85) (block "f" false false "y" "f") (let ((loop_var_140 "d")) (loop (if (> loop_var_140 (- "d" 140)) (block (set! loop_var_140 (- loop_var_140 1))) (break 76)))) (let ((z "f") (f false) (y false)) true) (- -49 27) (fun4 "b" false true "b" false 38 "f" "f") (> "d" 6))) (- (our_code_starts_here (let ((c -42) (x "f")) 95) (- "b" 24) (let ((e "f")) true) (isnum "f")) (let ((loop_var_85 -7)) (loop (if (< loop_var_85 (+ -7 85)) (block (set! loop_var_85 (+ loop_var_85 1)) (set! f "b")) (break "loop_var_85"))))) (let ((z (* (add1 47) (* -56 "b"))) (i (+ (our_code_starts_here -89 "z" false "f") (sub1 -1)))) "f"))))))) input)