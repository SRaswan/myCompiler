(fun (our_code_starts_here energy j y a c i g z x) (if (<= energy 0) 4 (block (set! energy (- energy 1)) (let ((g (let ((h (= (set! y -23) (+ "energy" "y")))) "j")) (h (+ (let ((c (block "c" false 86 "g")) (f (let ((z "j")) "x"))) (let ((d "g")) "g")) (block (- "i" 97))))) (set! i (let ((z (set! x -12)) (e (set! z false))) (* "y" -23)))))))
(fun (main energy a b) (if (<= energy 0) false (block (set! energy (- energy 1)) (block (<= "a" (block true (if false true true) true (block false -93 -63 "b"))) (block (let ((g (* "b" "b")) (i (block true "g")) (d (let ((z "i")) "energy"))) (let ((z true)) -47)) (isbool (let ((y "energy") (h 58)) true)) (let ((j 81) (x (block false "j" false true)) (i (let ((g 26)) 42))) (set! x 29)) (let ((b (> "b" -2)) (c (let ((b -63) (x -28) (j -93)) -12))) (set! energy "a"))) (<= (- (- 60 -100) (+ "energy" 14)) (- (let ((f 23)) 92) (+ "a" -93)))))))
(fun (fun1 energy b f e d c a i x) (if (<= energy 0) false (block (set! energy (- energy 1)) (> (- (sub1 (set! d "c")) (- (fun7 37) (add1 -52))) (block "b")))))
(fun (fun2 energy h y d) (if (<= energy 0) true (block (set! energy (- energy 1)) (fun8 energy (let ((b true)) (> (block "h" 86 32 "d" 62) (- "energy" "energy"))) (* (let ((y (set! h "energy")) (b "y") (i (< -56 -35))) (* -69 -67)) (+ (- -65 96) (set! h "h"))) (block (let ((h "y")) (let ((h "h") (x "h") (i false)) "h")) (let ((a (- "energy" -97)) (b (block "a" "d")) (f (block -81 "y" false true))) (sub1 "a")) (isnum (let ((i 3) (e "y") (j -95)) false)))))))
(fun (fun3 energy) (if (<= energy 0) 4 (block (set! energy (- energy 1)) (block false (fun7 (block (let ((a "energy") (i "energy") (z false)) 57) (let ((h "energy")) "energy"))) (block -97)))))
(fun (fun4 energy c z y x d h j) (if (<= energy 0) true (block (set! energy (- energy 1)) (let ((x (sub1 (fun3 (sub1 -43)))) (g (sub1 (set! j (* "y" "energy"))))) (let ((e (isbool (set! energy false)))) (> -40 (* 57 "x")))))))
(fun (fun5 energy) (if (<= energy 0) true (block (set! energy (- energy 1)) (fun2 energy (< (* (+ -60 -82) (set! energy "energy")) (block 51)) (let ((z "energy") (c (isnum (>= 87 -2))) (y "c")) (set! y (set! energy true))) (set! energy (fun5 (if false "energy" 95)))))))
(fun (fun6 energy b) (if (<= energy 0) false (block (set! energy (- energy 1)) (isnum (isnum (let ((a (block 34 true false)) (b "a")) (fun4 "b" -22 "b" "b" "energy" "b" "energy" "a")))))))
(fun (fun7 energy) (if (<= energy 0) 18 (block (set! energy (- energy 1)) (let ((y (let ((a (let ((e (<= "energy" "energy")) (z (fun3 -75)) (a (* -77 -47))) (+ -81 "a"))) (y (let ((h (+ 74 46)) (j (fun9 79 "a" false -72 23 67 true true "energy")) (f (< "h" "j"))) (block false "f")))) "a")) (a (block (let ((z (< -9 -6)) (h (block "z" "z" false))) "energy") (> (sub1 61) (set! energy "energy")) (let ((g (let ((f false) (b "y")) "f"))) (< -88 "y")) (- (let ((h false)) -21) 32) false))) (* (let ((j (block "a" 76 false)) (a true)) (let ((g "energy") (y "y")) 66)) (set! a (set! y "energy")))))))
(fun (fun8 energy i x f) (if (<= energy 0) true (block (set! energy (- energy 1)) false)))
(fun (fun9 energy h c b x f z j g) (if (<= energy 0) false (block (set! energy (- energy 1)) (block (set! energy (set! x (block false "g" -45))) (>= (set! j "f") (block (let ((e true)) "c") (block "g" true "x" -9))) (let ((b (* (let ((a -89) (i true)) 78) (fun7 -10)))) (isbool (fun6 -44 89)))))))
58