(fun (our_code_starts_here energy i e y) (if (<= energy 0) 29 (block (set! energy (- energy 1)) (- (let ((y (block (< "i" -22) (block "y" 19 "energy") (block false 1 "i" "y" -36) (< -87 "energy"))) (f (let ((z (fun1 11 "energy" -70 "energy" 85 "y")) (c (fun1 "z" "z" 38 -6 "energy" "y")) (a (* "energy" 20))) (block false true "i" "energy" "y"))) (c (let ((z (set! y "i")) (b (if "y" 85 "z"))) (fun6 28 3 85 "y" "y" "z" -10 "energy")))) (block (set! energy "y") (let ((i 65) (f "f")) "f") (block "i"))) (* (block (* -74 "i") (let ((e true) (a "energy") (y true)) 100) (fun6 "i" "energy" "e" false false "e" "e" "energy") "y" (set! i 3)) (let ((y (+ -43 "i")) (x (block -5 true true)) (f (isbool true))) (fun8 96 "y" 88 true 85 79 false 65)))))))
(fun (main energy i j d y f x b) (if (<= energy 0) true (block (set! energy (- energy 1)) (block (let ((i (* (let ((g true)) "energy") (block true 0))) (g (<= (sub1 21) (let ((d "d") (e false)) -74))) (f (<= (- "x" -80) "y"))) (let ((y (block "f" "x" "b")) (b (block "g" 39 false "g" -84))) (set! f "g"))) (let ((h (* (let ((a false)) 71) 39)) (f (>= (let ((f "h") (g 37) (j "b")) "i") "d"))) (let ((g (let ((a true) (h "y")) "f")) (b (+ 86 "energy")) (y (block false))) (if 54 "energy" 77))) (set! x (< (* "d" 43) (let ((e true) (y "i") (d "b")) 96))) (block (block (let ((x false) (b "d")) "x") (isbool false) (fun7 "y" "y" "energy" false) (let ((d "energy") (f "energy") (g false)) false))) (>= -19 (set! i (block true 28 true true 39)))))))
(fun (fun1 energy f z c y a) (if (<= energy 0) 60 (block (set! energy (- energy 1)) (let ((h (+ -40 (fun8 (sub1 "z") (isbool true) (* 67 -71) false (let ((h false)) -23) (let ((z 7) (h true)) 83) (block 81 false) (sub1 88)))) (y (set! h (<= (- -2 "z") 21)))) (set! energy (sub1 (let ((i "a") (h true) (z "h")) 51)))))))
(fun (fun2 energy x h c b a z g) (if (<= energy 0) true (block (set! energy (- energy 1)) (= (block (let ((z (let ((y 81) (g "c") (h "z")) "g")) (y (let ((d "h")) -47)) (x (set! b true))) (let ((y "b") (j "x") (h "y")) true))) true))))
(fun (fun3 energy y c d b x) (if (<= energy 0) 15 (block (set! energy (- energy 1)) (set! b (block (set! y (+ -81 "y")) (<= (let ((g "c")) 67) (block true -96)) (>= (set! energy -38) (let ((i "x") (f "y") (z true)) -10)) (block (fun3 83 "b" false "b" -62 "d") -19 (* 69 "energy") (set! d -72) -72))))))
(fun (fun4 energy b c a i) (if (<= energy 0) true (block (set! energy (- energy 1)) (let ((a (* (let ((b "i") (c (let ((b 12)) "b")) (i (let ((d 58)) 35))) (set! b 74)) (set! c (add1 -32))))) (if (block (>= 67 "energy") -67) (block (isbool false) (let ((j "c") (z true)) true) (block true)) (let ((z (- -92 "c"))) (let ((d true) (a "d")) false)))))))
(fun (fun5 energy e c) (if (<= energy 0) false (block (set! energy (- energy 1)) (let ((c (let ((j (set! c (let ((g "energy") (e "e") (d "e")) "c")))) (+ (* 55 "e") -69)))) (if (set! c (if 90 "c" false)) (= (isnum true) (let ((z -60) (b 54) (a -32)) false)) (isnum (set! c "c")))))))
(fun (fun6 energy c b j e a g y) (if (<= energy 0) true (block (set! energy (- energy 1)) (isnum (< "g" (if (let ((e -45) (b "energy")) 50) (let ((b "energy")) "energy") (block -43 true "e" 15)))))))
(fun (fun7 energy c b d) (if (<= energy 0) false (block (set! energy (- energy 1)) (block (let ((d (+ (add1 "b") 92)) (c (isbool (let ((y "energy")) true)))) (let ((h (let ((j 28)) 95)) (b (- -23 -83))) "energy")) (let ((a (fun6 "c" (let ((b "energy") (z false) (f "energy")) -62) (- "c" "d") false (let ((a "b")) false) (let ((y false)) -31) (if true "c" "c") (+ 35 61))) (b (= (block true "a" "a") (set! a true)))) (let ((g (> "c" 32))) (let ((e "g") (d true) (c -85)) -67))) (block (block (let ((x true)) 22))) (isbool (= (fun3 50 false false false -83 false) (let ((e -83) (h false) (d false)) -40))) (let ((j (isbool (block true false false))) (x (set! b (block "energy"))) (d "j")) false)))))
(fun (fun8 energy z e c x h d b) (if (<= energy 0) 28 (block (set! energy (- energy 1)) (+ (let ((b (<= (set! energy "c") (add1 -6))) (x (let ((h (fun4 -58 "energy" "d" 44 18))) (* "h" "c")))) (block (block true "energy" true "c" -52) (set! e "b") (block "b" "e" false "e" false) (fun8 60 "x" "h" "b" -65 -21 true "h") "energy")) (let ((b (sub1 (* 24 -64)))) 81)))))
(- (let ((loop_var_200 (let ((z -75) (h true) (f 19)) "f"))) (let ((loop_var_34 (block false -47))) (let ((loop_var_155 (* 27 -69))) (loop (if (< loop_var_155 (+ (* 27 -69) 155)) (block (set! loop_var_155 (+ loop_var_155 1)) (block (let ((f (let ((g (isbool (<= -40 -91))) (b (set! g 47))) (> (let ((g "g") (b "b")) -90) (let ((x "g")) 83))))) "f") (>= (add1 (let ((x (let ((f true)) "f")) (g (block "x" -72 -86 false))) (let ((c -2) (j "x") (h "j")) -91))) (add1 (- (* -56 -52) (block input 62 -95 66)))) (sub1 (let ((z (fun8 (sub1 -21) (= false true) (fun3 -6 false true false 69 false) (fun6 56 input -98 true false 15 -15 -31) (block true 56 true true -26) (fun8 -16 false -23 false 68 -81 true input) (>= -61 -14) (let ((c 14)) 14))) (g (let ((j (<= input -68)) (x (set! j "j"))) (* -100 "z")))) (let ((i -29) (y (* 9 "g"))) (block -13 "z" "y")))) (main (let ((y (sub1 (let ((d false) (x -75) (f "d")) 19))) (x (< (block true -17) (block -38))) (a (let ((d (let ((z false) (x 86) (y "x")) "z"))) (> "y" -94)))) (block (set! a "y"))) -81 (* (block (sub1 -36) (>= 68 -54) (fun1 -9 65 -55 input 72 false) (* input 65) 14) (+ (add1 -48) (let ((a true)) 43))) (block (let ((i (> -6 -15)) (y (block false)) (j (- -46 -55))) (+ "j" -41)) (let ((g true) (j (set! g 49)) (z (let ((d "j") (i "g") (j -79)) "i"))) (block "g" "j" 36 "j" false)) (< (* -55 57) (let ((h true) (g 6)) "g")) (let ((x (let ((x -79)) -51)) (y (let ((c false) (b "c")) "c")) (h (block "y" 20 true "x"))) (set! y "x"))) (fun1 (block (sub1 36) (let ((e false) (z false)) "e") (+ -12 80) (fun1 -16 49 -3 5 24 true)) (let ((b (if false false false)) (a (isnum true)) (h (let ((i 86) (y "a")) -43))) "h") (- (block 58) (let ((d true) (x -22)) 52)) (let ((y (let ((d true)) false))) (- -34 85)) (* (- 24 74) (let ((c 12) (j "c") (x true)) 49)) (let ((z (let ((z 72) (h "z") (g true)) false)) (b (block 56 -62)) (h (add1 -53))) (> "b" -81))) (- (add1 (+ -13 72)) (our_code_starts_here (+ -12 43) (let ((f 84) (x "f")) -50) (fun4 -16 -3 -57 69 -49) (block 38 -15))) (- 61 (sub1 (- -33 -21))) (- (* (* -61 -86) (- 79 -94)) (let ((f (let ((e 43) (c "e") (y true)) "e"))) (set! f "f")))) (fun8 (+ 69 81) (isbool (= (>= -81 -97) (<= 85 40))) (* (- (- -57 88) (if 79 18 -14)) (block (fun1 -78 -81 input -98 -66 false) (our_code_starts_here -50 24 true -100))) (if (<= (block 28 false 78) (sub1 86)) (let ((x (isnum false)) (f (let ((a "x") (g "x") (x -11)) "x")) (d (+ 87 -28))) (set! f true)) (let ((h (block -72)) (f (block "h" -41)) (d (block false false "h" 82))) false)) (if (- (- 43 65) (let ((c true) (a 63)) -51)) (- (let ((c true)) 88) (fun8 -76 false -13 true 19 13 false -97)) (- (let ((y 26) (h -40)) "h") (let ((i -38) (g "i") (j true)) -67))) 66 false (let ((x (fun1 (if 73 -80 -84) (* -41 -79) (our_code_starts_here 82 5 true -35) (sub1 4) (let ((h true) (j -30) (e true)) -24) (let ((e input) (b input)) false)))) (+ (set! x -37) (block -38)))))) (break (let ((c (isbool (block (set! loop_var_155 (block false true)) (let ((b (main "loop_var_155" -36 96 32 -11 79 5 "loop_var_155")) (i (let ((i "loop_var_155") (b true)) true))) (= true true)))))) (- (block (* (- -58 -11) "loop_var_155") (* (fun8 -5 "c" input true "loop_var_155" "loop_var_155" "c" "loop_var_155") (block true false 13 "loop_var_155")) (if (isnum "c") (let ((x -79)) "c") (block false input -14 true)) (set! loop_var_155 (* 23 -15)) (let ((f (set! loop_var_155 -21)) (x (let ((f "c")) "c"))) (let ((f "f") (h false) (e "f")) "f"))) (block (let ((h "loop_var_155") (f (block false)) (i (let ((z "loop_var_155") (a "loop_var_155")) "loop_var_155"))) (let ((f "loop_var_155") (y "f")) "h"))))))))))) -4)