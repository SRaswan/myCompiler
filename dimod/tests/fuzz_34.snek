(fun (our_code_starts_here energy z) (if (<= energy 0) -61 (block (set! energy (- energy 1)) (+ (our_code_starts_here (set! z (+ -80 "z")) (block (block "energy" true "z") (if "energy" false true) (set! z -26))) (set! energy 13)))))
(fun (main energy z g y h f i) (if (<= energy 0) true (block (set! energy (- energy 1)) (<= (let ((x (set! h (if true -37 -29)))) (fun5 (set! h "h") (>= "g" -48) (block 73 "y") (isnum "i"))) (+ (let ((d (+ "y" 88)) (i (let ((b "i") (a 83) (h 62)) "i"))) -1) (add1 27))))))
(fun (fun1 energy j e) (if (<= energy 0) false (block (set! energy (- energy 1)) (main energy (- -13 (let ((a (let ((j "j") (y true)) -41)) (c (isnum true)) (y (let ((f 5)) "c"))) (- -78 "energy"))) (set! j (block (fun6 24 "energy" true false false "j" "energy"))) (* (let ((a 22)) (let ((d "energy") (x "e") (f true)) -29)) "e") "j" (<= (let ((b (- "energy" "e")) (y (let ((z -35) (h true) (j "energy")) "h"))) (* "j" -92)) "energy") (= (* (fun5 53 false "e" false) (fun5 79 true "energy" false)) (let ((d (- -4 -75))) (add1 35)))))))
(fun (fun2 energy) (if (<= energy 0) 55 (block (set! energy (- energy 1)) (- (let ((g (+ (* "energy" "energy") (fun2 -57))) (c (let ((f (set! energy -42)) (z (isnum false)) (y (block "z" "energy" true "g" 19))) (let ((x "z") (z -87) (d 74)) false)))) "energy") (block (main (let ((y true)) 5) -4 (add1 42) (block false "energy" true "energy") (let ((c true)) -5) (block 46 69 -19 -76 false) (block false false true true true)) (let ((e (* "energy" 23)) (j (add1 76)) (d (sub1 "e"))) (sub1 "energy")))))))
(fun (fun3 energy g h i f a b x) (if (<= energy 0) 77 (block (set! energy (- energy 1)) "g")))
(fun (fun4 energy g z y f i a c b) (if (<= energy 0) -33 (block (set! energy (- energy 1)) (let ((b (fun6 90 (fun2 (- 70 32)) (> (- "energy" "c") (sub1 "c")) (= (main "c" 2 -43 "g" "c" "b" false) (let ((b "y") (f true) (g "i")) "y")) (let ((e (if -77 49 -37)) (x (let ((g "e")) true))) (let ((z -25) (y "e")) true)) (let ((e (* 53 53))) "g") (if (set! z "f") (* "c" -41) (set! f -9)))) (x (isnum (>= (let ((e "g") (j "y") (x "f")) 80) (let ((y 53)) "y")))) (i (let ((b (set! i (> -82 40)))) (isbool (set! a "b"))))) (add1 (block (set! y false) (block "energy" -43 "b" -3) (let ((j false) (y "y") (f false)) 55) (fun1 "energy" "energy" false) (add1 -87)))))))
(fun (fun5 energy x d z) (if (<= energy 0) 31 (block (set! energy (- energy 1)) (- (block (sub1 (set! z "z")) (let ((x (set! d "d")) (j (add1 "x"))) (isbool "d")) (let ((f (set! energy "d"))) (>= -37 -88)) (* (fun7 8 "d" true "d" "d" "d") (let ((c 20) (j 81)) "energy")) (let ((y (- -100 "z")) (i (block "d" "energy" "d" 19)) (b 21)) (- 2 "b"))) (set! z (- (set! x "x") (set! x "energy")))))))
(fun (fun6 energy d h f a c e) (if (<= energy 0) 70 (block (set! energy (- energy 1)) (let ((a (add1 "e")) (x (let ((x "a") (j (block (block "f" "c" 5) (* 4 -65)))) (isnum (set! d false)))) (j "c")) (block (block (add1 -87) "e" (>= "h" -5) (> "e" 57)) (- (+ -57 "d") (block false "j" "energy")))))))
(fun (fun7 energy z a y x i) (if (<= energy 0) 14 (block (set! energy (- energy 1)) (let ((z (set! x (block (set! z 5) (= 68 "energy") 60 (add1 "z")))) (e (* "energy" 92))) (let ((c (* (let ((c "y") (f "x") (e "z")) -80) (let ((d "z") (b false) (a true)) -31)))) (block (= "y" false) (+ 57 4)))))))
(block (let ((loop_var_130 (+ -41 -77))) (loop (if (> loop_var_130 (- (+ -41 -77) 130)) (block (set! loop_var_130 (- loop_var_130 1)) (let ((b (<= (block (block (main -24 58 45 81 -28 true input) (- -3 -88) (isbool true) (block -20 90 false -25 true) (let ((g false)) true)) (* (* -84 -63) (* -13 -39)) (block (block false false true) (+ -16 67) (let ((h true)) "h")) (fun5 (if false 40 5) (let ((x -45) (z "x")) input) (let ((h false) (f false)) -44) (let ((d -90) (g 58)) true))) -70)) (a (let ((d (set! b (* (if -22 90 -58) (* -43 3)))) (j (+ (set! d (+ "d" "d")) (block (let ((x "d")) true) (< 0 50) (let ((j -54) (e 43) (f false)) "j"))))) false))) (- (block (let ((y (= "a" "b")) (g (let ((f 1)) 12))) (if false "g" 72))) (block (block (isnum true)) (block (let ((j true) (h "a") (x -23)) "x") (<= 38 42) (<= 76 -34) (* 9 27)) (let ((x (set! b 97)) (f (let ((f input)) false)) (i (let ((d "f") (e true) (z -83)) false))) (set! i -53))))) -6 (* (fun3 (* (if false (block 4 60) (block -49 false false -70)) -4) (if (let ((h (add1 -12)) (f (set! h true)) (i (add1 "h"))) (let ((c "f") (y 81)) "y")) (>= (sub1 -77) (let ((h true)) 57)) (let ((z (let ((e 14)) true)) (f (>= 17 97))) (if 42 "z" true))) (if (block (block 0 true) (block -23 false true) (block 5 23 true 47 78) (let ((g false)) -72) (let ((e true) (x 97) (g true)) "x")) true (> 78 (* 15 9))) (fun1 (let ((z (block 48 12 false 1)) (j (sub1 -54))) "z") 66 (isbool (let ((e 44) (c "e")) true))) (fun1 (- (let ((x true) (j "x") (c 17)) "c") (+ -6 -95)) (let ((y (if true true false))) 77) (main (- 14 43) (add1 -28) (add1 57) (let ((y false) (f "y") (b -29)) "b") (* -25 46) (= 22 -44) (main -10 -83 19 29 -71 false false))) (let ((j (> (add1 -54) (+ 59 -67)))) (let ((f (<= 4 -27)) (z (let ((f "f") (e 91)) true)) (c (<= -61 5))) (>= -57 56))) (= (let ((z (add1 -57))) "z") (add1 (if false -47 -38))) (isnum (main (block 15 true true -87) -10 (block true -10) (let ((f 52)) "f") 68 (if 3 true false) true))) (* (block (* -23 (block -6 54)) (sub1 (let ((z -34)) -39))) (+ (* (block -12) (fun7 -38 false false input true false)) 21)))) (break -76)))) (block (let ((loop_var_163 -75)) (loop (if (> loop_var_163 (- -75 163)) (block (set! loop_var_163 (- loop_var_163 1))) (break (isbool (block (let ((y (let ((d "loop_var_163") (i "loop_var_163") (f true)) true)) (e (- "loop_var_163" "loop_var_163")) (a (- 33 "e"))) (sub1 "a")) (<= "loop_var_163" (let ((b true)) -45)))))))) (let ((loop_var_86 (fun6 -67 -92 false false false 35 0))) (loop (if (< loop_var_86 (+ (fun6 -67 -92 false false false 35 0) 86)) (block (set! loop_var_86 (+ loop_var_86 1)) -81) (break (sub1 "loop_var_86"))))) (let ((loop_var_110 (- -48 89))) (let ((loop_var_102 (fun2 -71))) (loop (if (> loop_var_102 (- (fun2 -71) 102)) (block (set! loop_var_102 (- loop_var_102 1)) (isbool (let ((g (block (let ((f false) (z false)) false) (fun1 10 3 true) (< -64 2) (block 83 22 false) (block -98 false true true)))) (fun1 (let ((b 5) (j true) (c "g")) 69) 41 (block false false 35 "g"))))) (break (main (+ (set! loop_var_102 (if -11 "loop_var_102" "loop_var_102")) (block (main "loop_var_102" "loop_var_102" 94 -44 "loop_var_102" true false) 74)) (block (block 81 (sub1 "loop_var_102") (fun2 "loop_var_102") (let ((y true) (h 33)) false)) (let ((c (let ((c true)) "c")) (y (fun7 "loop_var_102" input "c" input false false))) (let ((f "y")) -29))) (* (let ((j (let ((d "loop_var_102")) false)) (z (let ((b "j")) false)) (x (= "j" "j"))) (let ((f true) (d -56) (z 34)) "loop_var_102")) (set! loop_var_102 (- "loop_var_102" "loop_var_102"))) (- (add1 (- "loop_var_102" 82)) (+ (block true "loop_var_102" "loop_var_102" 62 -83) (fun5 "loop_var_102" true "loop_var_102" true))) (set! loop_var_102 (+ (set! loop_var_102 36) (if -32 30 "loop_var_102"))) (>= (* (+ 60 27) (sub1 "loop_var_102")) (sub1 "loop_var_102")) (let ((c (+ (let ((d true) (a -15)) 70) (let ((d "loop_var_102") (h false)) 94)))) (block (let ((e 27) (d "loop_var_102")) "e") (set! c false))))))))) (let ((j true) (y (let ((e (let ((b (let ((y (let ((c (let ((a false) (i false) (f false)) 11))) (let ((d 64)) "d")))) (let ((loop_var_98 "y")) (let ((loop_var_159 -33)) (loop (if (< loop_var_159 (+ -33 159)) (block (set! loop_var_159 (+ loop_var_159 1)) (set! y "j") (set! y true)) (break false)))))))) (<= 52 -25)))) (= (* (let ((b (let ((h true)) -53))) (- 45 -21)) (+ (if "j" 11 -65) (let ((loop_var_183 -26)) (let ((loop_var_48 -31)) (loop (if (> loop_var_48 (- -31 48)) (block (set! loop_var_48 (- loop_var_48 1)) (set! j 89) (set! j 59) (set! e -83) -45 83) (break -14))))))) (set! j (* (* 72 -34) (set! e 82)))))) (g (let ((loop_var_15 (set! y 29))) (loop (if (> loop_var_15 (- (set! y 29) 15)) (block (set! loop_var_15 (- loop_var_15 1)) (set! j (<= (- (set! y -12) (block 24 -69 "y" 79 -4)) (let ((x (main -38 62 8 73 -19 "y" "y")) (e (set! x 39))) (* 98 "e")))) (set! y (block (isnum (let ((y false) (i true) (h false)) "y")))) (set! j (>= (let ((g (let ((f "j") (c 93) (i "f")) true)) (f (let ((d -1)) "d")) (b (add1 -23))) (+ "f" "b")) (let ((z (if "y" false "y")) (a (- 85 73)) (y (let ((g "a") (b -92) (z false)) "b"))) "y")))) (break (set! j (if (set! loop_var_15 25) (block input true true "j") (block "loop_var_15" "y" "j"))))))))) (let ((g (set! j (< (+ (let ((y 34) (h 57) (i "y")) -26) (let ((f input)) -49)) (+ (- 47 -98) (fun7 -86 "j" "g" false true "y")))))) (< -10 (sub1 (block (let ((loop_var_36 54)) (loop (if (< loop_var_36 (+ 54 36)) (block (set! loop_var_36 (+ loop_var_36 1)) -5 59 -30) (break 84)))) (let ((e true) (b -24) (h "g")) -28) (let ((loop_var_12 70)) (loop (if (< loop_var_12 (+ 70 12)) (block (set! loop_var_12 (+ loop_var_12 1)) "y") (break true)))) (* -44 75) (- -31 5)))))) (isnum (let ((y (add1 (let ((z (let ((e false) (c (= 68 35))) (sub1 -45)))) (let ((b true)) (set! z "z")))))) -71))) (* (let ((g false)) (let ((z (< (let ((h (* (let ((z "g") (c 96) (e -87)) "e") (block 27))) (b (set! g (let ((loop_var_126 97)) (loop (if (> loop_var_126 (- 97 126)) (block (set! loop_var_126 (- loop_var_126 1)) (set! h "h") (set! g "h") (set! h "h")) (break "loop_var_126")))))) (y (sub1 (let ((j false) (z "j") (a "h")) "b")))) (if (let ((loop_var_186 "h")) (let ((loop_var_114 99)) (loop (if (> loop_var_114 (- 99 114)) (block (set! loop_var_114 (- loop_var_114 1)) (set! h "b") (set! g "y")) (break "loop_var_114"))))) -96 (add1 -80))) (block (set! g (let ((g 66) (b -97) (y false)) "b")) (+ (let ((i "g")) 3) (- -94 79)))))) (set! g (let ((z (block (block false "g" "g") (block "g" 31 -6 false) (let ((d "z") (h "z")) -19) (- 74 -30))) (f (+ (add1 "z") (- -89 8)))) (let ((c (* "z" "f")) (a (let ((y -60) (e "y")) "z"))) (let ((j false) (y "j")) 23)))))) (let ((g (let ((d (add1 (let ((j (> (let ((i 37)) -17) (block 61)))) (- (let ((z 5) (g "z")) "z") (let ((j false) (i -37)) "i"))))) (y (let ((c (<= (let ((d (let ((g false) (y "d")) true)) (j (let ((b true)) "d"))) (block -100 false "j")) (let ((i (block "d")) (c true)) (+ 62 "d")))) (b (- (let ((c (let ((loop_var_146 83)) (let ((loop_var_39 "d")) (loop (if (> loop_var_39 (- "d" 39)) (block (set! loop_var_39 (- loop_var_39 1)) false) (break "c")))))) (f (- -53 23))) (let ((f true) (i "c") (j "f")) 97)) (+ (let ((a 8) (d 94)) 30) (fun7 "d" false true false false "c"))))) (fun5 (block (let ((loop_var_76 "b")) (let ((loop_var_82 "b")) (loop (if (< loop_var_82 (+ "b" 82)) (block (set! loop_var_82 (+ loop_var_82 1)) 28) (break -19))))) (- 36 "b")) (<= (sub1 "b") (- "b" "d")) "d" (>= (let ((j false) (c "b")) -64) (sub1 7))))) (i (block (- (* (* -4 -82) (- 69 "d")) (* (let ((y input) (e "d") (a 74)) 11) (our_code_starts_here 20 "d"))) (block (let ((loop_var_17 34)) (let ((loop_var_132 2)) (loop (if (> loop_var_132 (- 2 132)) (block (set! loop_var_132 (- loop_var_132 1)) "d") (break -47))))) (let ((loop_var_156 "d")) (let ((loop_var_13 "d")) (loop (if (> loop_var_13 (- "d" 13)) (block (set! loop_var_13 (- loop_var_13 1)) (set! y true) (set! y false) false false) (break false))))) (let ((h (set! d "d")) (d (sub1 "d")) (z (+ "d" -62))) (block "y" true)) (let ((h (let ((i "d")) "i")) (x (let ((h false)) true))) (+ 99 -38)) (- (if "d" 5 "d") (block true "y" -41))) (block (> (+ "d" "d") (set! y -95)) (* (let ((x 45) (e "x") (b "y")) 28) (let ((loop_var_31 58)) (loop (if (< loop_var_31 (+ 58 31)) (block (set! loop_var_31 (+ loop_var_31 1))) (break 72)))))) (add1 (sub1 (- 17 63))) (let ((loop_var_199 (sub1 81))) (loop (if (> loop_var_199 (- (sub1 81) 199)) (block (set! loop_var_199 (- loop_var_199 1)) (set! d (set! d "d")) (set! y (if "d" "d" "d")) (set! d (block "y" "y" false -21))) (break (set! loop_var_199 "loop_var_199")))))))) "i")) (z (let ((i (let ((loop_var_156 (add1 89))) (loop (if (> loop_var_156 (- (add1 89) 156)) (block (set! loop_var_156 (- loop_var_156 1)) (let ((d (<= "g" "g")) (z (let ((a "g") (b "a")) true)) (e (if "g" 48 15))) (let ((y true) (e 1)) true)) (set! g false) (let ((h (block "g"))) true)) (break (fun1 (let ((c "g")) "c") "g" false)))))) (a (add1 (let ((a (let ((loop_var_137 2)) (loop (if (> loop_var_137 (- 2 137)) (block (set! loop_var_137 (- loop_var_137 1))) (break -45)))))) (let ((loop_var_94 "a")) (loop (if (< loop_var_94 (+ "a" 94)) (block (set! loop_var_94 (+ loop_var_94 1)) (set! a -16) (set! i 45) (set! g "a")) (break "loop_var_94"))))))) (b (- (- (* (let ((b "i")) -85) (let ((loop_var_74 "a")) (loop (if (> loop_var_74 (- "a" 74)) (block (set! loop_var_74 (- loop_var_74 1))) (break 11))))) (* (let ((loop_var_106 51)) (let ((loop_var_105 79)) (loop (if (< loop_var_105 (+ 79 105)) (block (set! loop_var_105 (+ loop_var_105 1)) (set! g 20) (set! g -73) "g") (break "g"))))) (let ((e "i")) -51))) (let ((d (let ((loop_var_94 "g")) (let ((loop_var_65 "g")) (loop (if (< loop_var_65 (+ "g" 65)) (block (set! loop_var_65 (+ loop_var_65 1)) "a") (break -43)))))) (i (> (let ((f -92) (d "i")) "a") (block "a" 33 "a"))) (g -57)) (let ((x (< 46 "a"))) (let ((loop_var_40 "g")) (loop (if (> loop_var_40 (- "g" 40)) (block (set! loop_var_40 (- loop_var_40 1))) (break "g"))))))))) "i"))) (let ((loop_var_107 (let ((e true) (y "z")) 73))) (loop (if (< loop_var_107 (+ (let ((e true) (y "z")) 73) 107)) (block (set! loop_var_107 (+ loop_var_107 1)) (let ((j (set! g (main "g" 96 "g" 21 "g" "z" "z")))) (sub1 (block "g"))) 93 (sub1 (set! z (let ((f "g") (a 50) (x 17)) "x")))) (break (block (- (let ((x 85)) "g") (sub1 96)) (+ (fun2 "loop_var_107") (add1 "loop_var_107")) (add1 (let ((g "z") (y 28) (a "loop_var_107")) 57))))))))) (let ((z (block (let ((g (let ((e (let ((x (let ((loop_var_111 15)) (loop (if (> loop_var_111 (- 15 111)) (block (set! loop_var_111 (- loop_var_111 1)) -91 -1) (break "loop_var_111")))))) (let ((e (block true false false 25)) (a (fun3 "e" true true true false false false input))) (let ((y "e")) true)))) (i (let ((loop_var_138 (let ((y -17) (d true) (b "y")) "b"))) (loop (if (> loop_var_138 (- (let ((y -17) (d true) (b "y")) "b") 138)) (block (set! loop_var_138 (- loop_var_138 1)) (* 60 49) (* 71 8)) (break (* "loop_var_138" 0))))))) input)) (y (* -16 (let ((loop_var_86 (block -7))) (loop (if (> loop_var_86 (- (block -7) 86)) (block (set! loop_var_86 (- loop_var_86 1)) (set! g (block 38 13)) (set! g (add1 -36))) (break 92))))))) (+ "y" (- (block (let ((f "y")) "f") (let ((loop_var_168 95)) (loop (if (< loop_var_168 (+ 95 168)) (block (set! loop_var_168 (+ loop_var_168 1)) "y" "y" "y") (break 63)))) (let ((loop_var_167 "y")) (loop (if (> loop_var_167 (- "y" 167)) (block (set! loop_var_167 (- loop_var_167 1)) (set! g 4) (set! y 31) (set! g -51) "y") (break 79))))) (+ (let ((i "g") (c "i") (g "g")) "y") (block -78))))) (<= 65 (- (let ((g (block (isnum true) (let ((j false)) -64) (if false -60 78) (let ((z -100)) input) (block true false true))) (h (isnum (<= 15 -14)))) (let ((loop_var_115 89)) (let ((loop_var_112 -77)) (loop (if (< loop_var_112 (+ -77 112)) (block (set! loop_var_112 (+ loop_var_112 1))) (break "loop_var_112")))))) (+ (let ((a (let ((x -49)) 44)) (x "a") (e (block true false -32))) (let ((loop_var_75 "x")) (let ((loop_var_139 "e")) (let ((loop_var_101 48)) (loop (if (< loop_var_101 (+ 48 101)) (block (set! loop_var_101 (+ loop_var_101 1)) "e" "e") (break 94))))))) (* (block false 85) (block -4))))) (isbool (isnum (block (- (if true 66 -16) (block -67 true 67)) (let ((z (isnum input)) (b (* 86 -73))) "z")))))) (f (* (block (- (let ((h (let ((f (sub1 -5))) (sub1 50))) (f (* (- 79 "h") "h")) (g (let ((loop_var_139 68)) (loop (if (< loop_var_139 (+ 68 139)) (block (set! loop_var_139 (+ loop_var_139 1)) (set! h 93) (set! f "h") (set! h "f") -16 -84) (break -19)))))) (let ((e (> "f" "g"))) (- 65 -25))) (* (- (let ((j "z") (a true) (h -23)) "h") (let ((loop_var_66 -78)) (loop (if (< loop_var_66 (+ -78 66)) (block (set! loop_var_66 (+ loop_var_66 1)) (set! z 67) (set! z -11) (set! z 33) 58 -73 -79) (break "loop_var_66"))))) (* (+ 87 -97) (sub1 -19)))) (our_code_starts_here (let ((b (set! z true)) (c (block (let ((e 61) (y "z") (i -20)) true)))) (add1 (let ((loop_var_178 32)) (loop (if (< loop_var_178 (+ 32 178)) (block (set! loop_var_178 (+ loop_var_178 1))) (break "loop_var_178")))))) (let ((loop_var_150 (set! z -40))) (let ((loop_var_152 (set! z 31))) (loop (if (> loop_var_152 (- (set! z 31) 152)) (block (set! loop_var_152 (- loop_var_152 1)) (set! z (- 74 -30))) (break (let ((h true) (c "loop_var_152")) -96)))))))) (let ((z (block (add1 (let ((d (<= 6 97))) (let ((y true) (b "d")) 97)))))) (block (> (let ((loop_var_51 59)) (loop (if (< loop_var_51 (+ 59 51)) (block (set! loop_var_51 (+ loop_var_51 1)) (set! z "z") (set! z "z")) (break -2)))) (let ((loop_var_15 -91)) (loop (if (< loop_var_15 (+ -91 15)) (block (set! loop_var_15 (+ loop_var_15 1)) (set! z "z") (set! z 48) (set! z "z")) (break 51))))) (= (set! z (let ((a "z") (c false) (d false)) false)) (let ((x (let ((a "z") (h "z") (i false)) "i"))) (set! z "z"))) (set! z (let ((y (< "z" -33)) (d (isbool "y"))) (sub1 "z"))) (let ((a (sub1 (add1 -100))) (i "a") (y (add1 "i"))) (add1 (block "z" "z" -99))))))) (g (let ((loop_var_87 (block "f" false -8))) (loop (if (< loop_var_87 (+ (block "f" false -8) 87)) (block (set! loop_var_87 (+ loop_var_87 1))) (break (= (add1 "f") (sub1 (block (let ((g true)) false) (let ((i "f") (j "f") (g "loop_var_87")) "loop_var_87") (block -14 -55 "f" "z" "f")))))))))) (- (let ((loop_var_51 (+ "f" -17))) (let ((loop_var_84 (let ((i "g")) -4))) (loop (if (< loop_var_84 (+ (let ((i "g")) -4) 84)) (block (set! loop_var_84 (+ loop_var_84 1)) (set! z (+ "f" (let ((f (block true "g" true)) (e (let ((a "z") (z true) (e true)) "z")) (c (let ((z "f") (j false) (c "g")) 12))) (block false true -92 "f" "c")))) (set! z (- (set! z (fun2 -3)) (let ((f (fun1 "f" "f" "g")) (c (let ((e true)) false)) (h (block "f" 49 "f" "f" true))) (sub1 "f")))) (let ((z (block (set! z "f") false (let ((h "f") (f "z")) "f") (set! g "g") (let ((x 23) (a 0)) input)))) (- (block input 32 "f") (block -39 "f")))) (break (+ (let ((y (if "f" "f" "loop_var_84"))) (+ -23 74)) (- (fun3 "loop_var_84" false false true "z" "z" false "z") (- "loop_var_84" 75)))))))) (block (let ((y (let ((a (main (- -35 -62) (block 79 "f" false "f") (+ -100 "f") (let ((loop_var_174 47)) (let ((loop_var_113 -93)) (loop (if (< loop_var_113 (+ -93 113)) (block (set! loop_var_113 (+ loop_var_113 1)) (set! g 17) (set! z -29) (set! g 89)) (break 70))))) (* 24 98) (let ((j "f") (f false)) "g") (= "f" -65))) (e (block (main "a" "a" "a" "a" 31 false input) (block -18) (let ((loop_var_11 "f")) (loop (if (> loop_var_11 (- "f" 11)) (block (set! loop_var_11 (- loop_var_11 1)) (set! g -100) (set! z "f")) (break "loop_var_11")))) (let ((y "f") (g true) (e -98)) 40) "z"))) (block (- -98 -98) (let ((f "z")) "f") (let ((i -29) (x "g")) false) (< 32 "f") (< -69 "a"))))) (let ((a (<= (let ((z "f")) 49) -17))) "a")) (block (add1 (+ (sub1 "f") (block 52 "f"))) (add1 (set! g (let ((d 99) (y 76) (h "g")) -72))) (if (isbool (>= -45 "f")) (+ (let ((loop_var_31 "f")) (loop (if (> loop_var_31 (- "f" 31)) (block (set! loop_var_31 (- loop_var_31 1)) -71 "f") (break 35)))) (* -44 "f")) (fun2 (set! z "f"))) (set! g (let ((j true) (c (<= 32 "f")) (g (isbool true))) (- "f" 69))) (- (block (let ((loop_var_92 "f")) (let ((loop_var_151 -39)) (loop (if (> loop_var_151 (- -39 151)) (block (set! loop_var_151 (- loop_var_151 1)) "f" "f" 51) (break "loop_var_151"))))) (let ((b true) (c -9) (j "c")) "f")) (* "f" (+ "f" 63)))) (* (+ (set! g "f") (- (* "f" -3) (let ((c false)) -46))) (let ((y (- "f" (let ((x true) (g 72)) 10))) (z true)) (block (main -16 "y" 66 "y" 39 "z" true) (+ 17 -20))))))) (let ((g (* (- (* (add1 (let ((loop_var_157 88)) (let ((loop_var_178 75)) (loop (if (< loop_var_178 (+ 75 178)) (block (set! loop_var_178 (+ loop_var_178 1)) -82 98 47) (break -57)))))) (if (- (block true -43) (block 90 -61 -48 false 16)) (- (let ((loop_var_173 53)) (loop (if (> loop_var_173 (- 53 173)) (block (set! loop_var_173 (- loop_var_173 1))) (break -36)))) (fun5 14 input -46 true)) (add1 (let ((c true) (i true)) 64)))) (let ((h (let ((g (block (let ((d -20) (h "d")) false) (block 47 true) (let ((x 1) (b 19) (f false)) "f") (block true))) (a (block (block true) (> 39 -29) (fun1 -13 20 "g") (let ((z -76) (x input)) "g") (let ((f "g")) -57))) (f (if (* "a" "a") (block -93 false "g") (let ((loop_var_53 "a")) (let ((loop_var_60 "a")) (loop (if (> loop_var_60 (- "a" 60)) (block (set! loop_var_60 (- loop_var_60 1)) (set! a true) (set! a true) true "g" false) (break false)))))))) (- (* 22 -5) (+ 49 "a"))))) 88)) (let ((g (>= (let ((f (>= (let ((z 87) (h false) (i "z")) "i") (if true 5 66))) (z (let ((y (block "f" -98 50 true)) (i (<= 100 -15))) 15))) (- (set! z "z") (let ((b -54) (d input)) 60))) (block (- (let ((loop_var_126 -22)) (let ((loop_var_151 -84)) (loop (if (> loop_var_151 (- -84 151)) (block (set! loop_var_151 (- loop_var_151 1))) (break "loop_var_151"))))) -9) (fun7 (+ -96 59) (block false true false) (let ((y false) (j "y") (a -87)) false) (let ((z -12) (y "z")) true) (isbool false) (block false false)))))) (add1 (block (block (set! g false)) (block (let ((i true)) true)) (let ((b (let ((g -11) (d "g")) "d")) (y (if 65 "g" true)) (c (block true "y" 92))) (* 52 48))))))) (b (- (let ((loop_var_132 (block "g" "g" -78 true 76))) (loop (if (< loop_var_132 (+ (block "g" "g" -78 true 76) 132)) (block (set! loop_var_132 (+ loop_var_132 1))) (break "loop_var_132")))) (let ((loop_var_65 (set! g "g"))) (let ((loop_var_120 (+ -75 "g"))) (let ((loop_var_94 (let ((i false) (f -70)) -92))) (loop (if (< loop_var_94 (+ (let ((i false) (f -70)) -92) 94)) (block (set! loop_var_94 (+ loop_var_94 1)) (set! g (set! g (* (sub1 -40) (* -96 96))))) (break (add1 (let ((j (let ((j true) (d true)) "loop_var_94"))) (* -26 -53)))))))))))) (block (isnum (>= (let ((x (block (block true -63) (+ -46 "b") (block 95) (* "g" -61)))) (set! x (set! g "g"))) (- (fun7 (let ((loop_var_29 "b")) (let ((loop_var_54 "b")) (loop (if (> loop_var_54 (- "b" 54)) (block (set! loop_var_54 (- loop_var_54 1)) "g") (break 31))))) false (<= "b" -22) (set! g true) (main 24 -10 10 25 "g" false true) (isnum false)) -32))) (block (* (let ((i (block (block "b" true 67 true "g") (isnum true))) (a (let ((a 70)) (- -92 -39)))) (let ((loop_var_77 21)) (loop (if (< loop_var_77 (+ 21 77)) (block (set! loop_var_77 (+ loop_var_77 1))) (break 40))))) (let ((c (let ((loop_var_77 -41)) (loop (if (> loop_var_77 (- -41 77)) (block (set! loop_var_77 (- loop_var_77 1))) (break true)))))) (let ((e (- "g" "b")) (j (let ((d "g")) "d")) (f (let ((loop_var_171 "j")) (loop (if (< loop_var_171 (+ "j" 171)) (block (set! loop_var_171 (+ loop_var_171 1)) "c" "c" true) (break true)))))) (add1 86)))) (+ (let ((loop_var_89 (+ "b" 53))) (loop (if (> loop_var_89 (- (+ "b" 53) 89)) (block (set! loop_var_89 (- loop_var_89 1)) (set! b (block -79 95)) (set! g (* -99 64)) (set! b (block true true -31 -65 99)) (if "g" "b" "b") (- "b" -10)) (break (set! loop_var_89 "loop_var_89"))))) (let ((i (let ((a (let ((x "g")) -74))) (let ((z -19) (a false) (g false)) -7))) (g false)) (- (let ((d input) (z "i") (c -61)) "b") (+ "b" 80)))) (<= (let ((e (let ((h (let ((y true)) "y")) (e (* "b" -48)) (g (block true))) (let ((y "e") (i 50)) "i"))) (j (- (let ((c true)) "g") (* -37 60))) (a true)) (+ (let ((e false) (j -50)) 24) (set! e 41))) (+ (let ((x (<= "b" 69))) (+ -66 "b")) (let ((loop_var_102 "b")) (loop (if (< loop_var_102 (+ "b" 102)) (block (set! loop_var_102 (+ loop_var_102 1))) (break "b")))))) (block (let ((x (let ((e (if true -38 "g"))) true)) (h (let ((e (+ "b" "b")) (a (let ((loop_var_133 -16)) (let ((loop_var_26 -57)) (loop (if (> loop_var_26 (- -57 26)) (block (set! loop_var_26 (- loop_var_26 1)) (set! x "g") (set! b -49) (set! e "b")) (break 49))))))) (+ -89 "a"))) (f (let ((a (block "x" 82))) (let ((f -60) (c false)) true)))) (let ((z (block "h" "b")) (g input)) (>= "b" 79))) (* (block (set! g "b") (add1 "b") -89) (let ((a (block false "g" true -15 false))) (sub1 -15))) (add1 (set! g (let ((j 81) (h false)) "g")))) (let ((z (isnum (let ((loop_var_165 40)) (loop (if (< loop_var_165 (+ 40 165)) (block (set! loop_var_165 (+ loop_var_165 1)) false) (break false)))))) (a (block (* (- "b" "b") (block "g")) (- (block "z" "z" "g" "z" "g") 98) true)) (y (let ((z (isbool false)) (a (let ((y true)) (block "g"))) (y (fun1 (block true "g") "b" (<= 100 16)))) (block (block "g" "b") (block "a") "y" (block "g" "a" "b" "g"))))) (let ((loop_var_53 (let ((b "g")) -100))) (loop (if (< loop_var_53 (+ (let ((b "g")) -100) 53)) (block (set! loop_var_53 (+ loop_var_53 1)) (set! g (if true "g" "b")) (set! g (add1 -44)) (set! b -36)) (break (block 4))))))) (isnum (main (set! b (let ((c (let ((d true) (z -66)) "d"))) (* 27 78))) (add1 -76) (- (block (block 37) (isnum true) (let ((loop_var_93 35)) (loop (if (> loop_var_93 (- 35 93)) (block (set! loop_var_93 (- loop_var_93 1))) (break false)))) (let ((e true) (z "e") (b "b")) 97) (let ((e false) (c -18)) 61)) (set! g (set! g "g"))) (let ((x false)) (- (block "g") (set! b 68))) (* (let ((h false)) "g") (block (let ((loop_var_159 -22)) (loop (if (< loop_var_159 (+ -22 159)) (block (set! loop_var_159 (+ loop_var_159 1))) (break true)))) (add1 -22))) (> (let ((loop_var_173 -52)) (let ((loop_var_148 "b")) (let ((loop_var_39 21)) (loop (if (< loop_var_39 (+ 21 39)) (block (set! loop_var_39 (+ loop_var_39 1)) -43) (break -79)))))) (block (let ((x "g") (h "x")) -87) (let ((y false) (a 35)) 72))) (let ((i (block (let ((a "g")) false) (>= "b" "g"))) (d (let ((loop_var_188 -11)) (let ((loop_var_17 80)) (loop (if (< loop_var_17 (+ 80 17)) (block (set! loop_var_17 (+ loop_var_17 1)) input "i") (break true)))))) (a (block true))) (<= (* -74 "b") (- "g" -8))))) (block (block (let ((x (block (isbool false) (block false false "b" false 21) (isbool true))) (i (set! x (let ((z "x") (j true) (b "b")) "j")))) "b") (add1 (let ((h -18)) (* "g" "h"))) (block (block (let ((c "b")) 11) (+ "g" "b")) (block (block "g")) (- (fun3 7 true false true input true true false) (- 46 -77))) (let ((loop_var_101 (- 72 -48))) (loop (if (< loop_var_101 (+ (- 72 -48) 101)) (block (set! loop_var_101 (+ loop_var_101 1))) (break (let ((a false)) 53)))))) 33 (fun1 (let ((j (let ((loop_var_11 "g")) (let ((loop_var_90 -79)) (loop (if (< loop_var_90 (+ -79 90)) (block (set! loop_var_90 (+ loop_var_90 1)) (set! g true) (set! g true) (set! g false)) (break false)))))) (i (= "g" (block "j" false "g")))) (let ((i (let ((loop_var_126 "g")) (let ((loop_var_65 "g")) (loop (if (< loop_var_65 (+ "g" 65)) (block (set! loop_var_65 (+ loop_var_65 1)) (set! j true) (set! g "j") (set! b "i") "j") (break "j")))))) (d "i")) "g")) "g" (isnum (block (let ((i true) (g "b") (d 49)) -62) (let ((c input)) "g") (main -17 "b" 56 "b" -22 input true)))) (isbool (> (+ (+ "g" -56) (let ((a true) (g "a")) 94)) (add1 (let ((loop_var_104 37)) (loop (if (< loop_var_104 (+ 37 104)) (block (set! loop_var_104 (+ loop_var_104 1)) (set! b "b") 35) (break 84))))))) (= (let ((loop_var_145 (fun2 28))) (loop (if (> loop_var_145 (- (fun2 28) 145)) (block (set! loop_var_145 (- loop_var_145 1)) (>= "b" -48)) (break (let ((h "b")) false))))) (<= (sub1 (* "g" "b")) (sub1 (add1 -25))))) (= (isbool (< (let ((c (let ((y false) (z true)) "y")) (x (let ((x "c") (i true) (b true)) "c")) (h (let ((y "x") (d 97)) "x"))) (+ -75 -76)) (block (< "g" -64) (<= "b" -23) (< 80 "b") (sub1 "g")))) (- (let ((loop_var_70 (+ "b" "b"))) (let ((loop_var_70 (let ((j "g")) -57))) (let ((loop_var_152 (let ((f true)) -39))) (loop (if (< loop_var_152 (+ (let ((f true)) -39) 152)) (block (set! loop_var_152 (+ loop_var_152 1))) (break (set! b -81))))))) (* (set! g (* "g" -27)) (block (+ -19 "b") "g" (+ "g" -83) (set! b -18) 11)))))))