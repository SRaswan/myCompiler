(fun (our_code_starts_here energy f x d c b) (if (<= energy 0) 31 (block (set! energy (- energy 1)) -23)))
(fun (main energy d z y b j g a) (if (<= energy 0) false (block (set! energy (- energy 1)) (> (sub1 (set! y (let ((f "a") (y false)) 5))) (- (* (block false -25 false "z") (block "b" 57)) 87)))))
(fun (fun1 energy e g z i d j a) (if (<= energy 0) true (block (set! energy (- energy 1)) true)))
(fun (fun2 energy h b c e g y i x) (if (<= energy 0) true (block (set! energy (- energy 1)) (isbool (>= (* (let ((a true) (g "a") (x "energy")) -72) (fun4 "y" 46 false false "c" 3 true "e")) (fun3 (* "x" 60) (= -23 "h") (block "y" 53) (add1 72) (block -95 "e" "energy") (+ "energy" "b") false (fun8 "energy" "h" "i" -59 "g" -100 false "c" "energy") (* -4 "y")))))))
(fun (fun3 energy b z h i a c j x) (if (<= energy 0) -24 (block (set! energy (- energy 1)) (let ((b (block (= (let ((g -88)) -87) "i"))) (c (let ((j (<= -37 (set! b "a")))) (> (+ "energy" 66) (fun6 -26 "h" false false "j"))))) (set! energy (* (let ((i "j") (b true)) -16) (+ "b" "energy")))))))
(fun (fun4 energy e d b g h a x) (if (<= energy 0) 56 (block (set! energy (- energy 1)) (let ((a (- (set! h (+ "energy" 11)) (let ((x "b")) (let ((f -15) (h "e") (b 56)) 78)))) (x (block (let ((z (add1 -73)) (a (+ "a" "a"))) (let ((e "b") (y "e") (d true)) -69)) (our_code_starts_here (set! a -93) (add1 39) (if false true "b") "x" (block true) (block 94 false "h" "x")) (+ (- 16 72) (let ((y false) (c false) (e 67)) 32)))) (b (let ((d (if (- "energy" 95) (if "b" "x" true) (let ((g "e")) true)))) 89))) (+ (fun6 (* "a" 43) (add1 "d") (isnum "h") (set! e "h") (fun2 -33 "e" "g" "x" "x" "a" "b" -5 "a")) (- (let ((j true) (i "d")) -52) (block -33)))))))
(fun (fun5 energy c a y x i) (if (<= energy 0) -99 (block (set! energy (- energy 1)) (add1 (let ((f (let ((j (<= 35 "energy")) (i (- "energy" "energy")) (h (* -68 -11))) false)) (h (- (block false "y" true "c" 82) (- "c" 97))) (c (block (set! c "i") (set! f true)))) (let ((e (* 97 "energy")) (d (= false "i"))) (let ((h 87) (a "y")) -19)))))))
(fun (fun6 energy c x j b) (if (<= energy 0) -41 (block (set! energy (- energy 1)) (set! c (sub1 (block (let ((j true) (d "energy") (c 68)) "d") (- "c" 81) (block "j" "b" "j") (- -63 "energy") (add1 "energy")))))))
(fun (fun7 energy h f e b a j x) (if (<= energy 0) -77 (block (set! energy (- energy 1)) (let ((d (isbool (let ((d (let ((d -18)) "d")) (j (let ((f "j") (b true) (a 2)) -51))) (let ((c "f") (f "h") (x -70)) "j")))) (x (>= (add1 (+ "x" "a")) (- (block "a") (let ((h "h")) 11)))) (f -68)) (fun5 (+ "h" (set! a "x")) (<= (+ 35 30) (our_code_starts_here 7 "e" true "d" true "d")) (set! h (set! energy true)) (if (isbool "x") "j" (if "b" true false)) "b" (set! j (let ((j "f") (c "h") (g 19)) 52)))))))
(fun (fun8 energy i y x g d j c b) (if (<= energy 0) true (block (set! energy (- energy 1)) (< (fun5 (block (block "i" "g" false 29 -29)) (= (let ((j "i") (i "c") (z false)) "d") (set! energy "b")) (< (let ((j false) (i false) (x "b")) 44) (let ((f "x") (y "b") (a 44)) 76)) (set! b (isnum "d")) (block (block false "x" -36) (+ "y" 44) (let ((f "d") (h 83)) true) (let ((g "y")) false)) (+ (let ((x 35) (z false) (j "z")) 44) (+ -35 44))) (let ((z (* (let ((h "y") (y false) (a "d")) "y") (block -27 "d" "energy" 81))) (i (block "j" (set! y true) (isnum "x") (let ((h "x") (e "z")) -66) (let ((z true) (d "c") (e "c")) false)))) (+ (* 44 44) (set! i -73)))))))
(let ((loop_var_64 (- -90 85))) (loop (if (> loop_var_64 (- (- -90 85) 64)) (block (set! loop_var_64 (- loop_var_64 1))) (break (let ((h (block (block (block (<= (let ((f "loop_var_64") (e "f")) "f") (+ "loop_var_64" "loop_var_64")) (let ((a (isnum true)) (z (block "loop_var_64" 93 -6)) (b (* 76 "loop_var_64"))) (block false "b" -49 true))) (>= (- (block true "loop_var_64") (- "loop_var_64" -69)) (set! loop_var_64 (if "loop_var_64" 19 "loop_var_64"))) (block (block (let ((y 39) (d "loop_var_64")) true) "loop_var_64") (block (block "loop_var_64")) (add1 (sub1 -11)) (add1 (let ((i 88) (j "loop_var_64") (h -69)) -99))) (+ (set! loop_var_64 (set! loop_var_64 -96)) (let ((z (* 29 "loop_var_64")) (f (= "z" -24)) (e (* -3 3))) (block true "f" 67)))))) (j (let ((f (let ((j (set! loop_var_64 (block (main "h" "h" true "h" "loop_var_64" false false "loop_var_64") 12 (let ((c false)) "c") (let ((e true) (z true) (i "e")) "e"))))) (+ (block (+ "h" "loop_var_64")) (set! h -46)))) (i (set! h (fun6 (block (block "h") (set! loop_var_64 true) (set! f "loop_var_64") (let ((a "loop_var_64")) 36) input) (block -3) (let ((e (block false)) (a (* input "f")) (d (+ "f" -52))) (let ((e false)) false)) (>= (if 82 "loop_var_64" -64) (- "loop_var_64" -48)) (> (let ((x "f")) -40) (block "h" "loop_var_64" "f" 75)))))) (fun3 (- (block (block "i" "h" false) (block false false "i") (set! loop_var_64 "i") (let ((h "i")) 67) (* 85 "loop_var_64")) (let ((j (if "h" "i" "i")) (a -72) (g false)) (block "i" 15 "h" "j" "f"))) (let ((y (>= (let ((a "i") (d "f") (x "i")) 74) (set! f input)))) (block (block -75 "y" true true) (let ((d "loop_var_64") (b "i")) 48) (block -56 "loop_var_64" "loop_var_64") (let ((j "i") (x -72)) "f") (let ((f -82) (h "h") (i -50)) "i"))) (- (let ((j (* -1 31))) (+ 58 "j")) (fun6 (block "i" "loop_var_64" "h") input (> "f" -15) (= false true) (let ((d 45) (i "d")) "i"))) (- (+ (* -19 -12) (let ((e false)) -2)) (add1 (- "h" input))) (let ((y (block (block input -10 "i") (sub1 "f")))) (* (* input 83) (add1 54))) (let ((c (let ((g (if "loop_var_64" true false)) (b (+ 65 "f")) (h (block false 50 false))) (block "g"))) (f (isnum (< "f" "h"))) (j (let ((a (block false "h" "c" -45)) (z (sub1 "h")) (d (< -50 "a"))) (let ((x "z")) 18)))) (if (let ((c "i") (g "i")) "f") (if "j" 68 86) (block "h" -45 57 -22))) (block "i" (let ((y (let ((c false) (b -17) (i "c")) "b")) (g 100) (a (let ((y "i") (f false)) 59))) (set! a "a")) (set! f (block "i" "f" false true 39)) (block (<= -10 26) (- -82 "h") (let ((z -100)) false))) (block (block (if false false false) (let ((a true) (j true)) false)) (set! loop_var_64 (block "i")) (block (let ((h false) (i false) (c 15)) 84) (- -68 10) (block -56 18 "i") (set! loop_var_64 "h")) (let ((b (set! i "loop_var_64"))) false)) (let ((e (set! f (let ((g true)) false))) (x (if (sub1 "h") (block false -55 "e" "i" -19) "f"))) (sub1 -45)))))) (let ((h true)) (isnum "j")))))))