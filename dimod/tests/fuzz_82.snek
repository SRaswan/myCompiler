(fun (our_code_starts_here energy b x) (if (<= energy 0) -30 (block (set! energy (- energy 1)) 63)))
(fun (main energy d g h z f y x) (if (<= energy 0) false (block (set! energy (- energy 1)) (set! z true))))
(fun (fun1 energy e f c h g j x) (if (<= energy 0) 96 (block (set! energy (- energy 1)) (fun1 energy (isbool (set! e (>= "h" "energy"))) (<= "h" (block (- "e" -33) (set! f 26))) (let ((d (block "j" (let ((d false) (i "g")) false)))) 50) (block (set! energy (let ((h "f")) "j")) (let ((z (set! h true)) (d (let ((i "x") (b "f") (a true)) "f")) (y (set! c "energy"))) (block 23 24 true 77))) false (> (add1 (set! g -30)) (if (set! f "x") (* -3 4) (- "e" "e"))) true))))
(fun (fun2 energy y g f e x b d) (if (<= energy 0) -74 (block (set! energy (- energy 1)) (let ((h (> (fun1 (let ((g false) (i 15)) 74) (< -91 "b") "x" (* "y" 100) (block -79 "e" "e" "y") (block false false) (let ((d false) (a "d") (j false)) false) (>= -18 "y")) (let ((g (block "f" true)) (j (+ -73 24))) (block true false true "f"))))) (if false (let ((g (if "x" "x" "e")) (z "e") (f (isnum true))) (let ((e "f")) -86)) (- (let ((i "x")) "b") (add1 -95)))))))
(fun (fun3 energy d e j c b z) (if (<= energy 0) 15 (block (set! energy (- energy 1)) (let ((y (> (let ((e (block "z")) (f (- -82 "d"))) (+ "j" 98)) (block (let ((b "energy") (i true) (d false)) "d")))) (g (let ((c (sub1 (let ((i false)) "b"))) (h (* (+ "c" "j") (let ((c -52) (g -2)) "c")))) (block -54 (set! b -82))))) (set! y (set! y (let ((g "e")) 28)))))))
(fun (fun4 energy b i e f g z j) (if (<= energy 0) false (block (set! energy (- energy 1)) (< (let ((i (let ((z (isnum false)) (b (set! z -81))) (< "b" "i"))) (a (let ((y (let ((c -73)) false)) (b (let ((d "j") (g false) (z "i")) "d"))) (set! i true)))) 84) (+ (block (* "i" -73) (block -15 -87 0 50 -18) (let ((h true) (j "e")) "j") (fun5 -77) (let ((z false) (i "energy")) "i")) (if (sub1 -1) 0 (let ((d "energy") (y "z")) "d")))))))
(fun (fun5 energy) (if (<= energy 0) 80 (block (set! energy (- energy 1)) (+ (block (fun4 (let ((x "energy") (c false) (h true)) "energy") (+ -24 -50) (<= 46 "energy") (if -25 32 45) true true (- "energy" "energy") (set! energy false)) (let ((i (if false "energy" -4))) false) (fun1 (sub1 -84) (fun4 81 "energy" false "energy" false false "energy" false) (> 43 4) 9 (let ((c true) (j "c") (e "j")) "energy") (let ((i false) (j "energy")) true) (block true true) (<= 21 "energy"))) (block 13 (- (if true -91 41) "energy"))))))
(fun (fun6 energy c y b i h f a) (if (<= energy 0) true (block (set! energy (- energy 1)) (let ((c (= (let ((i (let ((z -99) (g "f")) true)) (h (let ((f "f") (h "a")) 85)) (a (set! a 74))) (set! energy -62)) (block (+ "b" -57) (fun1 -7 false "h" "b" "c" false true "f") (block true "a" "i")))) (h (isbool (block (block false "b" "c") (block "a"))))) (set! energy false)))))
(block (block (block true (+ (let ((loop_var_163 (block true false false false -17))) (loop (if (< loop_var_163 (+ (block true false false false -17) 163)) (block (set! loop_var_163 (+ loop_var_163 1))) (break (* (let ((e "loop_var_163") (c false)) "loop_var_163") (fun3 -31 true "loop_var_163" true -23 "loop_var_163" "loop_var_163")))))) (let ((d (let ((b (let ((c (let ((loop_var_87 -51)) (loop (if (> loop_var_87 (- -51 87)) (block (set! loop_var_87 (- loop_var_87 1)) true true) (break false))))) (f (let ((loop_var_174 -36)) (let ((loop_var_86 5)) (let ((loop_var_161 -67)) (loop (if (> loop_var_161 (- -67 161)) (block (set! loop_var_161 (- loop_var_161 1)) (set! c 9) (set! c -40) (set! c -88)) (break -76))))))) (g (block "f"))) (let ((z "g")) input))) (x (block (- 57 -69) (isnum "b"))) (f "x")) (let ((loop_var_106 -69)) (loop (if (> loop_var_106 (- -69 106)) (block (set! loop_var_106 (- loop_var_106 1)) (set! b -45) (set! x -50) (set! b 69)) (break "loop_var_106")))))) (x (let ((loop_var_185 (let ((d "d") (j true)) "d"))) (let ((loop_var_71 (if false "d" "d"))) (loop (if (< loop_var_71 (+ (if false "d" "d") 71)) (block (set! loop_var_71 (+ loop_var_71 1)) (set! d (let ((e input) (i "e") (c "i")) "c")) (set! d (set! d true)) (set! d (>= -12 "d")) (let ((y false) (b -49) (z true)) true) (block true false true) (let ((e -10) (g true)) "g")) (break (block false "d" true))))))) (z (set! d (let ((loop_var_6 "d")) (let ((loop_var_107 -77)) (loop (if (< loop_var_107 (+ -77 107)) (block (set! loop_var_107 (+ loop_var_107 1)) (set! d false) (set! x "x") true "x" false) (break "x")))))))) (block (<= (+ "d" -70) (sub1 -52)) (set! d (- "d" "d")) (<= -50 (sub1 "d")) (let ((y (let ((f "x") (e -63) (h "e")) true))) (let ((h -54) (c true)) "h"))))) (our_code_starts_here (block (let ((c (let ((x (* -7 -66)) (z (fun3 "x" false "x" true "x" -46 23)) (h (sub1 -27))) (= false true)))) -98) (let ((h false) (g (< (set! h -83) (+ -53 69)))) (+ (* 87 2) (sub1 55)))) (let ((a (fun6 (let ((h (if -9 false false)) (i (block -3 true 82 -78 "h")) (e (let ((loop_var_44 -94)) (loop (if (> loop_var_44 (- -94 44)) (block (set! loop_var_44 (- loop_var_44 1)) (set! h true) (set! h false) true "i") (break input)))))) (* -24 25)) (+ (let ((b true)) -11) (add1 -36)) (sub1 (block true true true 73)) (our_code_starts_here (sub1 56) (block -64 -18) (if true -1 -99)) (>= (if false -65 -33) (let ((loop_var_189 32)) (loop (if (< loop_var_189 (+ 32 189)) (block (set! loop_var_189 (+ loop_var_189 1))) (break "loop_var_189"))))) (if (isnum true) (let ((b input)) false) (= true false)) (let ((f -4) (g (isnum true))) (isnum false)) (let ((loop_var_93 -32)) (loop (if (< loop_var_93 (+ -32 93)) (block (set! loop_var_93 (+ loop_var_93 1))) (break "loop_var_93")))))) (f (+ (- (fun1 44 false true 7 14 false input false) (block "a" 9)) (add1 (block -52)))) (x (let ((i (set! f (let ((a "a")) "a")))) (add1 (add1 "f"))))) (- (block -92) (let ((d (let ((loop_var_16 -3)) (loop (if (> loop_var_16 (- -3 16)) (block (set! loop_var_16 (- loop_var_16 1))) (break "loop_var_16")))))) (let ((loop_var_95 "x")) (let ((loop_var_75 "d")) (loop (if (< loop_var_75 (+ "d" 75)) (block (set! loop_var_75 (+ loop_var_75 1))) (break -5)))))))) (let ((i false)) (let ((g (sub1 (let ((c -22) (f "i") (y 70)) 50)))) (- (block false "i" "i" 17) (add1 "g")))))) (let ((y (let ((loop_var_105 -77)) (loop (if (> loop_var_105 (- -77 105)) (block (set! loop_var_105 (- loop_var_105 1)) (let ((g (<= (- -3 17) (if -92 29 -77))) (d (block (let ((h -55) (a "g") (j false)) 22)))) (let ((h (block -86 input false 75)) (i (let ((a "d")) "h"))) (block -90))) (+ (add1 (+ -86 89)) (sub1 53))) (break (- (set! loop_var_105 -34) (if (set! loop_var_105 29) (* "loop_var_105" "loop_var_105") (set! loop_var_105 "loop_var_105")))))))) (c (block (block (< (block (isbool true) (= "y" -28) (let ((loop_var_71 -60)) (loop (if (> loop_var_71 (- -60 71)) (block (set! loop_var_71 (- loop_var_71 1))) (break true)))) (+ "y" 59)) (let ((loop_var_9 "y")) (let ((loop_var_75 -97)) (let ((loop_var_49 5)) (loop (if (> loop_var_49 (- 5 49)) (block (set! loop_var_49 (- loop_var_49 1))) (break "loop_var_49"))))))) (+ (- (let ((i true)) 62) (- "y" "y")) (let ((j (block false))) (- "y" -73))) (let ((y (let ((c (sub1 "y")) (f (let ((b "y") (d -74) (f "y")) -56))) (if -47 false true))) (g (let ((d (let ((loop_var_78 51)) (loop (if (< loop_var_78 (+ 51 78)) (block (set! loop_var_78 (+ loop_var_78 1)) -10 -97) (break "loop_var_78"))))) (c (let ((j "y") (b 37)) -54))) (< "c" "c")))) (fun4 (* -33 "y") (let ((z true)) 76) (let ((e 58) (j input) (g "y")) true) (block -12 false "y") (< "y" 69) (= "y" true) (block "y" "y" 32) (block "y" "g"))) "y" (set! y (block (let ((b true) (f -60) (a false)) false)))) (let ((j (- (let ((f (block "y"))) (let ((c "y") (f false) (g "f")) "c")) (let ((f (add1 "y"))) (let ((b "f") (h "y")) -21))))) (if "j" (let ((loop_var_106 -92)) (loop (if (> loop_var_106 (- -92 106)) (block (set! loop_var_106 (- loop_var_106 1))) (break -88)))) (block (block false) (let ((loop_var_26 "j")) (loop (if (< loop_var_26 (+ "j" 26)) (block (set! loop_var_26 (+ loop_var_26 1))) (break true)))) (let ((f -69) (i true) (z "i")) true) (let ((loop_var_40 "j")) (let ((loop_var_62 50)) (loop (if (< loop_var_62 (+ 50 62)) (block (set! loop_var_62 (+ loop_var_62 1)) (set! j "y") (set! j "y") -33 "j") (break "loop_var_62"))))) (fun5 20)))) (let ((c (* (set! y (* 82 50)) (let ((g (let ((d false)) false))) (set! y "y")))) (x (add1 (let ((loop_var_17 "y")) (loop (if (> loop_var_17 (- "y" 17)) (block (set! loop_var_17 (- loop_var_17 1))) (break -9)))))) (b (let ((y (let ((loop_var_103 "c")) (loop (if (> loop_var_103 (- "c" 103)) (block (set! loop_var_103 (- loop_var_103 1)) (set! x "x") (set! x "y") (set! y -31)) (break "loop_var_103"))))) (a (block (block false false -13 true)))) (set! y (block false false "y"))))) (* (+ (let ((loop_var_69 "b")) (loop (if (< loop_var_69 (+ "b" 69)) (block (set! loop_var_69 (+ loop_var_69 1))) (break "x")))) (+ -68 22)) (let ((x (>= -25 "c"))) "c"))) (fun6 (block (isbool true) (let ((x (let ((y 48) (j 95)) false)) (a false)) (block "y")) (sub1 (block "y" 33))) (let ((a "y") (z (let ((loop_var_160 "a")) (let ((loop_var_118 -22)) (loop (if (< loop_var_118 (+ -22 118)) (block (set! loop_var_118 (+ loop_var_118 1)) (set! y "y") (set! y "a")) (break "loop_var_118")))))) (e "z")) (sub1 (set! e "z"))) (let ((d (let ((loop_var_26 25)) (loop (if (< loop_var_26 (+ 25 26)) (block (set! loop_var_26 (+ loop_var_26 1))) (break "y")))))) (set! d (sub1 -56))) (sub1 (block (- "y" "y") (let ((loop_var_53 -77)) (loop (if (> loop_var_53 (- -77 53)) (block (set! loop_var_53 (- loop_var_53 1)) (set! y 76)) (break 6)))))) (= (+ (let ((loop_var_106 "y")) (loop (if (< loop_var_106 (+ "y" 106)) (block (set! loop_var_106 (+ loop_var_106 1))) (break "y")))) (let ((h true)) 12)) (block (< -92 -57) (fun2 "y" false 77 true true 44 false "y"))) (isbool (>= (add1 "y") (+ "y" "y"))) false (fun2 (block (isbool false) (<= -10 -9) (block "y" false) (+ "y" "y")) (block (block "y" false) (let ((f true) (b 44) (c 35)) "f")) -47 (isbool (< -9 24)) (let ((loop_var_168 7)) (loop (if (< loop_var_168 (+ 7 168)) (block (set! loop_var_168 (+ loop_var_168 1))) (break input)))) (block false (= false false) (block -43 true -44 "y" false) "y" (block false true "y" "y")) (let ((f (set! y false)) (e (let ((g false) (z "g")) -59))) (let ((z 62) (e "y")) "f")) -8)) (block (isnum (let ((b (let ((loop_var_120 -66)) (loop (if (< loop_var_120 (+ -66 120)) (block (set! loop_var_120 (+ loop_var_120 1)) (set! y "y") (set! y -78) (set! y "y") 38 -1 43) (break "loop_var_120"))))) (i (isnum true))) input)) (block (let ((y (let ((a true) (i -7)) false))) "y") (isnum (let ((x true)) "x")) (sub1 (- "y" 15)))))) (h (>= (block (isbool (>= (- "c" 88) (let ((h -81)) 17))) (= (let ((g (let ((loop_var_67 "y")) (loop (if (< loop_var_67 (+ "y" 67)) (block (set! loop_var_67 (+ loop_var_67 1)) 72 "c") (break 75))))) (a (<= -87 49))) (> -88 "y")) (let ((d (block -68 4)) (h (>= "y" -17))) (> 76 "d"))) (let ((i (>= (let ((d "y")) "y") (let ((b "y") (f "y")) -25))) (a (let ((i input) (e input) (x (block 79))) -73))) -57)) (let ((b (let ((g "c") (y (block (let ((i -66) (g "i") (d 16)) "g"))) (j (block (set! y 92) (let ((a false)) true) (let ((h true) (j "y")) false) (sub1 -23)))) (let ((loop_var_10 "c")) (loop (if (< loop_var_10 (+ "c" 10)) (block (set! loop_var_10 (+ loop_var_10 1)) (set! j false) (set! j false) (set! g false)) (break false)))))) (x (let ((j (block (let ((loop_var_74 -84)) (loop (if (< loop_var_74 (+ -84 74)) (block (set! loop_var_74 (+ loop_var_74 1)) false true "b") (break "b")))) (let ((x 62) (a "x")) false) (let ((x "c") (a false)) "c") (>= 78 -55) (+ "c" "y")))) (+ (set! j 25) (let ((h -33) (j "h")) "j")))) (j (set! b (- (+ "c" "y") "x")))) -16)))) (let ((loop_var_118 (- 10 -18))) (let ((loop_var_92 (block -95 "c" 86))) (loop (if (< loop_var_92 (+ (block -95 "c" 86) 92)) (block (set! loop_var_92 (+ loop_var_92 1)) (sub1 (block (block "c" "h" input 92)))) (break (- (let ((c (* 16 "y"))) (+ "loop_var_92" -55)) (block (sub1 40) (< "y" -50) (* 69 63) (let ((j "c")) 39)))))))))))