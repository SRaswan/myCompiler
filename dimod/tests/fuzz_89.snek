(fun (our_code_starts_here energy) (if (<= energy 0) 23 (block (set! energy (- energy 1)) (block "energy"))))
(fun (main energy) (if (<= energy 0) true (block (set! energy (- energy 1)) (let ((j (> (let ((i (let ((y "energy")) 36)) (j (let ((b true) (c "b")) "c")) (b (our_code_starts_here "energy"))) -6) (+ (add1 31) (let ((h 54) (f false) (d -83)) "d")))) (x (block (block (let ((j -73) (z 1)) "j")))) (y (fun1 (- (if false "x" "x") (* "energy" "x")) (isbool (set! energy false)) (let ((e (let ((e false) (d false)) "e")) (a (let ((f "j")) "energy"))) (+ -6 "a")) (set! x (- "x" -68)) (let ((j (let ((b true)) "x"))) (= false "j")) (add1 -25)))) (let ((z (isnum (block 54 true "j" false "j"))) (c "z")) "j")))))
(fun (fun1 energy i f b h a) (if (<= energy 0) 87 (block (set! energy (- energy 1)) (sub1 (set! h (+ (+ -27 "b") (fun1 71 "f" "h" "b" "a" -78)))))))
(fun (fun2 energy x j e h) (if (<= energy 0) false (block (set! energy (- energy 1)) (block (let ((a (let ((g (isbool "h"))) (let ((y "h") (z "energy")) "z"))) (y (add1 (let ((j "x")) "energy"))) (d (set! x (+ "x" -71)))) (fun5 (fun1 70 "h" "a" "y" "h" "x") (let ((a 67) (e "a") (b true)) "h") (* -87 -32))) (block "j" (let ((g (fun3 -97 "x" "e" "j" false "h" "h")) (i "j")) (let ((j "h")) true)) (fun1 -74 (block 73 -57 "x" "x" false) (- "j" 94) (* 96 -70) (block "x" "e" -41 false) (let ((e -13)) -15)) (let ((c (+ -4 "energy")) (d "e")) (block 45 false -11 "c")) (> (block -91 "j" "x") (set! x "j")))))))
(fun (fun3 energy g a j y x i) (if (<= energy 0) 46 (block (set! energy (- energy 1)) (set! j (sub1 (add1 (let ((y "y")) 97)))))))
(fun (fun4 energy g) (if (<= energy 0) true (block (set! energy (- energy 1)) (let ((h (<= (set! energy (set! g 54)) (let ((j (let ((h -5) (d true)) 2)) (d (isnum true)) (i (>= "g" "energy"))) (set! j "energy"))))) (set! energy (set! g (block "h" "h" "h" false)))))))
(fun (fun5 energy a c) (if (<= energy 0) false (block (set! energy (- energy 1)) (let ((b (+ (let ((y (let ((h "c") (f true)) 64)) (c (<= -49 "y"))) (sub1 49)) (set! c (let ((y 68) (j "c")) "a"))))) true))))
(fun (fun6 energy c f) (if (<= energy 0) true (block (set! energy (- energy 1)) (block (let ((i "f") (x (- (+ 90 "c") (if 45 "c" -41))) (y 43)) "i")))))
(block (let ((a (<= (let ((loop_var_40 (our_code_starts_here -53))) (loop (if (< loop_var_40 (+ (our_code_starts_here -53) 40)) (block (set! loop_var_40 (+ loop_var_40 1))) (break (+ (set! loop_var_40 (add1 "loop_var_40")) (- (let ((c false) (h "loop_var_40")) "h") (+ 45 "loop_var_40"))))))) (- (block (let ((g (= (+ 4 58) (let ((d -93)) "d"))) (i (+ (- -46 30) (- -63 21)))) (block (let ((loop_var_124 "i")) (loop (if (> loop_var_124 (- "i" 124)) (block (set! loop_var_124 (- loop_var_124 1))) (break "i")))) (< 1 -81))) (- 27 (block (block 96 -72))) (let ((g (let ((z 43) (d (- "z" "z")) (b (let ((e false) (y "d")) "e"))) (if -100 "b" false)))) (let ((i (block "g" 86 "g")) (j (isnum input))) (block true -58))) (let ((i (= (> -34 -46) (let ((h -2) (d "h")) true))) (g (block (let ((loop_var_165 59)) (let ((loop_var_5 21)) (let ((loop_var_8 59)) (loop (if (< loop_var_8 (+ 59 8)) (block (set! loop_var_8 (+ loop_var_8 1)) -93 -35) (break -94)))))) (let ((e input)) false) (let ((j "i")) 5) (set! i "i")))) (let ((d (set! i true))) 29))) (let ((f (add1 (- 84 (if true 92 1))))) -81))))) (= (block (block (>= (our_code_starts_here (set! a -74)) (sub1 (set! a 24))) (> (add1 (let ((e -87)) "e")) (- (add1 -52) (add1 48))) (sub1 (sub1 (block -62 23 true 90))) (* (- (let ((d true) (e -92) (f true)) 48) (add1 16)) (* (sub1 0) (sub1 0))) (let ((e "a") (g (let ((loop_var_200 -61)) (loop (if (< loop_var_200 (+ -61 200)) (block (set! loop_var_200 (+ loop_var_200 1)) (set! e 84) (set! e -50) (set! e 74) -64 80 -81) (break "loop_var_200")))))) (let ((f (let ((h -12) (c 34) (f false)) "h"))) (* 51 "g")))) (block (= (block true input (let ((loop_var_57 -58)) (loop (if (< loop_var_57 (+ -58 57)) (block (set! loop_var_57 (+ loop_var_57 1)) "a") (break "a")))) (< 28 -16)) (isbool (<= -66 14))) (let ((g (let ((a (block true true -48 -57 12))) (block true true 99 false input))) (c (block (block "g" 93)))) (isbool (isbool true))) (let ((y (<= (block 14 "a" "a" "a" -70) (* 72 -94)))) (< (block 39 60 -62 -34) (+ -39 -1))) (let ((z (let ((y (main -82)) (a (let ((loop_var_134 40)) (loop (if (> loop_var_134 (- 40 134)) (block (set! loop_var_134 (- loop_var_134 1)) 36 -90) (break -11))))) (h (let ((a "a") (y "a")) input))) (let ((loop_var_65 "a")) (let ((loop_var_110 32)) (loop (if (< loop_var_110 (+ 32 110)) (block (set! loop_var_110 (+ loop_var_110 1))) (break 58))))))) (c (<= (set! a "z") (let ((loop_var_96 70)) (let ((loop_var_156 "z")) (loop (if (> loop_var_156 (- "z" 156)) (block (set! loop_var_156 (- loop_var_156 1)) (set! z "z") (set! a "z")) (break "z")))))))) (>= (set! z 91) "z")))) (- (+ (set! a (+ (- -3 -22) -78)) (block (block (let ((h false) (g "a") (d "h")) 34) (let ((d true) (b -22)) "b") (let ((loop_var_33 -78)) (loop (if (< loop_var_33 (+ -78 33)) (block (set! loop_var_33 (+ loop_var_33 1)) (set! a false) (set! a "a") (set! a true)) (break "a")))) (* 65 -11) (let ((g 40) (c -62)) true)) (* (* -32 -20) (- -53 56)) (block (* -18 -25) "a" (isbool true) (block true -95) (set! a true)) (block (let ((x true) (j "x")) true) (block 10 "a" -15) (set! a false) (- -5 -92)))) -14))))