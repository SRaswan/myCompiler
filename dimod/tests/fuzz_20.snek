(fun (our_code_starts_here energy f d a y x b i c) (if (<= energy 0) 13 (block (set! energy (- energy 1)) (let ((g (isnum (let ((y (let ((y 97)) -3))) (>= "y" "b"))))) (set! b (add1 (set! i 74)))))))
(fun (main energy h) (if (<= energy 0) true (block (set! energy (- energy 1)) (set! h (fun8 (+ 67 (add1 "energy")) (block false) (let ((z (block -27 false false)) (e (<= "h" 100))) (* -72 66)) (= (add1 -19) (* "energy" "h")))))))
(fun (fun1 energy) (if (<= energy 0) 35 (block (set! energy (- energy 1)) -12)))
(fun (fun2 energy h y) (if (<= energy 0) 80 (block (set! energy (- energy 1)) (let ((h (add1 (block (block true false "energy" "h" "y") false (let ((e 14) (z false) (b 79)) 13)))) (j (isnum false))) (set! y (let ((h (let ((b 33) (g 52)) "b"))) (let ((z true) (x 61)) -85)))))))
(fun (fun3 energy a i) (if (<= energy 0) -81 (block (set! energy (- energy 1)) (let ((y (fun2 (+ (let ((b "a")) "energy") (let ((g "i") (z false) (h true)) "energy")) (let ((c (let ((j -93) (d -23) (g "i")) false)) (h (fun1 -83))) (block false "c" 37 33)) (let ((e "i") (d (set! energy "e")) (x (let ((x "i") (c "energy") (a "c")) "a"))) (<= "x" 58))))) (+ "y" "y")))))
(fun (fun4 energy f e h c d z j) (if (<= energy 0) true (block (set! energy (- energy 1)) (let ((h (let ((b (isbool (block "z"))) (a (let ((i (>= "energy" "energy")) (j (* "e" -91))) (if -68 "d" "d"))) (z (block "c" (<= -1 -46) (block "h" "z" "h" true) (= true false)))) (set! h (let ((x true)) true)))) (i (set! c (add1 (let ((j "energy")) "f"))))) true))))
(fun (fun5 energy b) (if (<= energy 0) false (block (set! energy (- energy 1)) (set! energy (> (- (add1 -97) (block false "energy" false "energy")) (let ((j (let ((b false)) "energy")) (y (set! energy false)) (d (if false "y" false))) (our_code_starts_here "b" "b" "d" true "y" 94 "y" false true)))))))
(fun (fun6 energy h c) (if (<= energy 0) 59 (block (set! energy (- energy 1)) (set! c (+ (sub1 (let ((d -93)) "energy")) (block (* -73 -47) (= "h" -38) (let ((g "energy") (a "c") (z "energy")) true) (block 14 "h")))))))
(fun (fun7 energy c x g b d h) (if (<= energy 0) -49 (block (set! energy (- energy 1)) (let ((i (block (+ (block "d" -96 53 true 1) 17) (- (block "x") (let ((c "g") (i "g")) "energy")) (isnum (let ((z "c")) true)) (if (* -95 68) (- "c" "c") (let ((h -78)) "g")))) (j (let ((a (<= (set! x -88) (let ((x "h")) "h")))) (> -16 (let ((j true) (c "a") (i "x")) -9))))) "h"))))
(fun (fun8 energy x c j) (if (<= energy 0) true (block (set! energy (- energy 1)) "c")))
(block (let ((j (let ((loop_var_74 (fun6 97 false true))) (let ((loop_var_88 -34)) (loop (if (> loop_var_88 (- -34 88)) (block (set! loop_var_88 (- loop_var_88 1))) (break (set! loop_var_88 (<= (let ((f (block -37 false 99))) (fun6 "loop_var_88" true false)) (block (let ((f "loop_var_88") (g false) (y true)) "f") (let ((j true)) false) (- "loop_var_88" "loop_var_88")))))))))) (a (let ((e (if (let ((i (* (let ((loop_var_3 -92)) (loop (if (< loop_var_3 (+ -92 3)) (block (set! loop_var_3 (+ loop_var_3 1))) (break "loop_var_3")))) (set! j (let ((loop_var_77 -11)) (loop (if (< loop_var_77 (+ -11 77)) (block (set! loop_var_77 (+ loop_var_77 1)) (set! j 36) (set! j 88)) (break "loop_var_77"))))))) (x (if (let ((loop_var_153 "i")) (loop (if (< loop_var_153 (+ "i" 153)) (block (set! loop_var_153 (+ loop_var_153 1)) "i") (break "loop_var_153")))) (block -3 (set! j "j")) (> (block true "i" "i" "i" "i") (block 47 -7 "i"))))) (* (let ((loop_var_1 -38)) (loop (if (> loop_var_1 (- -38 1)) (block (set! loop_var_1 (- loop_var_1 1)) (set! i "i") (set! x 30)) (break -47)))) (let ((loop_var_113 -41)) (loop (if (> loop_var_113 (- -41 113)) (block (set! loop_var_113 (- loop_var_113 1))) (break -85)))))) (let ((loop_var_90 (block "j" -22 12))) (loop (if (< loop_var_90 (+ (block "j" -22 12) 90)) (block (set! loop_var_90 (+ loop_var_90 1)) (block (let ((x -58) (c 29) (y input)) true) (isnum false) (set! j "j"))) (break (let ((g (set! loop_var_90 -83)) (j (let ((a "j") (y "a")) "j"))) (if "j" false "j")))))) (isnum (block (>= (let ((z -19) (c "z") (b true)) "c") (block 30 "j" -20 true 14)) (+ (let ((loop_var_113 -28)) (let ((loop_var_187 -4)) (loop (if (< loop_var_187 (+ -4 187)) (block (set! loop_var_187 (+ loop_var_187 1))) (break -73))))) (fun7 -1 42 -44 false false -78 -86)) (let ((j (let ((loop_var_35 -78)) (loop (if (> loop_var_35 (- -78 35)) (block (set! loop_var_35 (- loop_var_35 1)) (set! j true) (set! j true) (set! j "j") "j" false false) (break "j"))))) (x (let ((loop_var_2 16)) (let ((loop_var_9 -77)) (let ((loop_var_157 89)) (loop (if (> loop_var_157 (- 89 157)) (block (set! loop_var_157 (- loop_var_157 1)) 85) (break 39)))))))) true))))) (a (let ((i (block (+ (+ (- 89 35) (sub1 -28)) (let ((f (block true 91 -38))) (block -49))) (= (block (= false true)) true) (let ((j (- (let ((y -1)) 52) (+ -22 79))) (e (let ((y (block "e" true false true))) (- 68 "j")))) (isbool (set! j "e"))) (let ((b (set! j (let ((i "j") (j true)) -59))) (f (+ (block "j" input false -100) (let ((e false) (x "j") (j "e")) -49))) (e "e")) (block (if true 28 "f") (< "f" 52))))) (h (let ((f (let ((e (let ((g (block false true "j" true "j")) (y (>= 74 48))) (let ((i "g")) 74)))) (block (- "e" -8) (< -30 10) (let ((a true)) true) (let ((j -93) (f "j") (b "i")) "j") (let ((h 100) (y -77) (c "e")) input)))) (z (fun4 (let ((loop_var_93 -63)) (loop (if (> loop_var_93 (- -63 93)) (block (set! loop_var_93 (- loop_var_93 1))) (break "loop_var_93")))) (sub1 (let ((e 13) (y "e") (h "j")) "e")) (isbool (block 60 26 "i")) (block (let ((a input) (x false) (c 15)) "c") (let ((h true) (d 95) (x "i")) "d") 53) (let ((i (set! e input)) (c (sub1 -54)) (b (isnum "e"))) (>= -100 "c")) (set! e (let ((j false)) "f")) (block (+ -44 -17) (if -82 69 30) (<= 89 -57) (let ((loop_var_102 -57)) (loop (if (> loop_var_102 (- -57 102)) (block (set! loop_var_102 (- loop_var_102 1)) (set! j -27) (set! i 13) (set! e -37) -87 -85) (break -57))))) (let ((loop_var_195 -99)) (loop (if (< loop_var_195 (+ -99 195)) (block (set! loop_var_195 (+ loop_var_195 1)) "f") (break "e")))))) (c (block (let ((loop_var_21 "z")) (loop (if (< loop_var_21 (+ "z" 21)) (block (set! loop_var_21 (+ loop_var_21 1)) (set! f false) (set! f false) (set! i true)) (break "f"))))))) (< (* (- -2 -20) 64) (let ((c (let ((loop_var_140 44)) (let ((loop_var_114 40)) (let ((loop_var_81 "z")) (loop (if (< loop_var_81 (+ "z" 81)) (block (set! loop_var_81 (+ loop_var_81 1)) (set! c "j") "i" "j") (break true)))))))) (let ((f "i")) "z"))))) (b (* (block (block (block true "j" -48) (set! e -88) (add1 -54))) (block (fun4 (let ((loop_var_192 41)) (let ((loop_var_141 5)) (loop (if (< loop_var_141 (+ 5 141)) (block (set! loop_var_141 (+ loop_var_141 1)) (set! e -51) 81) (break -14))))) (- 44 -29) (let ((loop_var_67 58)) (loop (if (< loop_var_67 (+ 58 67)) (block (set! loop_var_67 (+ loop_var_67 1)) (set! j false) "h") (break "e")))) (let ((j -78) (h "j") (d -36)) 29) "j" (block 9 -23 -14 false) 33 (let ((loop_var_120 39)) (loop (if (< loop_var_120 (+ 39 120)) (block (set! loop_var_120 (+ loop_var_120 1)) (set! h "e")) (break true))))) (block (if "i" 83 -51) (let ((b false)) true) (let ((y 31) (b "y")) -49) (let ((y -38) (b input)) "y") (= "i" "i")) (block (let ((loop_var_114 23)) (loop (if (> loop_var_114 (- 23 114)) (block (set! loop_var_114 (- loop_var_114 1)) (set! i -52) (set! e 54) (set! e 12)) (break 87)))) (let ((loop_var_171 84)) (loop (if (> loop_var_171 (- 84 171)) (block (set! loop_var_171 (- loop_var_171 1)) (set! h "j") false false true) (break "j")))) (let ((loop_var_189 -22)) (let ((loop_var_163 91)) (loop (if (< loop_var_163 (+ 91 163)) (block (set! loop_var_163 (+ loop_var_163 1))) (break "loop_var_163"))))) 53))))) (+ (+ (- (block -92 "b" 64) (set! b -63)) (if (let ((h 56)) "e") (+ -94 -35) (if input "b" "b"))) (block "b")))) (c "a")) (let ((h (let ((loop_var_18 "a")) (loop (if (< loop_var_18 (+ "a" 18)) (block (set! loop_var_18 (+ loop_var_18 1))) (break (add1 (- 18 21))))))) (f (let ((loop_var_116 (block false -28 false 78 -82))) (loop (if (> loop_var_116 (- (block false -28 false 78 -82) 116)) (block (set! loop_var_116 (- loop_var_116 1))) (break (isnum (<= "c" "h")))))))) (= (set! c (block (* 77 "a") (= "a" "c") (add1 "a") (* "a" "h") "a")) (our_code_starts_here (let ((a "e")) (block "a" -71 "a" 33 "c")) (let ((e (* 78 -36))) (block "f" "j" "a")) (let ((loop_var_34 -32)) (let ((loop_var_20 "c")) (loop (if (< loop_var_20 (+ "c" 20)) (block (set! loop_var_20 (+ loop_var_20 1))) (break "e"))))) (set! j (set! h true)) (let ((h (add1 7)) (f (+ 16 7)) (e (let ((b "e") (a "a")) -54))) (block true false false)) 22 (block (block "f") (isnum "j") (= "a" 79)) (block (block "e" "e" "h") (let ((loop_var_108 "c")) (loop (if (> loop_var_108 (- "c" 108)) (block (set! loop_var_108 (- loop_var_108 1)) (set! h false) false) (break input))))) (block (< -79 25)))))))) (let ((loop_var_120 (- -72 9))) (loop (if (> loop_var_120 (- (- -72 9) 120)) (block (set! loop_var_120 (- loop_var_120 1)) (set! j (>= (block (set! j (if "a" -14 -42)) (* (block 95) (block -74)) (let ((e (set! j -60)) (y "e") (c (= 37 "y"))) (let ((c "y") (z "j")) "c"))) (let ((d (= (let ((z -41) (c "j") (a "z")) "a") true)) (f (add1 (block -4))) (e (set! f (isbool false)))) (block (let ((e "f") (x false) (b 11)) true) (let ((b "j")) "f"))))) (set! j (set! a (= (fun3 (let ((z 41) (b 46)) "z") (>= -37 -99) (let ((j -56) (c "j")) true)) (block (< 11 63) (+ 80 12))))) (set! a (block (block (block (sub1 55) (let ((j false) (b -51) (f true)) "b")) (let ((h (if false 98 9))) (block "h" "h" "j" -58))) (<= (+ (+ -22 -32) (let ((h false) (e -59) (f 15)) "f")) (let ((y (block "a" -90)) (g (+ "y" 20))) 12)) (>= (sub1 (let ((j true) (z "j") (a false)) 46)) (add1 (let ((e true) (g false)) 70)))))) (break "a"))))))