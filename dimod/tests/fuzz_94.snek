(fun (our_code_starts_here energy f e j b y) (if (<= energy 0) -70 (block (set! energy (- energy 1)) (our_code_starts_here energy (<= (block (block 29 "b") (if 18 92 -44)) (let ((b (let ((y -15)) true))) (set! energy "j"))) (let ((y "energy") (d (let ((e (isbool true))) (let ((z "y") (h "f")) false)))) "energy") (if (let ((x (let ((d "b") (j "e")) "b")) (y (block "x" true 94 -60)) (a (set! b "f"))) (isnum false)) (set! y (> -6 "y")) (let ((c (set! f "j")) (i false) (z (set! y 0))) (>= -10 10))) (- (let ((z "e")) (let ((h 40)) 1)) (- (set! f 75) (add1 -40))) "e"))))
(fun (main energy g j z b x a i) (if (<= energy 0) true (block (set! energy (- energy 1)) (let ((e (set! g "g")) (x (let ((b (= (let ((a "i") (y 4)) -20) (* -26 28))) (f "b")) (+ (let ((y "e")) -32) (let ((j true)) "x"))))) (set! energy (main (let ((g "energy")) -88) (block -75) (let ((y 22) (c "b") (e "c")) "z") (<= "x" "energy") (let ((f "a") (y "x") (c "z")) "j") (>= "e" "j") (isbool true) (< "e" -6)))))))
(< (- (let ((b (main (block (if (let ((h false) (g (- 58 -57)) (d (+ input "g"))) "h") (let ((loop_var_177 28)) (let ((loop_var_158 50)) (loop (if (> loop_var_158 (- 50 158)) (block (set! loop_var_158 (- loop_var_158 1))) (break "loop_var_158"))))) 71)) (+ (block (block (main 51 3 -93 true 22 true false true) (- -36 -67) (if -31 15 5) (let ((loop_var_160 44)) (let ((loop_var_84 input)) (let ((loop_var_129 92)) (loop (if (> loop_var_129 (- 92 129)) (block (set! loop_var_129 (- loop_var_129 1)) 50) (break "loop_var_129"))))))) (= (if -57 false true) (isnum true)) (sub1 22)) -16) -44 (let ((x (let ((loop_var_147 (if false 48 20))) (loop (if (< loop_var_147 (+ (if false 48 20) 147)) (block (set! loop_var_147 (+ loop_var_147 1))) (break (> -87 "loop_var_147")))))) (a (isnum (> (let ((loop_var_140 input)) (let ((loop_var_19 100)) (let ((loop_var_6 68)) (loop (if (< loop_var_6 (+ 68 6)) (block (set! loop_var_6 (+ loop_var_6 1)) (set! x -69) (set! x input) -8 -87 28) (break "loop_var_6")))))) (sub1 35)))) (h (<= (let ((z (sub1 96)) (d (sub1 "z"))) (block -58 "a" 51 "z")) (let ((a (<= 30 -11)) (j (main 98 input -61 "a" -48 true "x" "a")) (e (* input 64))) (let ((z "a") (d true) (h "e")) -10))))) (let ((b (block (block true "h" 63))) (x (* "b" "b"))) "a")) (let ((x (> (- -53 (let ((loop_var_2 -65)) (let ((loop_var_71 71)) (loop (if (> loop_var_71 (- 71 71)) (block (set! loop_var_71 (- loop_var_71 1))) (break "loop_var_71")))))) (add1 (block true 98)))) (j (add1 (block (let ((z 38)) "x") (* 41 -74) (<= -19 93) -63 (let ((x false)) 68)))) (d "x")) "j") (block (let ((b (isbool (let ((loop_var_88 -29)) (loop (if (< loop_var_88 (+ -29 88)) (block (set! loop_var_88 (+ loop_var_88 1)) true) (break false)))))) (h (let ((z (let ((a "b") (j -34)) "j")) (e (>= "z" -48))) (block "b" "e"))) (f (if (block false 83 false 89 69) (block 86 27) (let ((i 15)) "i")))) (> (let ((b 92) (a "b")) "f") (let ((j "h") (f "f")) "f"))) (let ((b (main (block false -74 input) -77 (add1 -75) (let ((g 72)) false) (let ((e 28)) "e") (< 30 79) (let ((x 5)) true) (main -92 3 50 true -24 false true true))) (a (let ((j "b")) (let ((h "b") (e true) (g false)) "h")))) (block (+ "b" "b") (add1 "a"))) (< (let ((b (< 35 33)) (h (sub1 20))) (block -65 "h" 41)) (- (+ -73 -78) -16)) (isbool (block (let ((i true) (d 35)) 11) (if true false true) (block -65 true))) (>= (let ((j (let ((loop_var_26 20)) (loop (if (> loop_var_26 (- 20 26)) (block (set! loop_var_26 (- loop_var_26 1)) -4 -13 -7) (break "loop_var_26"))))) (z (block 38 52 -83 66 true))) (let ((j "j")) 71)) (if (block -47) (+ 84 -34) -38))) (main (let ((h (= (+ 61 -89) (block 94 22)))) (sub1 (* 9 9))) (block (if 15 (sub1 71) (add1 -4))) (* (* (* 31 6) -60) (block (< 23 32) (let ((e -89) (f -98)) 21))) (block (block (block false) (if false false false) (- -19 -59)) (- (sub1 -23) (let ((e true) (a 54)) -100)) (let ((e (block -44 -28 -37 -94)) (g (let ((loop_var_13 input)) (loop (if (< loop_var_13 (+ input 13)) (block (set! loop_var_13 (+ loop_var_13 1)) (set! e false) (set! e false)) (break true)))))) (< "e" 56)) (* (let ((loop_var_180 -100)) (let ((loop_var_151 -15)) (loop (if (> loop_var_151 (- -15 151)) (block (set! loop_var_151 (- loop_var_151 1)) 88) (break 16))))) (our_code_starts_here 26 true -47 false -51 true)) (block -54 (let ((i true) (b -23) (c "i")) "c") (block false false) (> 23 64))) (let ((g (let ((loop_var_147 68)) (let ((loop_var_12 45)) (loop (if (> loop_var_12 (- 45 12)) (block (set! loop_var_12 (- loop_var_12 1)) -23 -97) (break 14)))))) (a (let ((c (block 70 true false "g")) (a (<= "c" -59)) (j (= true false))) (<= "c" -10))) (h (let ((loop_var_126 -71)) (let ((loop_var_48 -42)) (let ((loop_var_2 12)) (loop (if (< loop_var_2 (+ 12 2)) (block (set! loop_var_2 (+ loop_var_2 1)) (set! a input) (set! a "g") -85 31 -28) (break "loop_var_2")))))))) (let ((x (let ((x "a")) "x"))) (sub1 "g"))) (let ((loop_var_77 (+ 71 input))) (let ((loop_var_52 27)) (loop (if (> loop_var_52 (- 27 52)) (block (set! loop_var_52 (- loop_var_52 1)) (if true false false) (let ((e true) (j input) (x -90)) true) (<= input 89)) (break (set! loop_var_52 true)))))) (if (let ((f (>= 31 -57)) (d (- 11 -64))) (let ((e "d") (b "f")) "e")) (let ((loop_var_159 78)) (loop (if (< loop_var_159 (+ 78 159)) (block (set! loop_var_159 (+ loop_var_159 1))) (break false)))) (let ((loop_var_9 42)) (loop (if (< loop_var_9 (+ 42 9)) (block (set! loop_var_9 (+ loop_var_9 1)) false) (break true))))) false) (<= (+ -79 (block (block false true false 3 5) (block false false true 76) (* 84 -81))) (add1 (our_code_starts_here (block 46 -94 true true -63) (block false true -59 true) (let ((a -20) (f true) (j "f")) "a") (isnum false) (let ((z false)) -83) false)))))) (- -12 (let ((c (block (block (let ((loop_var_4 "b")) (let ((loop_var_177 "b")) (loop (if (< loop_var_177 (+ "b" 177)) (block (set! loop_var_177 (+ loop_var_177 1)) (set! b false) (set! b true)) (break true))))) (let ((h "b")) 75)) true (let ((loop_var_175 -4)) (loop (if (< loop_var_175 (+ -4 175)) (block (set! loop_var_175 (+ loop_var_175 1)) (set! b "b")) (break -9)))) (let ((c (let ((loop_var_140 97)) (let ((loop_var_93 "b")) (loop (if (< loop_var_93 (+ "b" 93)) (block (set! loop_var_93 (+ loop_var_93 1)) "b" -77) (break 26))))))) (isnum true)) (let ((z (block true true false))) (sub1 -62))))) (let ((z (let ((loop_var_110 -30)) (let ((loop_var_168 66)) (let ((loop_var_180 "c")) (loop (if (> loop_var_180 (- "c" 180)) (block (set! loop_var_180 (- loop_var_180 1)) "c" -39) (break "loop_var_180"))))))) (b (block false))) -26)))) (let ((loop_var_185 (let ((a -12)) -97))) (loop (if (> loop_var_185 (- (let ((a -12)) -97) 185)) (block (set! loop_var_185 (- loop_var_185 1))) (break (let ((f (> (+ (sub1 "loop_var_185") (our_code_starts_here input false "loop_var_185" false "loop_var_185" true)) (+ (let ((f true) (c "loop_var_185") (a false)) "loop_var_185") (let ((j "loop_var_185") (x false) (b false)) -77))))) (add1 (let ((c (>= -74 -79)) (j (let ((a true)) "loop_var_185"))) (+ -15 "j"))))))))) (let ((loop_var_136 18)) (loop (if (> loop_var_136 (- 18 136)) (block (set! loop_var_136 (- loop_var_136 1))) (break (* "loop_var_136" (- 62 (* (- 70 (let ((a true) (e -7) (d "a")) 44)) (block (sub1 "loop_var_136") (block 37))))))))))