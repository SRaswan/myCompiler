(fun (our_code_starts_here energy j x i d) (if (<= energy 0) -90 (block (set! energy (- energy 1)) (* (- (block (add1 -27) (* -31 27) (- -21 "d") (set! j "x")) (let ((f (let ((z "energy") (d false)) 58))) (* 66 "energy"))) -21))))
(fun (main energy) (if (<= energy 0) true (block (set! energy (- energy 1)) (isbool (let ((a (> (+ -40 -1) (set! energy "energy"))) (d (block (> "energy" "energy")))) (<= (let ((h false) (x -14)) -18) (- "energy" "energy")))))))
(fun (fun1 energy z e) (if (<= energy 0) 34 (block (set! energy (- energy 1)) (let ((b (let ((a (fun4 (fun3 -42) "e" (- -95 "energy") (add1 "z") (block 70 "energy") (fun4 -99 true "energy" "z" 94 "e"))) (j "e")) (set! a (let ((a 3) (c "z") (e "j")) "c")))) (d (if (>= (+ -92 "z") (let ((h -25) (d true) (y true)) 40)) (> (* "z" -74) "b") (< (block "b" 17 "energy") (let ((g "b") (x -28) (e "b")) "b"))))) (- (block (>= 100 -73) (fun3 -4) (if false true "d") (if "b" "d" false) (* "z" 12)) (our_code_starts_here (* 28 "z") (let ((f -68) (e "z")) -70) (<= -21 -68) (+ 59 "b") (if "e" false true)))))))
(fun (fun2 energy d x i) (if (<= energy 0) true (block (set! energy (- energy 1)) (= (block (= (block -100) (let ((h false) (i 3)) "d")) (* (* -80 "i") (block true false "energy" "x" -27)) (block (* 44 "d") false (let ((x "x") (c "energy")) true) false (set! x true)) (block (let ((h 29) (x 44)) "x")) (* (+ -4 "energy") (block true true -38 "i"))) (sub1 (- (set! x "energy") (let ((f true) (x "f") (h "x")) -51)))))))
(fun (fun3 energy) (if (<= energy 0) 35 (block (set! energy (- energy 1)) (- (- (block (if -43 false true) (<= "energy" -83) (fun1 "energy" false false) (let ((h false)) 53) (+ "energy" 22)) 66) (* (block (+ 32 55) (>= "energy" "energy") (set! energy "energy") (add1 "energy")) (block (let ((j true) (a "energy")) 86) (= false false) (add1 -42)))))))
(fun (fun4 energy g i f h b) (if (<= energy 0) false (block (set! energy (- energy 1)) (isnum (let ((c (< (let ((c "h")) "h") (let ((h "b") (e -66)) -63))) (y (set! g (block "energy" "g" "i" "c" true)))) (= (let ((i "f") (g "i") (x "i")) true) (>= "g" "energy")))))))
(fun (fun5 energy y b) (if (<= energy 0) 27 (block (set! energy (- energy 1)) (block (let ((i (block true (block 44 -28 true "energy") (set! energy false))) (e (isbool (>= "y" 93)))) (- (set! b -19) (* "y" "b")))))))
(fun (fun6 energy j g i y h e) (if (<= energy 0) -76 (block (set! energy (- energy 1)) (block (if (set! h (isnum false)) (block (>= "j" -69) (>= 31 96)) (isnum (set! y "h"))) true (+ (let ((d (fun6 30 "i" "e" "y" false "h" "j")) (b (set! h "e"))) (* 86 "y")) (* (set! j -65) (let ((a "h") (h -92)) "h"))) (block (let ((j (let ((x "energy") (a false) (y -59)) true))) (let ((e "j") (y false) (x true)) "y"))) (+ (block (block "e") (>= 29 "y") (fun3 59) true (+ 84 "energy")) (let ((d (let ((j "j") (f "e") (c -71)) "y")) (i (block true "energy")) (g (= "i" 26))) (* "j" "energy")))))))
(fun (fun7 energy x f y a b c i z) (if (<= energy 0) false (block (set! energy (- energy 1)) (<= (fun5 (set! c (add1 "i")) (let ((z (isnum "y"))) (block "x")) (< (+ 44 "i") (if "y" "a" "energy"))) "a"))))
(block (let ((a (block (let ((z (let ((x (block (<= (fun6 55 true true -84 false true -76) (let ((loop_var_156 -52)) (let ((loop_var_74 -75)) (let ((loop_var_171 73)) (loop (if (> loop_var_171 (- 73 171)) (block (set! loop_var_171 (- loop_var_171 1))) (break "loop_var_171"))))))) (let ((x (block 60 false false false))) (let ((b "x") (z 74) (h "b")) "h"))))) (isbool (> (+ 51 63) -7)))) (a (block (let ((y (= (let ((a 11)) input) (<= -3 -61))) (i (let ((g (block 61 input 1))) (add1 62)))) (block (= "i" 94) (let ((loop_var_167 "i")) (let ((loop_var_178 -94)) (let ((loop_var_74 -46)) (loop (if (> loop_var_74 (- -46 74)) (block (set! loop_var_74 (- loop_var_74 1)) (set! y "i")) (break "i")))))) "i" (block "z"))) 38)) (y (if (block (fun5 -64 (* 24 "a") (block "z")) (- (let ((z -76) (x "z") (d "z")) "z") (add1 -3)) (let ((d (let ((loop_var_121 "a")) (loop (if (> loop_var_121 (- "a" 121)) (block (set! loop_var_121 (- loop_var_121 1))) (break 59))))) (h (block 87)) (c 76)) (- "a" -96)) (- (let ((loop_var_53 "a")) (loop (if (> loop_var_53 (- "a" 53)) (block (set! loop_var_53 (- loop_var_53 1)) (set! a 40) (set! a "a") -46 11 1) (break -59)))) 35)) (fun5 (block (if 29 "a" -47) (let ((f false) (i -21) (b input)) false) 22 25) "a" (let ((loop_var_35 19)) (loop (if (> loop_var_35 (- 19 35)) (block (set! loop_var_35 (- loop_var_35 1))) (break false))))) (- (let ((loop_var_36 "a")) (loop (if (< loop_var_36 (+ "a" 36)) (block (set! loop_var_36 (+ loop_var_36 1)) (set! z "a") (set! a 97) (set! z -42)) (break "loop_var_36")))) (block (let ((d "a") (b "d")) "z") "a" (set! a false) (let ((f -87)) 47)))))) "y") (let ((loop_var_151 (let ((f 66) (c 33) (h "f")) 52))) (let ((loop_var_19 (if 36 10 -57))) (loop (if (< loop_var_19 (+ (if 36 10 -57) 19)) (block (set! loop_var_19 (+ loop_var_19 1)) (if (let ((i (let ((z -97) (b false) (i 74)) "z")) (z (let ((h "i")) "h"))) (block "z" true)) (- (block 16) (let ((y false) (e 29)) -10)) (+ (block true -28 false 31) (+ -3 -60))) (- (+ (let ((j -84) (a "j") (d "a")) "j") (let ((g true) (x false) (f 80)) -87)) (block (isbool true) (fun1 96 true true)))) (break (let ((b (set! loop_var_19 (add1 33)))) "b")))))) (let ((loop_var_15 (* -89 2))) (loop (if (> loop_var_15 (- (* -89 2) 15)) (block (set! loop_var_15 (- loop_var_15 1)) (- (add1 (* 36 91)) 13) (let ((h (let ((g (let ((a false)) 83))) (* 29 -95)))) (if (if 71 "h" -37) (set! h "h") (+ "h" "h")))) (break "loop_var_15")))) (block (isnum (block (let ((z (> -22 -38)) (i (let ((z "z") (g 96)) true))) (let ((g -31) (f "z") (c false)) true)) (let ((b true)) false) (let ((e (> -16 -95))) (let ((x -7)) "x")) (let ((loop_var_107 89)) (loop (if (< loop_var_107 (+ 89 107)) (block (set! loop_var_107 (+ loop_var_107 1)) true false false) (break true)))) (isnum (block false false))))) (fun3 (let ((loop_var_29 (sub1 -14))) (loop (if (< loop_var_29 (+ (sub1 -14) 29)) (block (set! loop_var_29 (+ loop_var_29 1)) (let ((j (add1 52))) -41)) (break (let ((y (add1 "loop_var_29")) (e (let ((a 70) (y true)) 71))) (set! loop_var_29 "loop_var_29")))))))))) (<= (set! a (- (let ((c (> (block false true "a") -3)) (j 13)) (block (let ((a "j") (e true) (z -83)) -63))) (set! a (block "a" (let ((loop_var_115 24)) (let ((loop_var_20 26)) (loop (if (> loop_var_20 (- 26 20)) (block (set! loop_var_20 (- loop_var_20 1)) (set! a false) true true true) (break false))))) (* -94 "a") (let ((b true) (d "a") (i true)) "a"))))) (let ((loop_var_173 (+ 7 "a"))) (loop (if (> loop_var_173 (- (+ 7 "a") 173)) (block (set! loop_var_173 (- loop_var_173 1)) (+ (block (set! a -50) (fun3 "a")) (+ (* -19 -88) (let ((a "a") (x "a") (h "x")) "a"))) (let ((g (isbool (fun7 "a" "a" false -16 34 "a" "a" "a" true))) (i (let ((d (set! a "a"))) (let ((i "g")) 49)))) (let ((c (let ((c "a") (h true) (i "g")) input))) (let ((f 25) (d input)) "i")))) (break (block (> (- -88 70) -73) (let ((f (let ((x 21) (g false) (z true)) false)) (j (let ((j -28) (a -33)) "loop_var_173"))) true) (fun4 (let ((y -40) (a "y")) -81) (>= -35 "loop_var_173") "loop_var_173" (add1 59) (add1 46) (let ((e 86) (c "a") (z true)) false)) (let ((y "loop_var_173") (e (= false true))) -65) (block (sub1 "a") (let ((i 4) (y true) (b input)) "b") (if false true false) (fun5 36 "a" input))))))))) (let ((loop_var_47 (if false -18 -75))) (loop (if (> loop_var_47 (- (if false -18 -75) 47)) (block (set! loop_var_47 (- loop_var_47 1))) (break (let ((j (block (let ((h (let ((a (- "loop_var_47" 22)) (i (>= 47 84)) (h (+ "loop_var_47" 71))) (sub1 "h"))) (i (block (< "loop_var_47" 30) (let ((x true)) "x") (let ((y false) (z "loop_var_47") (j -14)) "y") "loop_var_47" (+ "h" 51))) (x (>= (set! i "h") (- "i" -81)))) (>= (+ -96 "i") (add1 -4))) (let ((g (let ((c (* 38 "loop_var_47"))) (let ((y false) (c "loop_var_47") (g "y")) "c"))) (f (- (add1 -71) (- "g" 93)))) (set! g (let ((y -54) (c false) (x "c")) -34))) (- (our_code_starts_here (set! loop_var_47 "loop_var_47") (block "loop_var_47" "loop_var_47" -85) (< -20 "loop_var_47") (+ -43 73) (block true true)) (block "loop_var_47"))))) (fun4 (fun3 (let ((z (block true "loop_var_47" "j" true)) (y (set! loop_var_47 "j")) (g (let ((f "z") (a "z")) 42))) (* "loop_var_47" "j"))) (< (- "j" (if 29 84 "j")) (let ((z (set! j true))) (+ -30 17))) (block (block (block "j"))) (set! j (block (let ((e true)) "loop_var_47"))) (set! j (let ((e (set! j true))) (* -25 "j"))) false)))))) (let ((loop_var_1 (add1 41))) (let ((loop_var_174 (block 95 true 82))) (loop (if (> loop_var_174 (- (block 95 true 82) 174)) (block (set! loop_var_174 (- loop_var_174 1))) (break (block (let ((y (sub1 (let ((x (block false "loop_var_174" true))) (let ((h -65)) -60)))) (b (if (let ((y (add1 "loop_var_174")) (z (block false -93 true -72 53)) (h (set! y "y"))) (isnum false)) (let ((z (fun1 -56 true true)) (g (fun7 -79 "loop_var_174" false -66 "z" "y" "loop_var_174" -57 false)) (d (let ((e false)) "e"))) (block 31 "d")) (isnum (let ((e "loop_var_174") (j 30) (d false)) false)))) (g (add1 (- 12 (let ((d "b") (h true)) "y"))))) (block (< (block 73 "y" "b" "y" 72) (if "y" -2 "g")) (isbool (set! b input)) (let ((z (isnum "b"))) (> -100 27)) (if (- -94 "loop_var_174") (- 95 "loop_var_174") (block false 0 "loop_var_174")) (- (block -100 false "g" true "loop_var_174") (block false "y")))))))))))