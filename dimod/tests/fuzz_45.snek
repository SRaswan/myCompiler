(fun (our_code_starts_here energy j f g d y x) (if (<= energy 0) -67 (block (set! energy (- energy 1)) "j")))
(fun (main energy) (if (<= energy 0) true (block (set! energy (- energy 1)) (let ((b (let ((e (block (* -46 "energy") (let ((i -35)) -93) (let ((c "energy") (h "c") (z "energy")) "energy") (let ((h 49)) 94))) (j (>= (add1 "e") (let ((f false) (e 17) (d -27)) -53))) (d (* (set! energy 78) (sub1 95)))) 20)) (h (if (set! energy (let ((j true) (c "j") (d "c")) "energy")) (fun5 (fun3 -58 true false "b" false true 38 false) (let ((b true) (i "b")) "b")) (set! b (add1 "b")))) (a (set! b (block (< "energy" "b"))))) (>= (block (sub1 -5)) (let ((y 38)) (- 48 -21)))))))
(fun (fun1 energy z h b) (if (<= energy 0) true (block (set! energy (- energy 1)) (<= (let ((d (< (add1 "energy") (block "z" "z" -81))) (y (- (+ 68 -18) (sub1 "z"))) (f (- (add1 "z") (set! d "y")))) (block (- 78 "energy") (+ "b" 36))) (block "energy" (let ((e (= 38 -82))) (< "b" "energy")) (block (block "energy" 57 false -83) (+ "b" "b") (* 67 "b") (let ((i "h") (g "b")) "h") (sub1 "energy")))))))
(fun (fun2 energy e) (if (<= energy 0) true (block (set! energy (- energy 1)) (>= (* (block (isbool false) (* -33 "e")) (sub1 (* "energy" 16))) (* (if (let ((f false) (g "f") (b "energy")) -47) (set! e "energy") (* "energy" -90)) (let ((g (set! e "energy")) (x (< "energy" -2)) (f (if false "x" "x"))) (- "e" "energy")))))))
(fun (fun3 energy e f y b i j d) (if (<= energy 0) 5 (block (set! energy (- energy 1)) (let ((y (let ((d (set! e (block -26 false true))) (i true) (a (block (+ "energy" "e") (block true false 62 "e") (let ((f "f")) true)))) (- (let ((h "d")) 27) (set! energy 95)))) (a (let ((g true)) (let ((f -7) (z (let ((j "energy") (a "i") (h 25)) 33)) (b (sub1 45))) (> "e" "energy"))))) (+ (fun3 (+ -31 24) (<= "d" "d") (let ((b true) (d true)) "a") "b" (>= -64 "y") (< 66 -16) (sub1 "b") (block false)) "b")))))
(fun (fun4 energy h y x f d g) (if (<= energy 0) true (block (set! energy (- energy 1)) (set! energy false))))
(fun (fun5 energy d) (if (<= energy 0) -48 (block (set! energy (- energy 1)) (set! d (let ((g (block (>= 94 "d"))) (f (<= (fun5 83 "d") (set! g 54))) (c (+ (block 51 48 -59) (block true "d" 99 "energy")))) (add1 (block "d" -86 -76 "c")))))))
(fun (fun6 energy j c g y b h) (if (<= energy 0) 24 (block (set! energy (- energy 1)) (set! y (set! c (our_code_starts_here (let ((f false)) "y") (set! g "energy") (let ((d "c")) 79) (- "j" "energy") (block true "y" -18) (* "h" "energy") (block false)))))))
(fun3 (let ((z (= (let ((loop_var_199 (add1 -85))) (let ((loop_var_12 (- 88 58))) (loop (if (> loop_var_12 (- (- 88 58) 12)) (block (set! loop_var_12 (- loop_var_12 1))) (break (* (let ((h (fun5 "loop_var_12" 53)) (i (isnum "h")) (b (block -18 "h"))) (block -9 true "loop_var_12" "h" -88)) (fun6 (- "loop_var_12" -89) (block false "loop_var_12" false true) (fun4 "loop_var_12" "loop_var_12" "loop_var_12" true false false true) (- "loop_var_12" "loop_var_12") (isnum true) (set! loop_var_12 "loop_var_12") true))))))) (sub1 (let ((loop_var_94 (let ((z input) (h "z") (x "h")) -72))) (loop (if (< loop_var_94 (+ (let ((z input) (h "z") (x "h")) -72) 94)) (block (set! loop_var_94 (+ loop_var_94 1)) (if (if -55 -83 93) (let ((i true) (b -49)) "b") (block false false 54)) (block (- -26 78) (fun1 80 false 60 94) (block -60 -2 78 false) (* 4 -4))) (break (set! loop_var_94 (- "loop_var_94" "loop_var_94")))))))))) 82) (block (if (> -46 (let ((z (isbool (block (fun4 -52 23 11 true false false true)))) (x (our_code_starts_here (let ((y (block true)) (h (let ((b "z") (x false)) -78))) (+ 54 23)) (let ((a (<= -97 -13)) (f (let ((b -35) (y false)) true))) (+ 92 90)) (sub1 66) (block (let ((a "z") (i true)) -50)) (let ((x (our_code_starts_here 78 -67 53 -91 85 -80 "z"))) (block true -13 -26 -36 -60)) (* (- 100 31) 50) (set! z (set! z "z")))) (b (let ((loop_var_126 (+ -70 -86))) (loop (if (< loop_var_126 (+ (+ -70 -86) 126)) (block (set! loop_var_126 (+ loop_var_126 1))) (break (block "z" "x" "x" 4))))))) (let ((c (let ((y (add1 43))) (* "y" "b"))) (z (* (let ((y "b") (b "b") (z -70)) 11) 19))) (* (- "b" "c") (+ "z" "b"))))) (= (* -92 (let ((z (> (let ((d 94)) -45) (let ((a false)) -72))) (x (block (* 73 -58) (let ((loop_var_158 -77)) (loop (if (< loop_var_158 (+ -77 158)) (block (set! loop_var_158 (+ loop_var_158 1))) (break "z")))) (sub1 -27) (+ -27 -70)))) (set! z (let ((loop_var_115 "x")) (loop (if (< loop_var_115 (+ "x" 115)) (block (set! loop_var_115 (+ loop_var_115 1)) (set! x -6) (set! x "x") (set! z "x")) (break "loop_var_115"))))))) (let ((a (block (let ((c (isnum true)) (z (let ((c -56) (x "c")) "x"))) (< -27 "z"))))) (* (* (block -54 8) (let ((i false) (f "a")) 5)) (add1 -33)))) (isbool (let ((x (let ((loop_var_101 (+ 70 -46))) (loop (if (> loop_var_101 (- (+ 70 -46) 101)) (block (set! loop_var_101 (- loop_var_101 1))) (break (fun6 "loop_var_101" false false -64 true 62 false))))))) (let ((c (let ((z (block -11 "x" 70))) false)) (e (block (let ((f "c") (b "x")) "b") (set! c "c") (fun1 -55 "c" "x" "x") (block -95) (add1 95)))) (let ((j (> 54 -90)) (a 85)) (isbool "c"))))))) (> (let ((d (* (add1 (* (add1 (sub1 -74)) (block (block 66)))) (let ((loop_var_188 (* 72 2))) (let ((loop_var_90 93)) (let ((loop_var_33 31)) (loop (if (> loop_var_33 (- 31 33)) (block (set! loop_var_33 (- loop_var_33 1))) (break (- (let ((e false) (j false) (b "loop_var_33")) -71) (- -90 -1)))))))))) (x (let ((loop_var_24 (block "d" false "d"))) (loop (if (< loop_var_24 (+ (block "d" false "d") 24)) (block (set! loop_var_24 (+ loop_var_24 1)) "d") (break (let ((i (set! loop_var_24 (let ((g false)) "g"))) (y (- (set! loop_var_24 "d") (block "d" "loop_var_24" "loop_var_24" "i" "loop_var_24")))) (let ((g (set! i true)) (i (let ((j "i") (h false)) "j"))) (let ((i "i") (c "i")) "d"))))))))) 8) (sub1 (let ((g false) (j (let ((d (+ (- (let ((z true) (x 79)) "x") 59) (let ((h (if -1 -75 -67)) (g (block "h" "h" "g" "h" true)) (i (* -10 "h"))) (+ 47 "i")))) (f false) (e (+ (let ((loop_var_121 60)) (let ((loop_var_195 48)) (loop (if (> loop_var_195 (- 48 195)) (block (set! loop_var_195 (- loop_var_195 1)) 63 "d") (break -90))))) (block false "f" "f" (* 71 "d"))))) (let ((loop_var_79 (set! g -12))) (loop (if (> loop_var_79 (- (set! g -12) 79)) (block (set! loop_var_79 (- loop_var_79 1)) (set! e (let ((i true) (f "e")) "g")) (block "f" true "e" "g") (isbool "g")) (break (fun1 "e" true 77 98)))))))) (+ (block false (+ (add1 30) 38)) (let ((c (<= (block -41 23 -32 true 14) (block 60 false 58)))) (* (let ((g false) (i false) (e false)) 74) (let ((loop_var_86 47)) (loop (if (< loop_var_86 (+ 47 86)) (block (set! loop_var_86 (+ loop_var_86 1)) (set! g 93) (set! j 48)) (break 26)))))))))) (+ (let ((loop_var_72 (- -59 26))) (loop (if (< loop_var_72 (+ (- -59 26) 72)) (block (set! loop_var_72 (+ loop_var_72 1)) -38 (let ((j (isbool (= (if false -30 15) (fun6 27 true true -44 false 90 true)))) (d (< (+ (* 82 71) (set! j -99)) (block (+ 35 16) (let ((j 62) (h "j") (g -3)) "j")))) (f (set! d (let ((c (let ((j true)) true)) (j (block false "d"))) "d")))) (sub1 (let ((e (< 9 -97)) (a (let ((i "f")) "f")) (d (- 61 -77))) (- -56 "d"))))) (break (block (sub1 (let ((e -9) (g (sub1 -36)) (c (let ((e true)) 34))) (block -74))) (- (- (let ((d true)) "loop_var_72") (set! loop_var_72 17)) (set! loop_var_72 (* 81 -53))) (block (>= (let ((f "loop_var_72") (d 31)) 51) (block "loop_var_72")) (let ((j (< -9 -11)) (x (* "loop_var_72" 30))) (> "loop_var_72" -1)) (set! loop_var_72 (let ((g "loop_var_72") (d true) (z "d")) "g")) (isbool (isnum true))) (set! loop_var_72 (let ((f (let ((j true) (e -7)) "e")) (x (isbool true)) (g (set! x -74))) (fun3 "loop_var_72" "x" "x" "g" false true -46 false)))))))) (let ((c true)) (add1 (block (add1 (+ (+ 73 87) (let ((loop_var_191 18)) (loop (if (< loop_var_191 (+ 18 191)) (block (set! loop_var_191 (+ loop_var_191 1)) (set! c -1) 26 -60 20) (break "loop_var_191")))))))))) (block (>= (block -75) (block (fun4 (- (let ((loop_var_44 5)) (let ((loop_var_1 86)) (loop (if (> loop_var_1 (- 86 1)) (block (set! loop_var_1 (- loop_var_1 1))) (break -36))))) (sub1 (block -14))) (* (fun5 (let ((y 7) (x "y")) -52) (block input 32 29 52 -61)) (block (<= 40 -84) 18)) (+ (let ((loop_var_133 12)) (loop (if (< loop_var_133 (+ 12 133)) (block (set! loop_var_133 (+ loop_var_133 1))) (break "loop_var_133")))) (sub1 (let ((loop_var_153 25)) (loop (if (> loop_var_153 (- 25 153)) (block (set! loop_var_153 (- loop_var_153 1))) (break -90)))))) (= (> (if 97 -91 44) (- -34 -28)) false) true (let ((loop_var_183 (- 86 76))) (loop (if (> loop_var_183 (- (- 86 76) 183)) (block (set! loop_var_183 (- loop_var_183 1))) (break false)))) (block (let ((g (fun1 -71 false -2 -81))) (let ((loop_var_34 35)) (loop (if (< loop_var_34 (+ 35 34)) (block (set! loop_var_34 (+ loop_var_34 1))) (break "loop_var_34"))))) true)) (let ((h (let ((j (sub1 (block false true -72)))) (add1 (+ 98 "j")))) (y (- (add1 (* "h" "h")) "h"))) (let ((y true)) (+ (sub1 -3) (let ((z -79) (i "y") (g "i")) "h")))) (let ((h (isbool (let ((g (>= 31 5)) (j (fun4 -98 -25 87 true "g" "g" true)) (c (let ((d "j") (a "g") (h "a")) false))) (block "j" "j" "j" "c" "c"))))) (let ((a (* (* -4 40) (let ((d true) (a 32)) 37))) (j (let ((loop_var_8 "a")) (loop (if (< loop_var_8 (+ "a" 8)) (block (set! loop_var_8 (+ loop_var_8 1))) (break false))))) (e (let ((loop_var_146 "a")) (loop (if (< loop_var_146 (+ "a" 146)) (block (set! loop_var_146 (+ loop_var_146 1)) (set! j "j") (set! h "j") "j") (break false)))))) (* (let ((x "j") (f "j")) "a") (sub1 "a")))) (let ((i (let ((f (block (let ((h -67) (e -28) (z "e")) true) (block true -41) (block true true true 10 false) (> -70 -55) (block false -46 false))) (e -94)) (add1 (+ "e" "e")))) (j (< (- (+ "i" "i") (add1 "i")) (let ((e (block 6 -15))) (let ((e false) (z true) (j "i")) 58))))) (>= -25 (sub1 (let ((x "i")) "i")))) (let ((z (let ((loop_var_36 (block 16 -5 false true -24))) (let ((loop_var_194 (let ((g true) (d "g")) -78))) (let ((loop_var_182 (fun6 -86 false input 94 true 5 false))) (loop (if (< loop_var_182 (+ (fun6 -86 false input 94 true 5 false) 182)) (block (set! loop_var_182 (+ loop_var_182 1)) (> -7 29)) (break (block input "loop_var_182" "loop_var_182" false))))))))) -25))) (let ((z (if (our_code_starts_here (let ((j (let ((x (block -60 -72 -98 -39))) "x")) (x (<= (+ 41 -57) (add1 -29)))) (let ((e (- "j" "j"))) (fun6 -99 true "x" 17 true -52 false))) (* (add1 (block -84 true true -65)) 10) (* (add1 (block true -2 7 48 76)) -38) (* (let ((j (+ -8 77)) (b (<= "j" -84)) (f (let ((loop_var_31 "j")) (loop (if (< loop_var_31 (+ "j" 31)) (block (set! loop_var_31 (+ loop_var_31 1)) (set! b "j") -92 "j") (break "loop_var_31")))))) (set! f "f")) (let ((i (* -64 -48)) (b (>= "i" -10)) (d (let ((a "b") (b "a") (d 45)) false))) (let ((b false) (x "b")) "i"))) (block (isnum (block false false)) (block (let ((d 97) (g false) (x -78)) "d") (let ((loop_var_85 28)) (loop (if (> loop_var_85 (- 28 85)) (block (set! loop_var_85 (- loop_var_85 1))) (break true)))) (block 55 true 62) -97) (let ((j (let ((loop_var_172 -45)) (loop (if (> loop_var_172 (- -45 172)) (block (set! loop_var_172 (- loop_var_172 1)) input true) (break false))))) (g (isnum true))) (- -47 76)) true (+ (* -8 49) (block 85))) (let ((g (* 79 (sub1 57))) (h (let ((d (block true false "g" 84)) (g (block false))) (>= -69 "d"))) (y (block (if "g" "g" "g")))) (- -80 (block "g" true 44 "g" "y"))) (let ((loop_var_167 (* 72 4))) (loop (if (< loop_var_167 (+ (* 72 4) 167)) (block (set! loop_var_167 (+ loop_var_167 1)) (> -14 6) (isbool true) (let ((x true) (i "x")) "i")) (break (< -35 -41)))))) (= (let ((d (let ((d (isnum input)) (h (isbool "d"))) 40)) (x false)) (< (* "d" "d") (block true "d" 79))) (isbool (>= (let ((loop_var_51 -49)) (loop (if (< loop_var_51 (+ -49 51)) (block (set! loop_var_51 (+ loop_var_51 1))) (break 33)))) (block -58)))) (if (let ((j (block (+ 28 -83) (> -53 49) (let ((z 82)) "z") (let ((c true) (z 81)) "z") (let ((e true) (x "e")) true))) (z (block (- -18 35)))) true) (block (let ((loop_var_10 -86)) (loop (if (> loop_var_10 (- -86 10)) (block (set! loop_var_10 (- loop_var_10 1)) -61) (break "loop_var_10")))) (= (< 75 -19) (let ((loop_var_103 -50)) (loop (if (> loop_var_103 (- -50 103)) (block (set! loop_var_103 (- loop_var_103 1)) false true) (break false))))) (let ((b false) (a (let ((c "b") (g "b")) -13)) (z (< -33 34))) -38) (- (let ((loop_var_30 -65)) (let ((loop_var_152 -55)) (loop (if (> loop_var_152 (- -55 152)) (block (set! loop_var_152 (- loop_var_152 1)) 23) (break 22))))) (let ((loop_var_66 58)) (loop (if (> loop_var_66 (- 58 66)) (block (set! loop_var_66 (- loop_var_66 1))) (break "loop_var_66"))))) (block (let ((i -78) (j "i")) false) (let ((loop_var_69 -30)) (loop (if (> loop_var_69 (- -30 69)) (block (set! loop_var_69 (- loop_var_69 1))) (break "loop_var_69")))) (let ((e -100) (x true) (j input)) "j") (fun1 -10 false -22 -35))) (block (fun1 (- -74 -76) (= 28 -10) (let ((i false)) -49) (+ 99 -18)) (+ (block -45) (block false 44)) (let ((h (let ((a 36) (b "a")) -46)) (g false) (e (block "h" 57))) (let ((loop_var_29 "e")) (loop (if (< loop_var_29 (+ "e" 29)) (block (set! loop_var_29 (+ loop_var_29 1)) false) (break "g"))))) (main (+ 26 -62)))))) (h (+ (set! z (- (let ((loop_var_131 23)) (let ((loop_var_168 81)) (loop (if (< loop_var_168 (+ 81 168)) (block (set! loop_var_168 (+ loop_var_168 1)) -17 47 99) (break -97))))) (- (block 28 -22) (block -59 32 "z" 40 85)))) (let ((a (block (sub1 (let ((loop_var_175 14)) (loop (if (< loop_var_175 (+ 14 175)) (block (set! loop_var_175 (+ loop_var_175 1)) (set! z -4) (set! z -5) (set! z -18)) (break -31))))) (let ((h 10) (g (block true -35))) true))) (g (> 94 (let ((f (- 65 69))) (let ((e "f")) "f"))))) (set! a (* (sub1 -14) (* -31 22))))))) "z") (let ((loop_var_65 (our_code_starts_here -24 28 -99 58 64 24 true))) (loop (if (> loop_var_65 (- (our_code_starts_here -24 28 -99 58 64 24 true) 65)) (block (set! loop_var_65 (- loop_var_65 1)) (block (- (let ((j (+ -80 -76)) (y (isbool false))) (+ "j" 45)) (let ((f (> -35 -83))) (add1 -98))) (let ((d (if (let ((f 6)) false) (+ 12 81) (let ((x true)) 79))) (c false) (j (sub1 (fun5 -81 "d")))) (<= (let ((i -100)) 66) (let ((j input)) "j"))) (fun1 (fun5 (- -37 -50) (block false 99 true -88)) (<= (block false 64 -79 -18 69) (let ((y 73) (z true) (x "y")) 94)) (fun5 (let ((y true)) -52) (* -37 -97)) (let ((g (< 19 1)) (y (<= 65 59)) (a "g")) (* 63 46))) (let ((j (sub1 (let ((a 68) (h false)) -59))) (g (let ((f (+ -98 "j")) (g (block true false false))) (set! g 20))) (x (set! j (set! j "j")))) (= (block 7) (set! j "x")))) (let ((a (* (let ((a (fun5 -20 -1)) (f (= 62 "a"))) (add1 "a")) (fun5 (block false -16) (sub1 64))))) (fun4 (block (block false true false 100 -33) (let ((h -80)) true) (+ "a" -36)) (* (let ((j -40) (g 3) (f true)) "a") (block -16 true "a")) (- (set! a 16) (* "a" "a")) true (fun1 (- 54 -92) (block true) (block "a" "a" true true "a") (- 14 -2)) (fun1 (block false true "a" 32) (let ((z true)) false) (- "a" "a") (let ((h true) (j -69)) 15)) (let ((c (set! a "a")) (x (<= -68 48)) (i (>= "a" "c"))) true))) true) (break (let ((b (let ((h (let ((e (= false false)) (z "e") (c (isnum true))) (isnum "z"))) (x (block (* "loop_var_65" -1) (sub1 26) (let ((b "loop_var_65") (f 50)) 46))) (e (let ((b (let ((d -78) (g true) (x false)) -53))) (let ((x "h") (b false)) 40)))) (isnum (> -59 "loop_var_65")))) (a (> 60 (- (block "b" "b" 48 "loop_var_65") (fun6 99 "b" "b" 90 "b" -43 false))))) (isbool (isbool (= true "a")))))))) true) (>= (let ((d (let ((z (>= 89 (let ((e (> (let ((i true) (z "i")) -63) (block true true -31)))) (sub1 (sub1 -61)))))) (block "z"))) (i (if (block (let ((a (let ((h true) (z (let ((loop_var_178 46)) (loop (if (> loop_var_178 (- 46 178)) (block (set! loop_var_178 (- loop_var_178 1)) (set! d 61) (set! h 62)) (break "loop_var_178")))))) (let ((b "z")) "b"))) (d (<= (* "a" 23) (if "a" -51 -83)))) (< (set! d "a") (+ "a" "a"))) -58 (let ((loop_var_183 (if -55 46 23))) (loop (if (> loop_var_183 (- (if -55 46 23) 183)) (block (set! loop_var_183 (- loop_var_183 1)) (set! d (set! d false)) (let ((e -89) (h input) (z "h")) "d")) (break "d")))) (let ((i (block (let ((z -92)) true) (let ((y "d")) true))) (a (block "i" (* 82 -24))) (g (block (let ((a "i") (h "a")) "a") (set! d -46) (let ((loop_var_72 -79)) (let ((loop_var_154 "a")) (let ((loop_var_24 "a")) (loop (if (> loop_var_24 (- "a" 24)) (block (set! loop_var_24 (- loop_var_24 1))) (break "d"))))))))) 63)) (let ((a (block (+ (let ((loop_var_101 -67)) (loop (if (< loop_var_101 (+ -67 101)) (block (set! loop_var_101 (+ loop_var_101 1))) (break -22)))) (block -54 9)) (+ (block true -50 -43 "d" 71) (let ((j 75) (i 46) (a -43)) "j"))))) (add1 (- (+ -93 "a") (fun6 "a" "d" "d" "a" "d" 22 true)))) (* (+ (our_code_starts_here (let ((z 78) (e "z")) 7) (* 86 99) (let ((y -29) (f "d")) "y") (let ((d -22) (z "d")) 48) (block 82 false 12 78) (let ((i "d") (g true)) -7) (<= 53 71)) (sub1 -55)) 52))) (j (let ((d (set! i (let ((y (* (- -5 -49) (* -90 "i")))) (let ((loop_var_63 "y")) (loop (if (> loop_var_63 (- "y" 63)) (block (set! loop_var_63 (- loop_var_63 1)) false false false) (break false)))))))) (sub1 (our_code_starts_here (add1 (* "i" "i")) (block (set! d "i") (let ((loop_var_9 -12)) (loop (if (< loop_var_9 (+ -12 9)) (block (set! loop_var_9 (+ loop_var_9 1))) (break true)))) "d" (let ((c 24) (e "c") (j true)) true) (* "i" -65)) (+ (* "i" -22) (let ((b input) (c false)) -26)) (let ((e (+ "i" "i")) (f (let ((j false) (x -67)) "e")) (a (let ((loop_var_91 -45)) (loop (if (> loop_var_91 (- -45 91)) (block (set! loop_var_91 (- loop_var_91 1)) (set! i false) "d" "d") (break input)))))) (+ 38 "e")) (let ((loop_var_75 59)) (loop (if (> loop_var_75 (- 59 75)) (block (set! loop_var_75 (- loop_var_75 1)) "i" "i" "i") (break -59)))) (let ((z (isbool "d")) (a (let ((c true) (a 49) (b "c")) 71))) (let ((f "a") (x "a")) "x")) (let ((b (> "i" -63)) (h (< -100 -42)) (g (isbool "d"))) (<= 78 -67))))))) (- "i" (block (block (block (< "i" -89) (let ((loop_var_104 -63)) (loop (if (> loop_var_104 (- -63 104)) (block (set! loop_var_104 (- loop_var_104 1)) (set! i "d")) (break "d"))))) (fun3 (let ((x 96) (j "d") (i "i")) 25) (isnum "d") (<= "j" "i") (let ((b true)) 56) (< "i" "j") (let ((loop_var_101 "j")) (loop (if (< loop_var_101 (+ "j" 101)) (block (set! loop_var_101 (+ loop_var_101 1))) (break input)))) (let ((x true) (h "i") (i "h")) -37) (let ((a true) (j "a")) "a")))))) (our_code_starts_here (fun6 (add1 (add1 (let ((loop_var_179 -81)) (let ((loop_var_61 32)) (loop (if (> loop_var_61 (- 32 61)) (block (set! loop_var_61 (- loop_var_61 1))) (break 14))))))) (isbool false) (if (let ((d (let ((f input) (i (let ((a -2)) "f"))) (set! f false))) (z (+ (set! d -41) -79))) (let ((x -5)) (block 59 "z" -7))) (isnum (block (let ((h -41)) "h") (let ((y input) (e 57)) "y"))) (block (> (- -26 -3) (+ 75 7)))) (let ((h (- 55 (let ((x (sub1 -36)) (d false) (c (let ((j 29) (f "j")) "j"))) (let ((loop_var_164 -48)) (loop (if (< loop_var_164 (+ -48 164)) (block (set! loop_var_164 (+ loop_var_164 1)) (set! c 88)) (break "x"))))))) (j (let ((loop_var_154 (* 12 "h"))) (loop (if (> loop_var_154 (- (* 12 "h") 154)) (block (set! loop_var_154 (- loop_var_154 1)) (set! h (block true "h" 88 false "h")) (set! h (block true 14 false "h"))) (break (sub1 "h"))))))) 22) (let ((a (+ (block (if true 42 74)) (add1 (sub1 18)))) (z (set! a (block (let ((j true) (f "a") (h false)) "a") (block true) (let ((j false) (i true)) input) (let ((b "a")) -22))))) false) (our_code_starts_here (block (fun3 (let ((f -53)) "f") (block false 68 99 true) false (block 98 10) (let ((c true) (x "c") (h -84)) "x") (fun4 71 13 5 false false true false) (let ((h 49) (g "h")) -65) (isbool true)) 100) (fun6 (let ((loop_var_83 93)) (loop (if (> loop_var_83 (- 93 83)) (block (set! loop_var_83 (- loop_var_83 1))) (break "loop_var_83")))) (main (block -28)) (let ((loop_var_39 -55)) (loop (if (< loop_var_39 (+ -55 39)) (block (set! loop_var_39 (+ loop_var_39 1)) true false) (break true)))) -22 (let ((d (add1 2)) (e (set! d "d"))) (let ((d "e") (y "e") (i -71)) false)) (let ((c (let ((i false)) true)) (d (block true))) (- -75 79)) (let ((i (let ((y -56) (x true) (h false)) -56)) (z (set! i true)) (y (let ((loop_var_147 77)) (loop (if (> loop_var_147 (- 77 147)) (block (set! loop_var_147 (- loop_var_147 1)) (set! z "i") -36 "i" "i") (break "i")))))) (let ((c "y")) false))) (let ((x (+ (let ((e false) (c true)) 45) (- 75 -58))) (e (>= (let ((f "x")) -100) (let ((x "x") (z -37)) "x"))) (i (let ((j (block "e" false 84 "x" "e")) (y (block "e" -25 60 "e" 22))) (add1 -85)))) (let ((g false) (j (let ((x -12) (b -31)) "e")) (c (<= "x" 39))) (* 33 -68))) (let ((y 43) (d (let ((f (block -78 "y" -49 22))) (block "y" "f" false))) (c (<= (- 16 44) (block "y")))) (* (+ "y" "y") (block true 21 "d" "y" "y"))) (* (block (fun1 28 true -95 23) (let ((loop_var_162 -39)) (loop (if (< loop_var_162 (+ -39 162)) (block (set! loop_var_162 (+ loop_var_162 1))) (break -14))))) (fun6 (let ((loop_var_88 56)) (loop (if (> loop_var_88 (- 56 88)) (block (set! loop_var_88 (- loop_var_88 1)) -12 82 38) (break "loop_var_88")))) (let ((loop_var_58 -19)) (let ((loop_var_160 85)) (loop (if (> loop_var_160 (- 85 160)) (block (set! loop_var_160 (- loop_var_160 1)) false false true) (break true))))) (block false true) (let ((g -4) (x "g") (c true)) -65) (let ((loop_var_127 -28)) (loop (if (< loop_var_127 (+ -28 127)) (block (set! loop_var_127 (+ loop_var_127 1)) false true false) (break false)))) (block -88 53 -13 -67 -39) (let ((loop_var_15 -69)) (loop (if (> loop_var_15 (- -69 15)) (block (set! loop_var_15 (- loop_var_15 1))) (break false)))))) 82 (block (let ((loop_var_137 -44)) (loop (if (< loop_var_137 (+ -44 137)) (block (set! loop_var_137 (+ loop_var_137 1))) (break false)))))) (isnum (fun2 (let ((h (let ((f -95)) "f"))) (* -12 88)) (fun3 (sub1 -71) (let ((i input)) false) (isbool false) (let ((h input) (f -62)) 40) (let ((b 65) (j "b")) false) (fun4 12 72 -46 true true true true) (add1 -36) (> 9 26))))) (let ((a (* (add1 (let ((loop_var_151 14)) (loop (if (< loop_var_151 (+ 14 151)) (block (set! loop_var_151 (+ loop_var_151 1))) (break "loop_var_151"))))) (block (> (let ((loop_var_24 -65)) (let ((loop_var_124 21)) (let ((loop_var_130 -10)) (loop (if (> loop_var_130 (- -10 130)) (block (set! loop_var_130 (- loop_var_130 1))) (break 29)))))) (add1 -20)) (isbool (let ((j false) (b 8) (d 65)) "j")) (* (block -69 true 9 31 63) (let ((g -68) (i "g")) "g")) (< (let ((j -5) (b true)) -71) (* 59 21)) (let ((i (< -29 20)) (e (let ((g false)) "g"))) (let ((c "i") (d true) (x -12)) "x"))))) (i (* (block (let ((b (let ((b "a") (y "b") (a true)) true)) (e (let ((loop_var_195 -28)) (loop (if (> loop_var_195 (- -28 195)) (block (set! loop_var_195 (- loop_var_195 1))) (break "b")))))) (>= "a" -63)) (block (= -14 "a") (let ((loop_var_95 "a")) (let ((loop_var_15 22)) (loop (if (< loop_var_15 (+ 22 15)) (block (set! loop_var_15 (+ loop_var_15 1)) (set! a -99) (set! a -73)) (break "a"))))))) (fun3 "a" (<= 45 (let ((i input) (c "a")) "a")) (let ((loop_var_28 "a")) (loop (if (< loop_var_28 (+ "a" 28)) (block (set! loop_var_28 (+ loop_var_28 1)) (set! a false) (set! a true)) (break false)))) (* (* "a" "a") (let ((x "a") (f "a")) 55)) (isbool (block false)) (let ((c -53)) (let ((g false) (x "a")) true)) 28 (let ((z (>= "a" 13)) (y (add1 -91)) (x (> "a" 69))) (>= "a" "a"))))) (j (> (* (block (block "i") (>= 1 -4) (if 50 false false) (block false 7 -91)) (block (> 21 91) (< 99 "a") (let ((f true) (c false)) "i"))) (+ (set! a (let ((e true) (d "e") (g "i")) "g")) (let ((h 78) (j (block false "i" 90 -9 -32)) (f true)) (let ((j "f")) -35)))))) (block (block (let ((a (sub1 21)) (z (block true "a" "i")) (b (> "i" "i"))) (* 84 "a")) (fun5 (+ "i" 31) (sub1 -27)) (+ (set! j "i") "a")) (block (let ((h (set! j "j"))) (block true true false)) (set! i (let ((d "a") (x 17) (j "j")) 37)) (set! a (<= -81 "a")) (let ((loop_var_200 "i")) (loop (if (< loop_var_200 (+ "i" 200)) (block (set! loop_var_200 (+ loop_var_200 1))) (break -91))))))) (let ((x (* (+ (- (block 1) 29) (block (block false true) (let ((loop_var_39 -97)) (let ((loop_var_15 -36)) (let ((loop_var_133 -78)) (loop (if (< loop_var_133 (+ -78 133)) (block (set! loop_var_133 (+ loop_var_133 1)) true false) (break false)))))) (fun6 -51 false false -5 true -82 false))) (if (fun5 (block -67 46 -23) (let ((loop_var_1 -97)) (loop (if (< loop_var_1 (+ -97 1)) (block (set! loop_var_1 (+ loop_var_1 1)) 37 77 40) (break "loop_var_1"))))) (let ((i (block -39 false false false false))) (- -67 100)) 4))) (f (let ((b (> (block (= false true) (+ 83 "x")) (let ((i (block "x" false -25))) (* "i" 82)))) (c (- (add1 (block "x")) (let ((h (let ((d true) (c "d")) "x")) (i (set! x true)) (f (let ((c -39) (b 37)) "h"))) (let ((d "i") (f 18) (y "f")) "f")))) (d (let ((h (block (isbool false)))) (- (+ -24 -38) (let ((a 94) (g "x")) -39))))) "b")) (j (block (block (set! f (let ((g 1) (h input) (j -10)) true)) (let ((b (block "x" true)) (z (let ((loop_var_154 "x")) (let ((loop_var_47 52)) (loop (if (> loop_var_47 (- 52 47)) (block (set! loop_var_47 (- loop_var_47 1)) "x" "x") (break "loop_var_47")))))) (g (= true false))) (let ((a "g")) 4)) (block (>= 16 84) "x" true (let ((a 56)) "a") (isbool input)) (isnum (let ((loop_var_145 -24)) (loop (if (< loop_var_145 (+ -24 145)) (block (set! loop_var_145 (+ loop_var_145 1))) (break true))))) (let ((loop_var_65 "x")) (loop (if (< loop_var_65 (+ "x" 65)) (block (set! loop_var_65 (+ loop_var_65 1)) (set! f "x") (set! f 49) 45 "x" "x") (break "x"))))) (let ((z (let ((d (block 72 67 false))) false)) (e (let ((c (let ((a true)) false))) (let ((d true) (f "c")) "x"))) (x (let ((e (let ((h 43) (x 85)) 93))) (let ((loop_var_142 "e")) (loop (if (< loop_var_142 (+ "e" 142)) (block (set! loop_var_142 (+ loop_var_142 1)) (set! z input) (set! e false) "z" "f" "z") (break "f"))))))) (let ((b (if true false "z"))) (set! z true))) (fun6 "x" (block "x" (sub1 77) (let ((loop_var_146 "x")) (loop (if (< loop_var_146 (+ "x" 146)) (block (set! loop_var_146 (+ loop_var_146 1))) (break "loop_var_146")))) (block false true)) (let ((a (if true 34 -32)) (j (> 2 "a")) (f (block 92))) (block "f")) (* (sub1 "x") (let ((z "f") (g "f") (i 2)) 43)) (let ((y (<= "x" "x"))) (block -4 false "f")) (let ((g "f") (d (+ 44 -55)) (z (let ((x "g")) "d"))) (- "x" "d")) "f") (+ (let ((loop_var_185 "x")) (let ((loop_var_67 "x")) (loop (if (< loop_var_67 (+ "x" 67)) (block (set! loop_var_67 (+ loop_var_67 1)) "x" "x") (break "x"))))) (add1 (block "f" "f" "f" -70)))))) (set! j (set! j (sub1 (* "x" -27))))) (- (block (let ((g -72) (j (block (let ((g true)) "g"))) (x (block (let ((loop_var_141 "g")) (loop (if (> loop_var_141 (- "g" 141)) (block (set! loop_var_141 (- loop_var_141 1)) (set! g "j") (set! g false)) (break "j")))) (let ((loop_var_4 78)) (let ((loop_var_77 "g")) (loop (if (< loop_var_77 (+ "g" 77)) (block (set! loop_var_77 (+ loop_var_77 1)) (set! j 63) (set! j "g") (set! g "g") "g" -55) (break "loop_var_77")))))))) (let ((g (let ((j "x")) input)) (a (+ "x" "x"))) (block input "g" -27 "g" true))) (let ((c (if (> 68 54) (let ((y false)) false) (if false true false)))) (block (let ((loop_var_147 -73)) (loop (if (> loop_var_147 (- -73 147)) (block (set! loop_var_147 (- loop_var_147 1))) (break "loop_var_147")))) (isnum false) (add1 13) (let ((y "c") (h 66)) true) (set! c "c"))) (block (block (let ((e -55)) 74) (fun6 -16 true false 79 false 10 true)) (* (let ((h true)) -13) (fun6 40 false true 50 true -50 true)) (main 91) (block (block 76 -32 true) (fun3 -91 true false 51 false true 99 false) (let ((loop_var_92 -1)) (loop (if (> loop_var_92 (- -1 92)) (block (set! loop_var_92 (- loop_var_92 1)) -71) (break -93))))))) (block 40 (let ((loop_var_80 (add1 1))) (loop (if (> loop_var_80 (- (add1 1) 80)) (block (set! loop_var_80 (- loop_var_80 1))) (break (set! loop_var_80 -63))))))) (block (> (block (if (fun6 -53 false false -18 false 85 true) -67 (sub1 84)) (>= (let ((j true) (f 96)) -20) (block -14 false 96 -99 -64)) (let ((loop_var_30 100)) (loop (if (< loop_var_30 (+ 100 30)) (block (set! loop_var_30 (+ loop_var_30 1))) (break "loop_var_30")))) (let ((e (let ((f -59) (c false) (e "f")) false)) (f (* 63 -59)) (g (let ((loop_var_34 "f")) (loop (if (< loop_var_34 (+ "f" 34)) (block (set! loop_var_34 (+ loop_var_34 1)) -18) (break -73)))))) (let ((f "g") (y "e")) "f"))) (add1 (let ((loop_var_62 50)) (loop (if (> loop_var_62 (- 50 62)) (block (set! loop_var_62 (- loop_var_62 1))) (break 25)))))) -23 (let ((e (>= (let ((z (let ((j input) (h -54) (x true)) 6))) (add1 51)) (fun6 (let ((loop_var_185 -57)) (loop (if (< loop_var_185 (+ -57 185)) (block (set! loop_var_185 (+ loop_var_185 1))) (break 0)))) true (isnum false) -13 (block 34 false) (let ((c 74)) "c") (isnum false)))) (z (- (* (let ((a 19) (x "a")) 35) 93) (+ (- 92 43) (block 92 false -37))))) (let ((b (let ((loop_var_64 -87)) (let ((loop_var_56 12)) (loop (if (> loop_var_56 (- 12 56)) (block (set! loop_var_56 (- loop_var_56 1)) "z") (break -52))))))) (* (block -77 -95) (fun6 "z" false "e" "b" "e" "b" true))))) (+ -27 -85) false)) (+ (our_code_starts_here (add1 (block (< (if (isbool input) (let ((h false) (i -27)) "i") (let ((loop_var_29 -43)) (loop (if (< loop_var_29 (+ -43 29)) (block (set! loop_var_29 (+ loop_var_29 1))) (break -87))))) (let ((z (main -22)) (g 67)) (let ((j 11)) 64))) (let ((h (let ((f (let ((y 4)) false)) (j (block -12 true)) (b (block "j" "f" 80))) (block 48 false))) (i (block (>= -95 -74) (>= -89 27) -88 (let ((j false)) "h") (let ((e -26) (x "e") (f "x")) "h"))) (a (sub1 (let ((z 79) (x "z") (e "x")) -16)))) (>= (* -28 "a") (let ((loop_var_22 99)) (let ((loop_var_50 19)) (let ((loop_var_165 11)) (loop (if (> loop_var_165 (- 11 165)) (block (set! loop_var_165 (- loop_var_165 1)) (set! h "a")) (break "a")))))))) (let ((z (our_code_starts_here (let ((f 23) (a "f") (z false)) -82) (* 66 71) -7 (let ((b false) (c true)) 73) (+ -72 -11) (let ((loop_var_2 16)) (loop (if (> loop_var_2 (- 16 2)) (block (set! loop_var_2 (- loop_var_2 1))) (break "loop_var_2")))) (> 91 37))) (e (block 69 (let ((y -65) (e "y")) "z") (fun6 -35 "z" true -82 "z" -76 "z"))) (j (let ((g (block "e" "e" false))) (let ((z "e") (e "g")) -38)))) (fun5 (add1 "e") (let ((e 44) (c false) (i false)) 34))) (let ((j (add1 (block -32))) (e (let ((a (let ((a -82)) 78)) (z (let ((loop_var_184 "j")) (loop (if (< loop_var_184 (+ "j" 184)) (block (set! loop_var_184 (+ loop_var_184 1)) (set! j input) (set! j false) (set! j true) false true true) (break true))))) (x (>= "a" "a"))) "x"))) (* (set! e 24) (block -91))) (sub1 (block (let ((h -1) (y "h") (i false)) false) (our_code_starts_here 51 -8 -91 68 64 30 false) (block false 5) (let ((loop_var_29 65)) (loop (if (> loop_var_29 (- 65 29)) (block (set! loop_var_29 (- loop_var_29 1)) false true input) (break true)))) 72)))) (block false (let ((j (let ((loop_var_75 (fun3 -69 false false 41 true false -4 true))) (loop (if (< loop_var_75 (+ (fun3 -69 false false 41 true false -4 true) 75)) (block (set! loop_var_75 (+ loop_var_75 1))) (break (- -24 -63)))))) (y (>= (block "j" (block true false 52)) (* (let ((i -57) (d "j") (j false)) -58) (block "j"))))) (set! j (block (if input "j" "j")))) (isbool (>= (fun6 (let ((e false)) -40) (> 30 -14) (let ((f 40)) true) (let ((c 87) (a "c")) 4) (< 89 -16) (add1 -1) (block 42 -78 -37 true)) (let ((loop_var_58 -14)) (let ((loop_var_35 50)) (loop (if (> loop_var_35 (- 50 35)) (block (set! loop_var_35 (- loop_var_35 1))) (break 73))))))) (let ((y (let ((loop_var_122 (+ -5 21))) (loop (if (< loop_var_122 (+ (+ -5 21) 122)) (block (set! loop_var_122 (+ loop_var_122 1))) (break (block false 28 false 47))))))) (block (block (let ((a -72) (h -83) (f true)) "f") (block true "y" 82 true -30) "y" (let ((g -33)) false)) (isnum (block false 23 false 82 false)) (block (isbool false)) (let ((loop_var_103 "y")) (let ((loop_var_32 43)) (loop (if (< loop_var_32 (+ 43 32)) (block (set! loop_var_32 (+ loop_var_32 1)) (set! y true) (set! y true) (set! y false)) (break false))))) (- (sub1 29) (add1 "y")))) (let ((x (add1 (sub1 (block false 26 true -47)))) (b 68)) (set! b (+ (let ((a false) (g true)) "b") "b")))) (- (let ((i (let ((h (let ((a (>= 1 12)) (h (let ((loop_var_68 34)) (loop (if (< loop_var_68 (+ 34 68)) (block (set! loop_var_68 (+ loop_var_68 1)) (set! a "a") (set! a "a")) (break false)))))) (let ((z -56) (f false) (b true)) "f"))) (z (block (block 56)))) (fun4 (sub1 "z") (block -16 49) (let ((loop_var_14 "z")) (loop (if (> loop_var_14 (- "z" 14)) (block (set! loop_var_14 (- loop_var_14 1)) "z" -81) (break -56)))) (let ((loop_var_164 "z")) (let ((loop_var_14 "z")) (loop (if (> loop_var_14 (- "z" 14)) (block (set! loop_var_14 (- loop_var_14 1)) true) (break "h"))))) (block -70 true) (let ((loop_var_25 60)) (let ((loop_var_2 61)) (loop (if (< loop_var_2 (+ 61 2)) (block (set! loop_var_2 (+ loop_var_2 1)) (set! h "h") (set! h "h") "h" "h" "h") (break "h"))))) (>= 73 38)))) (y (let ((e (let ((d (let ((loop_var_100 66)) (loop (if (> loop_var_100 (- 66 100)) (block (set! loop_var_100 (- loop_var_100 1))) (break "loop_var_100"))))) (z (let ((f true) (i "d") (x "d")) "i"))) (let ((h false) (y "h")) 46)))) (let ((loop_var_196 64)) (loop (if (< loop_var_196 (+ 64 196)) (block (set! loop_var_196 (+ loop_var_196 1))) (break "e")))))) (g false)) -99) (* (block (+ (let ((loop_var_55 -41)) (loop (if (> loop_var_55 (- -41 55)) (block (set! loop_var_55 (- loop_var_55 1))) (break "loop_var_55")))) (let ((y 32)) -68))) (let ((g (block (fun3 52 true true -66 true false -12 true) (let ((e 27) (h true)) false)))) (let ((x (let ((loop_var_175 38)) (loop (if (> loop_var_175 (- 38 175)) (block (set! loop_var_175 (- loop_var_175 1)) (set! g true) (set! g "g") (set! g false)) (break "g")))))) (sub1 -74))))) (* (- -95 (block (= (if -9 true false) (<= 100 65)) 97 (let ((loop_var_27 -53)) (loop (if (< loop_var_27 (+ -53 27)) (block (set! loop_var_27 (+ loop_var_27 1)) -6) (break "loop_var_27")))))) (let ((x (block (let ((y (block -57)) (h (isnum true))) (let ((a true) (c 7)) 14)) (+ (fun3 43 true false -84 true false -36 false) (let ((i false) (c false)) -88)) (block (block 4 false true) (- 48 -98)) (let ((e (+ 39 -5)) (c (if true -3 "e"))) (= "c" -98)) (fun5 (if -96 0 -76) (let ((x true) (i 76) (f "x")) "i")))) (h (add1 (set! x (sub1 -69)))) (a (block (let ((loop_var_61 "h")) (loop (if (> loop_var_61 (- "h" 61)) (block (set! loop_var_61 (- loop_var_61 1))) (break "h")))) (set! x (let ((f true) (j 99) (g "j")) "x"))))) (let ((loop_var_161 (let ((c input)) -22))) (let ((loop_var_92 (+ "x" "h"))) (let ((loop_var_90 (- "x" -54))) (loop (if (> loop_var_90 (- (- "x" -54) 90)) (block (set! loop_var_90 (- loop_var_90 1)) (* "a" "a") (fun6 15 false true -56 false -13 true)) (break (block "a"))))))))) (our_code_starts_here (let ((i (let ((f (let ((loop_var_68 -26)) (loop (if (> loop_var_68 (- -26 68)) (block (set! loop_var_68 (- loop_var_68 1)) false) (break true))))) (x (= -98 (let ((f "f") (c true) (e true)) -55))) (i (+ (let ((j "x") (x "j") (h "x")) 72) (block 18 -6 true -62 -28)))) (* (let ((c "x") (b -80) (e 27)) 23) "i"))) (h (let ((loop_var_136 (set! i 1))) (loop (if (> loop_var_136 (- (set! i 1) 136)) (block (set! loop_var_136 (- loop_var_136 1))) (break (if false "i" -44)))))) (g (sub1 (- (* 31 "h") (- "h" "h"))))) (+ (block (+ 50 "g")) (- (- -69 24) (* 39 "h")))) (block (let ((i (+ (+ 21 58) (let ((f true)) 81))) (c (set! i (let ((i 54)) false)))) (fun3 (- "i" 70) (>= "i" -68) (block "c" 77 true) (block "i" "i") (< "i" "i") (set! i false) (- "i" -70) (let ((y "i") (j true)) false)))) (let ((b (= (isnum (let ((loop_var_78 31)) (let ((loop_var_150 44)) (loop (if (< loop_var_150 (+ 44 150)) (block (set! loop_var_150 (+ loop_var_150 1)) true false) (break false)))))) (isbool (let ((z -2) (g -46) (d "z")) false)))) (d (let ((loop_var_152 -53)) (loop (if (< loop_var_152 (+ -53 152)) (block (set! loop_var_152 (+ loop_var_152 1)) (set! b (- -75 41))) (break (+ "loop_var_152" "loop_var_152"))))))) (let ((g (block (let ((loop_var_60 56)) (loop (if (> loop_var_60 (- 56 60)) (block (set! loop_var_60 (- loop_var_60 1)) (set! d "d") (set! b -3)) (break -82)))) (let ((j input) (d "b")) -83))) (e (* (+ -19 46) (* "d" -74)))) (- (block false "e" "e" 30) (block "b" input 8)))) (block (block (let ((z (fun5 29 -51))) (sub1 29)) (- (let ((y true) (j 47) (x true)) "j") (let ((f false) (a 62) (i "a")) -31)) (block (sub1 -98) 89 (>= -22 30)) (let ((c (let ((z 46)) 20))) true)) (let ((e (let ((e (= true true)) (c (let ((d 74) (f -90) (g "e")) "e"))) (set! e 69))) (h (let ((d (let ((z "e")) false)) (x (fun6 "e" "d" "d" 13 "d" 95 "d"))) 80)) (z "e")) (- (set! h "h") (let ((loop_var_197 -6)) (let ((loop_var_156 "h")) (loop (if (< loop_var_156 (+ "h" 156)) (block (set! loop_var_156 (+ loop_var_156 1)) (set! z -98) (set! h "z")) (break "h"))))))) (block (let ((a (let ((i false) (b -90)) true)) (e 69) (c (* 41 "e"))) (- 14 -48)) (isnum true) (>= (- 90 -59) (let ((e true)) 75)) (block (let ((g true)) true) (let ((b true) (y "b")) 14) (let ((loop_var_173 -48)) (loop (if (> loop_var_173 (- -48 173)) (block (set! loop_var_173 (- loop_var_173 1)) 27) (break 62)))) (- -22 -37) (* -75 68)))) (block (- (let ((d (- -35 -40)) (a (block true false "d" "d" 83))) (- "d" 68)) (let ((y (* 66 16)) (c (> "y" 32))) 87)) (* (- (- 58 -64) (add1 -29)) (+ (+ 49 -74) 73))) (let ((h (let ((loop_var_46 (+ 10 -9))) (loop (if (> loop_var_46 (- (+ 10 -9) 46)) (block (set! loop_var_46 (- loop_var_46 1))) (break (let ((b 72)) "loop_var_46"))))))) (if (let ((loop_var_14 -69)) (loop (if (< loop_var_14 (+ -69 14)) (block (set! loop_var_14 (+ loop_var_14 1))) (break false)))) (- (let ((loop_var_151 100)) (let ((loop_var_128 "h")) (let ((loop_var_65 62)) (loop (if (< loop_var_65 (+ 62 65)) (block (set! loop_var_65 (+ loop_var_65 1)) (set! h "h") (set! h 63)) (break "h")))))) (block false true false 77 "h")) (let ((j (= true true)) (f (let ((b "j") (g -52)) "j"))) 31))) false) (fun5 (- (let ((f (+ (block -53) (block 65 20 true false -3)))) (- (let ((loop_var_25 "f")) (loop (if (> loop_var_25 (- "f" 25)) (block (set! loop_var_25 (- loop_var_25 1)) (set! f "f")) (break "loop_var_25")))) (let ((b false) (z "b") (j "z")) "f"))) (let ((loop_var_188 (sub1 66))) (loop (if (> loop_var_188 (- (sub1 66) 188)) (block (set! loop_var_188 (- loop_var_188 1))) (break "loop_var_188"))))) (sub1 (let ((c (let ((loop_var_172 -31)) (loop (if (> loop_var_172 (- -31 172)) (block (set! loop_var_172 (- loop_var_172 1)) false true false) (break false))))) (a (let ((x (isbool false)) (f (block false)) (j (< 74 -81))) (block -95 23 -36))) (x (= (set! a "a") (let ((f "a") (z "c") (b "a")) -42)))) (let ((loop_var_151 94)) (let ((loop_var_23 "a")) (loop (if (< loop_var_23 (+ "a" 23)) (block (set! loop_var_23 (+ loop_var_23 1)) (set! x -42)) (break "loop_var_23")))))))) (let ((h (block (sub1 (let ((g (+ -61 57))) (+ 82 "g"))) (- (let ((e (<= 67 -86))) (* 3 -59)) -46) (block (< (sub1 13) (block 85)) true (isbool (fun2 -82 68)) (>= (- -49 39) (+ 97 -20)) -28) (block (block (< 87 8) (block -75 false 5)) (if (let ((loop_var_181 -66)) (let ((loop_var_185 13)) (let ((loop_var_73 89)) (loop (if (< loop_var_73 (+ 89 73)) (block (set! loop_var_73 (+ loop_var_73 1)) 92 -41) (break "loop_var_73")))))) (let ((y -93) (b -17)) "b") (let ((a false)) -83)) (> (let ((f 91) (x "f") (d false)) "f") (add1 55)) (if (< -83 -93) (let ((y true) (b false)) false) (block -85 false false -70 false))) 3)) (e (sub1 (our_code_starts_here (if "h" (let ((loop_var_126 "h")) (loop (if (> loop_var_126 (- "h" 126)) (block (set! loop_var_126 (- loop_var_126 1))) (break "loop_var_126")))) (block true 11 "h" "h")) (let ((e (let ((f "h")) true))) (sub1 "h")) (+ (add1 75) (block 89 89)) 97 (* (block -24 "h" "h" -1) (block true false 9 false 74)) (fun3 (- -93 "h") true (block -43 false) (set! h -81) (isnum false) false (let ((e "h") (z -3) (j "e")) "z") input) (set! h false)))) (c (set! h (let ((loop_var_100 (- "h" "e"))) (loop (if (> loop_var_100 (- (- "h" "e") 100)) (block (set! loop_var_100 (- loop_var_100 1)) (set! h false)) (break (block -8 true)))))))) (let ((d (fun2 (let ((loop_var_41 4)) (loop (if (< loop_var_41 (+ 4 41)) (block (set! loop_var_41 (+ loop_var_41 1))) (break "e")))) (sub1 (let ((j "e") (g -2)) 47))))) (let ((loop_var_68 (* 23 90))) (loop (if (> loop_var_68 (- (* 23 90) 68)) (block (set! loop_var_68 (- loop_var_68 1)) (set! h (fun1 79 "d" "e" "e"))) (break (isnum "c")))))))) (let ((loop_var_122 (if 78 33 51))) (loop (if (> loop_var_122 (- (if 78 33 51) 122)) (block (set! loop_var_122 (- loop_var_122 1)) (if (let ((b (let ((b -90) (f (<= "b" "b")) (c (let ((d -19) (j true) (h true)) "j"))) (set! c false))) (a (+ (let ((b 15) (z "b")) -55) (* -39 -12)))) (isnum (<= 51 99))) (block (fun4 (- -28 -70) (+ -45 -31) (- -24 11) (block true) (if 1 false true) (main -22) (block false -38 81 false false)) (< (let ((h false) (b false) (i "h")) -91) (+ -13 34)) (let ((j (block true input true -66 -48)) (y true)) (let ((f -40) (b false) (c input)) false)) (add1 (* 78 40)) (+ (block -47 true true 31) (block 90 true 12))) (let ((c (+ 42 (* -20 48)))) (let ((a (set! c false)) (c (set! a "c"))) (let ((x "c") (f 9)) "c")))) 66 (block (if (block (block -39 16) (let ((c -78) (h -59)) 13) (fun4 38 43 88 false false true true)) (- (- 21 -88) (- -57 96)) (block (let ((j false) (b "j")) -12))) (if (< (* 25 -43) (our_code_starts_here 90 -25 -37 -43 -9 -74 true)) (block (isnum true) (if true -18 -100) (let ((y -24)) 89) (if 42 true true) (block 37)) (+ (fun3 67 true true -55 true false 38 true) (+ 58 68))))) (break (block (let ((c (set! loop_var_122 true)) (d (= (add1 39) (let ((i false) (b "c") (x "loop_var_122")) "x"))) (g (let ((g "c") (e (main "loop_var_122"))) (isbool "g")))) (set! c (block "loop_var_122" "loop_var_122" "loop_var_122"))) (if (< (let ((c false) (a true)) "loop_var_122") (- 81 18)) (isnum false) (set! loop_var_122 (>= -32 75))) (set! loop_var_122 (< (sub1 "loop_var_122") (+ "loop_var_122" -30))) (let ((z (<= (- "loop_var_122" 1) "loop_var_122")) (i (let ((c (block 59))) (* "c" "c")))) (block (sub1 "loop_var_122"))))))))) (let ((e (let ((y (* (add1 (* 50 (let ((c (block -41 false true)) (i (let ((c 97) (h -37) (d -63)) "c"))) (let ((loop_var_65 77)) (loop (if (< loop_var_65 (+ 77 65)) (block (set! loop_var_65 (+ loop_var_65 1))) (break "loop_var_65"))))))) (let ((c (block (let ((b false) (j (let ((j 79) (z "j") (e "z")) true)) (i (block false 87))) (= 36 "i")) (< (- 47 53) -20) (let ((i -6) (f (let ((g 21) (j false) (a "i")) false)) (x (+ "i" "i"))) "f") 39)) (i (let ((d (let ((j (block true 96))) (- 94 -83)))) (block (+ 65 75) (let ((h false)) true) (block "c" true "d"))))) (block (let ((x (+ "c" "c")) (f (let ((loop_var_140 -45)) (loop (if (> loop_var_140 (- -45 140)) (block (set! loop_var_140 (- loop_var_140 1))) (break false))))) (e (fun5 45 -74))) (sub1 -83)) (let ((i (= false true)) (z input)) (block 26 70 -21 "i" -66)) (block (block "i" "c" true) (- -97 "i") (let ((loop_var_59 18)) (loop (if (< loop_var_59 (+ 18 59)) (block (set! loop_var_59 (+ loop_var_59 1)) (set! c false)) (break true)))) (let ((z false) (x 44)) 52)))))) (x (isbool (<= (set! y (let ((loop_var_168 "y")) (let ((loop_var_156 "y")) (let ((loop_var_41 "y")) (loop (if (< loop_var_41 (+ "y" 41)) (block (set! loop_var_41 (+ loop_var_41 1)) (set! y -48) "y") (break -73))))))) (let ((loop_var_101 (let ((f "y") (c false)) "f"))) (loop (if (< loop_var_101 (+ (let ((f "y") (c false)) "f") 101)) (block (set! loop_var_101 (+ loop_var_101 1)) (block 74 -83) (block "y" "y" false "y")) (break "loop_var_101")))))))) (> (let ((loop_var_23 (set! x 69))) (loop (if (> loop_var_23 (- (set! x 69) 23)) (block (set! loop_var_23 (- loop_var_23 1))) (break (if (block "x" -74 70) (let ((x -32) (e false)) "y") (block -78 "loop_var_23" false 0 "loop_var_23")))))) (let ((y (<= (sub1 (block 20 57)) (let ((j (block "x" "x" "x" "y" -2))) (add1 12))))) (let ((c (+ (let ((loop_var_72 "y")) (let ((loop_var_141 "y")) (loop (if (< loop_var_141 (+ "y" 141)) (block (set! loop_var_141 (+ loop_var_141 1))) (break -61))))) (let ((loop_var_76 53)) (loop (if (< loop_var_76 (+ 53 76)) (block (set! loop_var_76 (+ loop_var_76 1))) (break "y"))))))) (* (let ((loop_var_36 "c")) (loop (if (> loop_var_36 (- "c" 36)) (block (set! loop_var_36 (- loop_var_36 1)) "c" -73) (break 0)))) (+ -4 "y"))))))) (d (let ((c (let ((loop_var_22 (* -84 27))) (loop (if (> loop_var_22 (- (* -84 27) 22)) (block (set! loop_var_22 (- loop_var_22 1)) (set! e (* (let ((i (set! e 83)) (y "e") (c (set! e -84))) (sub1 "c")) (- (block 47 true -91 0) (* -23 -79)))) (set! e (our_code_starts_here (+ (set! e -87) (- -28 65)) (set! e (set! e 18)) (+ (block 26) 1) (* (let ((x true) (y -14)) "y") (* -51 70)) (- (block "e" -62 -96) (add1 87)) (set! e (* 96 19)) (isbool "e"))) (set! e 44) (block (block (>= 90 -46)) (block (>= 20 -74) (< 63 19) (>= 81 26) (* -96 66)) (let ((c (<= 30 -53)) (g (let ((b "c") (y -3)) "e"))) 51) (+ (block true -84) (* 1 -12)))) (break (our_code_starts_here (+ (let ((f true) (c "loop_var_22")) "c") (let ((h "loop_var_22") (i input) (x -41)) 36)) (let ((d (- -29 -50)) (z (set! d false)) (b (- "loop_var_22" "loop_var_22"))) (let ((i "e") (b "e")) -33)) "loop_var_22" (fun6 (sub1 -71) (> 67 32) (set! e "e") (block true "loop_var_22") (block "loop_var_22" "e" "e" true "e") (let ((c -47) (a true)) "loop_var_22") true) (+ (- 9 -77) (let ((b "e") (g "loop_var_22") (c true)) 17)) (- (set! loop_var_22 "loop_var_22") (* 35 13)) (set! loop_var_22 (= false true)))))))) (h (let ((x (block (block (add1 (block -86 "c" 12 false -46)) (isnum false) (+ -78 (set! e "c")) (block (= -73 "c") 92 (set! e false) (set! c "e") (let ((loop_var_89 "c")) (loop (if (> loop_var_89 (- "c" 89)) (block (set! loop_var_89 (- loop_var_89 1)) "c") (break "c"))))) false) (- (add1 (let ((y "e") (j -75)) "j")) (block "e" (block "c") (set! e "e") (let ((z "c") (x "z") (d true)) "c"))) (if (isbool (let ((g "e")) "g")) (let ((i (let ((f "e") (z "c") (g "f")) false)) (y (add1 "c"))) (let ((b false) (z "i")) 8)) (let ((b (let ((y 28)) "e"))) (let ((c "b")) "c"))) (block (block (+ -62 -90) (- -81 "c") (let ((loop_var_52 -48)) (loop (if (> loop_var_52 (- -48 52)) (block (set! loop_var_52 (- loop_var_52 1)) (set! c true)) (break "e")))) (block -86 76 "e" "c") (let ((g input) (x "e")) "g"))) (block (isnum (let ((c input) (y true)) "e")) (let ((c (let ((x "e") (y "c")) true)) (b (sub1 78))) (let ((j false) (e -42)) false)) 72 -83 (let ((f (block "c" "e")) (h (= "c" "c"))) (let ((x 97)) "c"))))) (e (let ((loop_var_13 (fun3 "c" false true -11 true true -36 "e"))) (loop (if (> loop_var_13 (- (fun3 "c" false true -11 true true -36 "e") 13)) (block (set! loop_var_13 (- loop_var_13 1)) (set! x (<= (block false "x" "x" -35 "x") (add1 91))) (set! c (let ((x (set! e "e"))) (let ((b "c") (a "e") (y 24)) "e"))) (set! c (= (< -37 "x") (block false false)))) (break (set! e (let ((e false) (c true)) "e")))))))) (set! e (add1 (block (+ "x" 70))))))) (let ((y (let ((j (let ((x (if (> "h" -21) (isnum "e") (>= "h" 36))) (e (sub1 (- 6 "h")))) (let ((z (block -96 "e" true 8 "x")) (h (let ((x "h") (h "e")) input))) (>= -77 "c"))))) (block (sub1 (let ((h "j")) "h"))))) (g (set! e (> (let ((loop_var_69 7)) (loop (if (> loop_var_69 (- 7 69)) (block (set! loop_var_69 (- loop_var_69 1)) "h" "c") (break -93)))) "y")))) true)))) (< (let ((loop_var_141 (fun5 -97 66))) (loop (if (< loop_var_141 (+ (fun5 -97 66) 141)) (block (set! loop_var_141 (+ loop_var_141 1)) (set! d -31) (set! e (+ (let ((z "d")) -96) (+ (set! e -56) (block -94)))) (let ((e (>= (- 72 69) (- -99 -19)))) (* (fun5 -27 -24) (- -73 24))) (set! e (* (let ((d input) (e "d") (y 84)) -36) (let ((h -76) (y 10) (c true)) 44))) (fun6 (let ((e -75) (g (let ((i "e") (c false) (b "e")) "i"))) (sub1 "e")) (> (+ -99 -22) (- 57 -57)) (if (<= -60 -56) (>= 29 -22) (let ((d 56) (g "e") (i -20)) "d")) (let ((i (block -100 19 "e" input true)) (a false) (h (set! i 38))) (block -86)) (let ((d (+ 95 -27))) (= "d" 81)) (add1 (block -24 "d" 71)) (block (>= -84 -81) (let ((j true) (x true)) 6) (isnum "d")))) (break (let ((x (let ((i (set! e true)) (b (* -67 "loop_var_141"))) (set! e 38))) (a (isnum (isbool false))) (e (set! e (* "x" 35)))) (block (> "e" -75) (let ((j "loop_var_141")) -97) (let ((e "e") (j input) (h "e")) -37) "loop_var_141")))))) (block (let ((x (let ((loop_var_164 (* 67 32))) (let ((loop_var_133 (block -78))) (loop (if (< loop_var_133 (+ (block -78) 133)) (block (set! loop_var_133 (+ loop_var_133 1)) (set! d (< 10 80)) (block false "d" true "e") (isnum false)) (break (let ((f -40) (e -35)) false))))))) (g (set! d (< (- 44 -90) (- -59 60)))) (f "e")) (add1 (- (* -96 -93) (block false "x" -51 "g" -13)))) (- (let ((f (let ((h (< 22 21)) (d (>= -27 -62)) (c (isnum "d"))) (let ((z 65)) "h"))) (d (block (let ((i 67) (f "i") (d false)) -50) (>= 21 -21) (let ((c 79) (a "d") (h -48)) 42) (let ((c "d") (a "e")) true)))) (let ((loop_var_49 -56)) (loop (if (> loop_var_49 (- -56 49)) (block (set! loop_var_49 (- loop_var_49 1)) (set! d 8) (set! f -16) (set! d -39)) (break 100))))) (sub1 (block (let ((f 72)) true) 94))) (let ((loop_var_45 (+ 47 -27))) (loop (if (> loop_var_45 (- (+ 47 -27) 45)) (block (set! loop_var_45 (- loop_var_45 1))) (break 77))))))))