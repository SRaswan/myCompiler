(fun (our_code_starts_here energy h c) (if (<= energy 0) 78 (block (set! energy (- energy 1)) "h")))
(fun (main energy) (if (<= energy 0) false (block (set! energy (- energy 1)) (< (+ (let ((h (set! energy -51))) (set! h -3)) (- (block false true false false 1) (* 34 "energy"))) (block (let ((z (fun5 -14 "energy" -36 "energy" false "energy" true))) (add1 -52)))))))
(fun (fun1 energy f) (if (<= energy 0) false (block (set! energy (- energy 1)) (block (let ((a (let ((a (> "f" "energy")) (b (let ((x "a") (c true)) false))) (block true -45 "energy" "a")))) (let ((i (- 0 "energy")) (z "a")) (add1 "f"))) true))))
(fun (fun2 energy i c h x a f) (if (<= energy 0) true (block (set! energy (- energy 1)) (> (let ((e (> (set! energy "energy") (if "c" "h" "h")))) (* (let ((h "x")) "i") (set! a "energy"))) (sub1 (block (block true) (- 14 44)))))))
(fun (fun3 energy) (if (<= energy 0) false (block (set! energy (- energy 1)) (>= (let ((e (if (+ 100 97) (let ((f true) (y "energy")) false) (set! energy true))) (h (our_code_starts_here (let ((a -23)) -85) (block "energy" "energy" false -95) (let ((i "e") (c "energy") (h "e")) "e")))) "h") (block (let ((g (>= "energy" 29)) (h (let ((g "energy") (b false)) false)) (c (let ((x "energy") (i "x")) "x"))) (block "c" "c" 34 "energy" "energy")))))))
(fun (fun4 energy j i e) (if (<= energy 0) -53 (block (set! energy (- energy 1)) (block (let ((a (isbool (block true))) (b "energy")) (set! i (* "energy" -13))) (+ (set! energy (let ((a -85) (j false) (f "a")) -16)) (+ (+ "j" "energy") (let ((x false) (h -8)) "j")))))))
(fun (fun5 energy j b y d f i) (if (<= energy 0) false (block (set! energy (- energy 1)) false)))
(fun (fun6 energy) (if (<= energy 0) true (block (set! energy (- energy 1)) true)))
(fun (fun7 energy i x f g y e a) (if (<= energy 0) true (block (set! energy (- energy 1)) (set! g (if (block (add1 -90)) (>= (- 28 -96) (- "energy" -81)) (< (block "g" "a") "i"))))))
(fun (fun8 energy g h i z f b x) (if (<= energy 0) 86 (block (set! energy (- energy 1)) (block (set! x "h") (let ((e (block (isbool "h") (< "energy" "i")))) (block (if "g" "h" "h") true)) (block (* (fun4 94 "h" 47 -92) (+ "i" "i"))) (block (block (let ((a "x")) "h") "b") (- (set! i -5) (sub1 "f")))))))
(fun (fun9 energy c x h a y g i) (if (<= energy 0) 30 (block (set! energy (- energy 1)) 5)))
(let ((d (isnum (isbool (let ((c (isnum (isnum (isbool (block false))))) (f (let ((i (isbool (>= (let ((loop_var_113 -82)) (let ((loop_var_101 -61)) (let ((loop_var_133 43)) (loop (if (< loop_var_133 (+ 43 133)) (block (set! loop_var_133 (+ loop_var_133 1)) (set! c -63) (set! c 93)) (break "loop_var_133")))))) (block false 39)))) (e (let ((f (let ((g (fun3 28)) (z (isnum "i"))) 29))) (let ((e (let ((loop_var_93 88)) (loop (if (> loop_var_93 (- 88 93)) (block (set! loop_var_93 (- loop_var_93 1)) (set! i "c") (set! f "c") (set! c "c") false "i") (break true)))))) (isnum false)))) (g (if (add1 (block "e" 7 -30)) (block (let ((loop_var_182 12)) (loop (if (> loop_var_182 (- 12 182)) (block (set! loop_var_182 (- loop_var_182 1)) (set! e true) true) (break "c")))) (let ((loop_var_72 -45)) (loop (if (> loop_var_72 (- -45 72)) (block (set! loop_var_72 (- loop_var_72 1)) (set! e false) (set! c true) false) (break false)))) (- 43 -20)) (let ((b (our_code_starts_here 64 -53 true))) (- "b" "b"))))) (block (block (block "e" true "g" "g" "i") (isbool true) (let ((loop_var_6 "g")) (loop (if (> loop_var_6 (- "g" 6)) (block (set! loop_var_6 (- loop_var_6 1))) (break true)))) (> -1 -77) (let ((g false) (x false) (h "g")) "h")))))) false)))) (b (* (+ (block (add1 (let ((loop_var_98 (* -80 -25))) (loop (if (< loop_var_98 (+ (* -80 -25) 98)) (block (set! loop_var_98 (+ loop_var_98 1)) (set! d (* -49 90))) (break (+ "loop_var_98" "loop_var_98")))))) (let ((d (- (let ((e (* -26 76)) (j (- "e" 24))) (let ((j "j")) "e")) (* (- 14 -3) (add1 -62))))) (if "d" (block (if "d" -60 -44) (let ((loop_var_81 91)) (loop (if (< loop_var_81 (+ 91 81)) (block (set! loop_var_81 (+ loop_var_81 1)) -45) (break "loop_var_81")))) (let ((loop_var_148 -49)) (let ((loop_var_20 10)) (loop (if (> loop_var_20 (- 10 20)) (block (set! loop_var_20 (- loop_var_20 1))) (break -35)))))) (let ((z "d") (d (<= "d" "d")) (e (isbool false))) (* 56 "z"))))) (if (let ((e "d") (b (block (let ((loop_var_32 26)) (loop (if (> loop_var_32 (- 26 32)) (block (set! loop_var_32 (- loop_var_32 1)) (set! e "e") true) (break "d")))) (let ((loop_var_100 93)) (loop (if (< loop_var_100 (+ 93 100)) (block (set! loop_var_100 (+ loop_var_100 1)) (set! d 75) (set! d 87) (set! d 86) -87 58) (break "loop_var_100")))) (block -8 (block "e"))))) 51) (- (let ((f (let ((y (let ((z -43)) "d")) (b (= true false)) (i (- -74 85))) "y")) (g 97)) (+ (block 90 false -90) (let ((loop_var_63 "g")) (loop (if (> loop_var_63 (- "g" 63)) (block (set! loop_var_63 (- loop_var_63 1)) (set! d "g") (set! g "g") (set! f 11)) (break 56)))))) (- (let ((i (fun7 -98 85 -70 84 "d" "d" 47 -99))) (+ 34 -36)) (block (let ((z "d") (c true)) false) (let ((e 35) (i -46)) -15)))) (- (fun8 (set! d (let ((y false) (f -98) (j "f")) 28)) (set! d (isnum false)) -13 (let ((loop_var_127 37)) (loop (if (> loop_var_127 (- 37 127)) (block (set! loop_var_127 (- loop_var_127 1)) (set! d -10)) (break "loop_var_127")))) (let ((loop_var_175 48)) (loop (if (< loop_var_175 (+ 48 175)) (block (set! loop_var_175 (+ loop_var_175 1)) (set! d 31) -7 87 -14) (break "loop_var_175")))) (sub1 (let ((x -93) (z "x")) -95)) (let ((j (let ((loop_var_197 -40)) (loop (if (> loop_var_197 (- -40 197)) (block (set! loop_var_197 (- loop_var_197 1)) -34) (break 79)))))) (let ((g "d")) "j")) (< (- 46 5) (add1 44))) (let ((e (block (block false "d" "d" false) (let ((i "d")) true)))) (+ (- 27 87) -24))))) (block (let ((j (block (let ((y (block (sub1 -84) (+ 83 42) (block -100 46 -34 76) (let ((e -68) (a -12)) "d"))) (i "d")) (let ((loop_var_44 25)) (loop (if (< loop_var_44 (+ 25 44)) (block (set! loop_var_44 (+ loop_var_44 1))) (break "loop_var_44"))))) (< (let ((e 93)) (block "e" 53)) (block (- -80 -70) (- -30 -33) (- 95 -84) (* -44 -3))) (if (block (* 68 93) (block "d" 49 -56 -11) -29) (let ((loop_var_135 8)) (loop (if (> loop_var_135 (- 8 135)) (block (set! loop_var_135 (- loop_var_135 1))) (break input)))) input) (let ((j (>= (sub1 79) (let ((loop_var_77 -28)) (let ((loop_var_191 -78)) (let ((loop_var_180 8)) (loop (if (< loop_var_180 (+ 8 180)) (block (set! loop_var_180 (+ loop_var_180 1))) (break "loop_var_180")))))))) (c (let ((loop_var_65 99)) (loop (if (> loop_var_65 (- 99 65)) (block (set! loop_var_65 (- loop_var_65 1)) (set! d -57) (set! d 44) (set! j 62) 27 -48 -41) (break "loop_var_65"))))) (b (> (add1 59) (- "c" "c")))) (let ((x true) (j (>= "c" 93)) (e (< 65 16))) "c"))))) false) (sub1 (block (let ((f (let ((loop_var_96 89)) (let ((loop_var_181 -83)) (let ((loop_var_108 -35)) (loop (if (> loop_var_108 (- -35 108)) (block (set! loop_var_108 (- loop_var_108 1)) (set! d "d") (set! d false) (set! d "d") false "d") (break false))))))) (d (isnum (let ((i "d") (j "d")) false))) (h (= (set! d "f") (let ((i 2) (c "d")) false)))) (- (set! f 12) (let ((j false)) -79))) (block false) (let ((g (let ((h (let ((loop_var_16 -56)) (let ((loop_var_64 33)) (loop (if (> loop_var_64 (- 33 64)) (block (set! loop_var_64 (- loop_var_64 1)) (set! d 25) -30 -26) (break 55))))))) (let ((d -99) (b 89) (z -11)) -84))) (e (- (block -47 -76) (add1 "g"))) (i (- (* 79 45) (+ 24 53)))) "d") (fun8 (block (<= -55 57) (= 55 -23) (add1 -97)) (< (block -41 false 35 6) (let ((loop_var_169 -20)) (loop (if (< loop_var_169 (+ -20 169)) (block (set! loop_var_169 (+ loop_var_169 1))) (break "loop_var_169"))))) (let ((loop_var_135 9)) (loop (if (> loop_var_135 (- 9 135)) (block (set! loop_var_135 (- loop_var_135 1)) (set! d 16) (set! d 46) (set! d 84)) (break "loop_var_135")))) (+ (set! d 27) (sub1 -24)) (* (let ((loop_var_50 -4)) (let ((loop_var_14 59)) (loop (if (> loop_var_14 (- 59 14)) (block (set! loop_var_14 (- loop_var_14 1))) (break "loop_var_14"))))) (* 12 -22)) (let ((loop_var_165 46)) (loop (if (> loop_var_165 (- 46 165)) (block (set! loop_var_165 (- loop_var_165 1)) (set! d -24) 99 41) (break "loop_var_165")))) (+ -64 (let ((b 18) (a "b")) "b")) (>= (sub1 -93) (let ((d 29) (z "d") (f "d")) "d")))))))) (i "d")) (set! b (set! d (fun1 (+ (- (let ((z false) (h (let ((b -92) (a "d") (y "b")) "z")) (b (let ((b -29) (z "b")) "z"))) (let ((z "b") (y true) (x "b")) "x")) (block (block "d") (* 51 "b"))) (let ((d "d") (c (let ((y "b") (h (block "b" "i" "y" "b"))) (let ((b 97)) "i")))) (let ((i (block 62 12)) (a (let ((c "c") (g "b") (b -57)) "b")) (h (sub1 "b"))) (our_code_starts_here "b" 2 "d")))) (fun2 (let ((c (block (block true false false false) (if -99 -70 "b") (= "i" true) (let ((loop_var_53 -79)) (loop (if (< loop_var_53 (+ -79 53)) (block (set! loop_var_53 (+ loop_var_53 1)) (set! b -35) (set! d "b")) (break -69)))) (- "b" "b"))) (e 5) (z (+ (* 87 -53) (let ((z true) (b false) (c 1)) 52)))) (+ (block -11) (let ((loop_var_102 -6)) (loop (if (> loop_var_102 (- -6 102)) (block (set! loop_var_102 (- loop_var_102 1))) (break "b")))))) (> (- (fun9 "b" "d" "b" -35 "i" "b" "i" false) (block "i" "b" "b")) (let ((loop_var_12 "b")) (loop (if (> loop_var_12 (- "b" 12)) (block (set! loop_var_12 (- loop_var_12 1)) "b" "b") (break 61))))) (our_code_starts_here (- (add1 -87) (+ -41 59)) (let ((j (let ((g "b")) false)) (y (<= "b" "b")) (i (> "b" "b"))) (let ((loop_var_110 86)) (loop (if (< loop_var_110 (+ 86 110)) (block (set! loop_var_110 (+ loop_var_110 1))) (break "loop_var_110"))))) (let ((b (block false "b")) (j (isnum "d"))) (block true true 1 "j"))) (let ((loop_var_45 (set! i 58))) (let ((loop_var_109 (add1 "b"))) (loop (if (> loop_var_109 (- (add1 "b") 109)) (block (set! loop_var_109 (- loop_var_109 1)) (let ((z "b") (d "z") (j false)) "i") (= "b" "b")) (break (let ((z "i")) "z")))))) (isbool (block (block "b" -30 62 "i" -73) (let ((loop_var_134 "b")) (loop (if (< loop_var_134 (+ "b" 134)) (block (set! loop_var_134 (+ loop_var_134 1)) (set! d "d") (set! d "d") (set! i "i") true true "d") (break "i")))))) (= (let ((f (< -85 -67)) (i (let ((b "i") (d "d")) false))) (= false true)) (>= (block -12 "i" -52) "b")) (- (* (let ((b 37)) 90) (sub1 "b")) 64))))))