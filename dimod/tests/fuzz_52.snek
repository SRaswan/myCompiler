(fun (our_code_starts_here energy d f i z b) (if (<= energy 0) 3 (block (set! energy (- energy 1)) (let ((b (add1 "energy")) (e (>= -3 (block (block "i" false "z" -44) (set! f false) (set! energy -27)))) (g (> (let ((j (let ((f -61) (i "b")) 50)) (x (let ((i "b") (h "b") (g true)) -58))) (block -25 true "f" -10)) (block (set! i true) (block "energy" -85 70) (+ "b" -66) (set! f -86))))) (let ((e (let ((x (<= -6 -6))) (- "energy" -6))) (c (block (isbool "e")))) (+ (block 33 -98 5 -88) (add1 -6)))))))
(fun (main energy j a c y g d) (if (<= energy 0) false (block (set! energy (- energy 1)) (>= (fun2 -51 (+ (add1 -51) (let ((d "g")) "energy")) (* (* -86 "y") (set! g "energy")) (let ((j (add1 "y")) (b (block "j" "j" "g" "energy" true))) false) (* (- "y" -89) (set! g -26)) (fun3 (set! g 62) (let ((a false)) 58) "c" (isbool "c") (isnum true) (set! d -34) (* "energy" -51) (block -19 "energy" true 39) (isnum "g")) "c") (let ((a (block (add1 "j"))) (b (let ((a (isbool "g"))) 53))) (- (set! y -41) (* "j" -88)))))))
(fun (fun1 energy) (if (<= energy 0) -28 (block (set! energy (- energy 1)) (fun1 energy))))
(fun (fun2 energy y a g b c i) (if (<= energy 0) 91 (block (set! energy (- energy 1)) (- (* (block (let ((x false) (f 13) (d "f")) true) (block -73)) (if (= "c" "c") (let ((h "b") (f 55) (c true)) -3) (* -96 -43))) "g"))))
(fun (fun3 energy i d f b h a y e) (if (<= energy 0) 84 (block (set! energy (- energy 1)) (add1 (block (+ (let ((d false) (e "i") (a "a")) "e") (sub1 "y")) (set! b (set! f -9)))))))
(fun (fun4 energy) (if (<= energy 0) 98 (block (set! energy (- energy 1)) (let ((f (>= (+ (let ((c "energy") (f false) (a "energy")) "c") (- 22 34)) (block (<= "energy" -24) (let ((d 43)) false) (isbool false) (main "energy" false false 21 true false true) (let ((e "energy") (y -28) (f false)) "y")))) (c (> (set! f (- "energy" "energy")) (let ((d (block "f" -6 -33 -94)) (j (* "energy" -11)) (a (block "f" -94))) "a"))) (z (= (let ((h (sub1 "energy")) (g (main "h" false true "energy" true false "f")) (i (- "h" -14))) (fun2 65 -4 41 "c" 56 "i" false)) (let ((z (+ "energy" 26)) (j (> 73 "z"))) "z")))) (let ((g (set! c (let ((j false) (y "j") (d -23)) 43)))) (let ((g (let ((x 16)) -57)) (b "energy") (j (let ((b "energy")) "z"))) (block true true "f" false 42)))))))
input