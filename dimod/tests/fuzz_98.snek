(fun (our_code_starts_here energy h z) (if (<= energy 0) -43 (block (set! energy (- energy 1)) (let ((e (set! h (block (- "z" 94) (let ((y -29) (d -41) (i false)) -7)))) (f (let ((i (isbool (block "z" false)))) (set! i (isnum true)))) (c (set! e (let ((b (fun1 "energy" "h" "f"))) (let ((f "f")) "energy"))))) (- -71 (- (* "c" -11) (let ((i "f") (f true) (y -51)) -43)))))))
(fun (main energy) (if (<= energy 0) false (block (set! energy (- energy 1)) (isnum (block (let ((d (<= "energy" 75))) (> "energy" 7)))))))
(fun (fun1 energy e z) (if (<= energy 0) true (block (set! energy (- energy 1)) (block (isbool (< (- 54 "e") (block -69))) true (let ((x (let ((x (let ((h "z") (x false) (z "energy")) true)) (d (- -28 "e"))) (block "z" "energy" true "x"))) (e (- (* 37 23) (let ((d "x")) 5))) (y (block (let ((y -87) (b "e") (i false)) "x")))) (>= (* 83 "z") (block false "z" "z" "e"))) (main (set! z 9))))))
(fun (fun2 energy c y a f) (if (<= energy 0) -31 (block (set! energy (- energy 1)) (let ((j (fun4 (sub1 (+ "energy" "a")) (* (let ((y "y") (i 19) (j "energy")) "i") (block "energy" "a" -46)) (<= (set! a "f") (* "energy" "f")) (isbool (> 37 "c")))) (b (block (set! j (let ((e "y") (d 21) (x "y")) false)) (let ((y (if 33 50 "energy")) (z (set! c false))) (let ((b false)) "a")) (set! a (< "f" 7)))) (a (block -82 -44))) (set! b (our_code_starts_here (let ((x -34) (f true) (b false)) "energy") (let ((x "b")) 89) (fun2 "j" true 94 "j" "energy")))))))
(fun (fun3 energy g d a x h y z) (if (<= energy 0) -84 (block (set! energy (- energy 1)) (- (let ((y (> (let ((y "a") (a "y") (e false)) "energy") 70))) (set! d (let ((d "a")) "a"))) (our_code_starts_here 33 (* (let ((a 49) (i "a")) -65) (* 35 -76)) (+ (block -76) (let ((i 7)) 57)))))))
(fun (fun4 energy b c e) (if (<= energy 0) 40 (block (set! energy (- energy 1)) (- (our_code_starts_here (sub1 36) (* (+ -21 "energy") (- 88 "c")) (fun4 (* "energy" "b") (let ((b "b") (z 94) (h -82)) -11) (let ((z -81) (e false) (a "c")) "e") true)) (- (block (<= 48 "energy") (block 33 40 "c") (* "energy" "b") (> "energy" -36) (add1 "energy")) (our_code_starts_here (+ "c" 79) (+ -62 "b") (set! c "b")))))))
(block (let ((z (let ((g (block (let ((y (let ((e 64)) (= (+ "e" -87) (+ -2 -24)))) (b (>= -77 (* (set! y -82) (let ((loop_var_123 62)) (loop (if (> loop_var_123 (- 62 123)) (block (set! loop_var_123 (- loop_var_123 1)) (set! y -20)) (break "loop_var_123")))))))) (block (isbool (isbool "b")) (block (isnum true) (let ((loop_var_175 -16)) (loop (if (< loop_var_175 (+ -16 175)) (block (set! loop_var_175 (+ loop_var_175 1)) -54 48 43) (break "loop_var_175")))) 18) (>= (* -82 -47) (- 19 3)) 19)) (block (block 78 (+ (fun4 55 3 false false) (let ((f 25) (h 87)) -32))) (isnum (let ((a (block 62 -58 false -45))) (let ((e "a")) true))) (let ((loop_var_45 (* -13 34))) (let ((loop_var_170 (sub1 5))) (loop (if (> loop_var_170 (- (sub1 5) 170)) (block (set! loop_var_170 (- loop_var_170 1))) (break (if false "loop_var_170" 76))))))) (block (block (let ((loop_var_97 93)) (let ((loop_var_78 -17)) (let ((loop_var_25 -85)) (loop (if (> loop_var_25 (- -85 25)) (block (set! loop_var_25 (- loop_var_25 1)) -42 99 -6) (break "loop_var_25")))))) (let ((c (block true true 99 41))) (block false true true 7))) (block (>= (let ((d -27) (e false) (f false)) -46) (+ 13 -95)) (block (block -85) (let ((loop_var_122 -38)) (loop (if (> loop_var_122 (- -38 122)) (block (set! loop_var_122 (- loop_var_122 1)) false) (break false)))) (let ((i false)) "i") (let ((h -64)) "h") (>= -82 49)) (let ((loop_var_52 -12)) (loop (if (> loop_var_52 (- -12 52)) (block (set! loop_var_52 (- loop_var_52 1)) false) (break false)))) (fun1 (block -11) (let ((e 28)) 73) true)) (let ((loop_var_114 (our_code_starts_here -53 -91 4))) (loop (if (> loop_var_114 (- (our_code_starts_here -53 -91 4) 114)) (block (set! loop_var_114 (- loop_var_114 1)) (* 14 -66) (+ 86 -78)) (break (block "loop_var_114" "loop_var_114" true "loop_var_114"))))) (< (* (- 83 -52) (+ -22 64)) (block -29)) (isnum (let ((e (fun2 26 input -82 -60 55))) (block 34 true "e" false false)))) (let ((h (block -7 (- (- -44 -58) (let ((y false)) -34)))) (c (let ((c (block (> "h" 26) (isbool false) (add1 -96))) (h (let ((e (let ((a 89) (c true) (d false)) false)) (y (let ((loop_var_84 "h")) (loop (if (< loop_var_84 (+ "h" 84)) (block (set! loop_var_84 (+ loop_var_84 1)) true) (break false))))) (a -79)) (> -34 "a"))) (i (block (let ((i true) (z 38) (y input)) "h") -41 (let ((loop_var_196 9)) (loop (if (< loop_var_196 (+ 9 196)) (block (set! loop_var_196 (+ loop_var_196 1)) (set! c 93) (set! h "c") "c") (break 99)))) (+ -2 60)))) (block (let ((b "c")) false)))) (z (if (fun1 (let ((loop_var_195 "h")) (let ((loop_var_155 -84)) (loop (if (< loop_var_155 (+ -84 155)) (block (set! loop_var_155 (+ loop_var_155 1)) -71 "h" 11) (break "h"))))) (* 17 "h") (isbool false)) (* (+ "h" "h") (let ((loop_var_185 "h")) (loop (if (> loop_var_185 (- "h" 185)) (block (set! loop_var_185 (- loop_var_185 1)) (set! h "h") (set! c -35) (set! c -3) "h") (break "h"))))) (* 2 (block "h" -15 true true "h"))))) (let ((c (let ((x (sub1 32))) (let ((h "c") (a "z") (z 77)) -63)))) (let ((loop_var_159 "z")) (let ((loop_var_167 -67)) (loop (if (< loop_var_167 (+ -67 167)) (block (set! loop_var_167 (+ loop_var_167 1)) (set! c -16) (set! h 69) (set! z -80)) (break "loop_var_167"))))))))) (y (<= (- (let ((e (block (block 1 "g") (fun4 "g" "g" false true) (+ 42 47))) (x (sub1 (set! g -59))) (f (block (block -48 true false "x") (+ -21 "g") true "g"))) (block (let ((f false) (d true)) "d") (sub1 "x"))) (set! g (let ((y (let ((loop_var_52 "g")) (loop (if (> loop_var_52 (- "g" 52)) (block (set! loop_var_52 (- loop_var_52 1)) (set! g true) false true) (break true)))))) (set! g "g")))) (- (let ((f (block (block false false) (let ((loop_var_15 -47)) (loop (if (< loop_var_15 (+ -47 15)) (block (set! loop_var_15 (+ loop_var_15 1)) (set! g 91) "g") (break 5)))))) (c (block (let ((loop_var_197 "g")) (loop (if (> loop_var_197 (- "g" 197)) (block (set! loop_var_197 (- loop_var_197 1)) (set! g 23) (set! g "f") (set! f "f") "g") (break -57)))) (let ((loop_var_92 8)) (let ((loop_var_117 76)) (loop (if (< loop_var_117 (+ 76 117)) (block (set! loop_var_117 (+ loop_var_117 1)) (set! g true) (set! g true)) (break true))))) (let ((c true)) "g")))) (sub1 (* -97 "c"))) (block (+ (let ((b false) (h "b") (a -94)) -54) (let ((z true)) 90))))))) "g"))) (set! z (* (let ((loop_var_106 (* "z" "z"))) (loop (if (< loop_var_106 (+ (* "z" "z") 106)) (block (set! loop_var_106 (+ loop_var_106 1)) (* (- -69 "z") (let ((z 12) (x 42)) 28))) (break (let ((y (let ((z "loop_var_106")) "loop_var_106")) (j (main -34))) (if "j" "j" "y")))))) (let ((c (if (let ((loop_var_48 "z")) (let ((loop_var_174 -40)) (loop (if (> loop_var_174 (- -40 174)) (block (set! loop_var_174 (- loop_var_174 1)) false true false) (break false))))) true (isnum (block input true -55 false true)))) (e (> (let ((loop_var_124 90)) (loop (if (< loop_var_124 (+ 90 124)) (block (set! loop_var_124 (+ loop_var_124 1)) (set! c 60) -83) (break "z")))) (+ (block 64) (block "z" 15 "z" -92))))) (set! c (let ((j (- 75 "z"))) "j")))))) (let ((z (block true (+ (if (<= (- (let ((f false) (x 35)) "x") (if -20 -28 29)) (- (block false 32) (+ -36 -5))) (- (let ((loop_var_46 -89)) (loop (if (> loop_var_46 (- -89 46)) (block (set! loop_var_46 (- loop_var_46 1))) (break 65)))) (add1 (let ((y false)) 67))) (block (+ (let ((loop_var_79 1)) (let ((loop_var_30 -61)) (let ((loop_var_194 -96)) (loop (if (> loop_var_194 (- -96 194)) (block (set! loop_var_194 (- loop_var_194 1)) 42 -18) (break -13)))))) (fun3 44 true -60 true true true -41 -7)))) (block (- (block (> -48 -4) (fun1 94 -59 input) (let ((z true) (e true) (y -88)) "y")) -10) (block (let ((y (if 3 false true))) (<= 64 -39)) (sub1 (let ((i 99) (x false) (y -34)) -42))) (let ((y (- (sub1 -83) (let ((loop_var_187 45)) (loop (if (> loop_var_187 (- 45 187)) (block (set! loop_var_187 (- loop_var_187 1)) -24 -99) (break "loop_var_187"))))))) (let ((loop_var_70 "y")) (loop (if (< loop_var_70 (+ "y" 70)) (block (set! loop_var_70 (+ loop_var_70 1)) -71 89 -81) (break 34))))))) (isnum (let ((b (if (block (+ -47 10)) (let ((y (our_code_starts_here 95 21 -45)) (f (let ((y "y") (z true)) input))) (* "y" "y")) (block (* 67 -92) false (let ((x true)) -24) (let ((b 79) (z "b")) 31) (let ((i true) (f 45) (d "i")) "f"))))) (let ((f (let ((loop_var_120 -13)) (let ((loop_var_68 "b")) (loop (if (< loop_var_68 (+ "b" 68)) (block (set! loop_var_68 (+ loop_var_68 1)) (set! b "b") (set! b 44) (set! b 6)) (break 39)))))) (i (set! f (set! b -74)))) (let ((z (- 14 -10))) (block true true))))) (let ((y (block (block (let ((i (if true false false))) (- -7 -57)) (* (- 13 76) 7)) true (< (fun2 -79 (= -63 -28) -26 (block -30) (block false 13)) (our_code_starts_here 24 -1 (let ((h 71)) -37))) (let ((z (if (block -15 true) (< 39 -33) (let ((d 73) (c false)) true))) (b (- (- -41 40) (let ((z -70) (i "z") (d "z")) "z")))) (block 18)) (< (* -92 (let ((h false)) -78)) 15)))) (+ (* (let ((f (let ((x 79)) -39))) "f") (+ (block -37 false "y" 80) (+ -48 81))) (let ((j (let ((y (> 40 -28)) (f (let ((j false) (h true) (g 29)) "h"))) (>= -45 8)))) (- (let ((loop_var_71 77)) (loop (if (< loop_var_71 (+ 77 71)) (block (set! loop_var_71 (+ loop_var_71 1)) (set! y -12) 76) (break 15)))) (- 57 11))))) (= (let ((loop_var_36 (let ((j 15)) "j"))) (loop (if (< loop_var_36 (+ (let ((j 15)) "j") 36)) (block (set! loop_var_36 (+ loop_var_36 1)) (main (block 19 44)) (main (let ((f false) (i true) (x false)) -66))) (break (let ((h (set! loop_var_36 false)) (x (* "loop_var_36" -96)) (e (<= -71 "loop_var_36"))) (isnum "e")))))) (let ((i (< (let ((loop_var_4 -29)) (loop (if (< loop_var_4 (+ -29 4)) (block (set! loop_var_4 (+ loop_var_4 1))) (break "loop_var_4")))) (sub1 44)))) (let ((z (main (let ((b "i") (h "i")) 13))) (c (let ((loop_var_150 "z")) (loop (if (< loop_var_150 (+ "z" 150)) (block (set! loop_var_150 (+ loop_var_150 1))) (break -28))))) (i (= (let ((loop_var_82 "z")) (let ((loop_var_124 59)) (loop (if (< loop_var_124 (+ 59 124)) (block (set! loop_var_124 (+ loop_var_124 1)) (set! z true) (set! z "i") (set! z true) false input) (break false))))) (let ((loop_var_32 "z")) (loop (if (> loop_var_32 (- "z" 32)) (block (set! loop_var_32 (- loop_var_32 1)) (set! z false) (set! c "i")) (break false))))))) true))))) (a 34)) 25))