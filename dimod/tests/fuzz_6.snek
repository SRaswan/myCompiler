(fun (our_code_starts_here energy j i) (if (<= energy 0) 65 (block (set! energy (- energy 1)) (set! i (fun5 (- (let ((d "i")) "j") (set! energy "energy")) (<= (sub1 "j") "j"))))))
(fun (main energy) (if (<= energy 0) false (block (set! energy (- energy 1)) (<= (- (our_code_starts_here (block "energy" "energy" 78) (= false true) (block true true false)) (- (if -78 65 -2) (let ((h "energy") (x "h") (e "energy")) "h"))) (block (block (let ((x true) (y "x") (d true)) 13) -88 20))))))
(fun (fun1 energy e f x b y z c) (if (<= energy 0) false (block (set! energy (- energy 1)) (set! z (set! f (if (let ((i "x") (h "c")) -25) (set! f true) (isnum "x")))))))
(fun (fun2 energy b c g d h z) (if (<= energy 0) true (block (set! energy (- energy 1)) (< (+ (our_code_starts_here -38 (< 36 "z") (let ((y "c") (i false)) "c")) (set! b (* "z" "energy"))) (block (isnum (block -51 "z" "c" "d" "c")) (isnum (set! z false)) (> (sub1 "energy") (set! z "b")) (set! d (> "b" "z")) (set! c (block -46 false 23)))))))
(fun (fun3 energy f a z h e x g) (if (<= energy 0) false (block (set! energy (- energy 1)) (>= (let ((f "f")) (let ((i (< -79 65)) (z (* -95 2)) (f (let ((y false) (j "a")) "z"))) (block -22))) (set! e "f")))))
(fun (fun4 energy f b) (if (<= energy 0) false (block (set! energy (- energy 1)) (if (our_code_starts_here (* (let ((j false)) -57) (let ((h "f")) -68)) (block (>= 4 "b") (block false false false true)) (set! b true)) (let ((e (block (set! f false) (add1 -54))) (a (if (set! e false) (block true) false)) (z (let ((x (set! e true)) (i "e")) (>= "i" 65)))) (if (sub1 "b") false (isbool "z"))) (set! energy (block (block 4 true false "b") (block true "energy" "f" false) (let ((d "energy") (z true)) "z")))))))
(fun (fun5 energy j) (if (<= energy 0) 29 (block (set! energy (- energy 1)) (let ((z (block (let ((x (- "energy" "energy")) (j (>= -83 "energy")) (y (add1 -70))) (* "energy" 16)) (let ((a (block -21 false true)) (f (block "a" true false "a"))) (block -85 false)) (let ((j -28) (b (block true)) (y (> -78 "j"))) (let ((x true) (f 74)) "j")))) (h (- (* (block false 33) (* 89 8)) (+ (let ((f -31) (b true) (c 56)) "j") -28))) (b (let ((j (block (let ((j true) (z 93)) "j") (* "energy" "j") (fun5 "energy" false) (* -28 -28))) (c (= (- 21 -25) -77))) (let ((b (>= 78 "j")) (e (let ((a 77) (b "c") (j -89)) "c"))) (let ((b true) (e true)) true))))) (fun5 (set! z (+ 61 -11)) (fun6 (+ -58 "z")))))))
(fun (fun6 energy) (if (<= energy 0) false (block (set! energy (- energy 1)) (set! energy (let ((y (let ((c (let ((h true)) true))) (set! c "c")))) true)))))
(fun (fun7 energy d a e f) (if (<= energy 0) false (block (set! energy (- energy 1)) (= (add1 (+ (let ((y "f") (g "f")) "d") (block true -5))) (let ((b (+ (block "f" "f" 64 "a") (let ((a "f") (g -20)) 99))) (z (block (< -42 -47) (let ((f "a") (g "f")) true)))) (* (let ((i "z")) "b") (- "a" 57)))))))
(fun (fun8 energy d y b i z e a j) (if (<= energy 0) false (block (set! energy (- energy 1)) (> (let ((x (> 57 (let ((x "y") (y false)) "d"))) (f (fun6 (let ((e "i") (c -88) (z false)) -49)))) "f") (if (let ((h (let ((d false) (g "a")) 77))) (< 48 -92)) (block (add1 77) (sub1 -41) (main "b") (let ((i "i")) "a")) (set! d (* "energy" 57)))))))
(+ (sub1 (block (let ((loop_var_116 (let ((z -10)) 11))) (let ((loop_var_103 (let ((j true) (g true) (a -12)) "a"))) (loop (if (> loop_var_103 (- (let ((j true) (g true) (a -12)) "a") 103)) (block (set! loop_var_103 (- loop_var_103 1))) (break true))))) -40 (block (let ((a (block (isnum (fun7 -94 -24 -82 true true)) (let ((loop_var_47 -25)) (loop (if (< loop_var_47 (+ -25 47)) (block (set! loop_var_47 (+ loop_var_47 1))) (break true)))) (let ((loop_var_101 13)) (loop (if (< loop_var_101 (+ 13 101)) (block (set! loop_var_101 (+ loop_var_101 1)) -87 input 20) (break 26)))))) (c (let ((b (isnum (> 52 "a"))) (g (let ((e "b")) (let ((loop_var_162 -66)) (let ((loop_var_31 34)) (let ((loop_var_92 7)) (loop (if (> loop_var_92 (- 7 92)) (block (set! loop_var_92 (- loop_var_92 1)) (set! a "e") (set! a "b") true) (break "e"))))))))) (block (let ((loop_var_71 -23)) (loop (if (< loop_var_71 (+ -23 71)) (block (set! loop_var_71 (+ loop_var_71 1)) -36) (break 81))))))) (x (>= (let ((loop_var_15 input)) (loop (if (< loop_var_15 (+ input 15)) (block (set! loop_var_15 (+ loop_var_15 1)) 43) (break "loop_var_15")))) (- (- 50 64) (let ((z true) (c 32) (i 82)) "c"))))) (let ((z (let ((loop_var_50 "c")) (loop (if (< loop_var_50 (+ "c" 50)) (block (set! loop_var_50 (+ loop_var_50 1)) "a" 36) (break 7)))))) (let ((g (if "x" 99 59)) (h (let ((loop_var_190 "g")) (loop (if (< loop_var_190 (+ "g" 190)) (block (set! loop_var_190 (+ loop_var_190 1)) (set! a "x") (set! x false) "x" "x" "x") (break "x")))))) (let ((x "g")) "x")))) (isbool (let ((j (block true (isbool false) (if true -28 7) (+ input 35)))) (isbool (let ((x false)) true))))) (+ (- (* (sub1 (let ((c -75)) 1)) (let ((j (- -3 -9))) "j")) (fun5 (block (let ((h -9)) -60)) (block false (sub1 -89) (block false false true -39 -82) (let ((b 93)) false)))) (sub1 (block (block (let ((loop_var_100 68)) (loop (if (> loop_var_100 (- 68 100)) (block (set! loop_var_100 (- loop_var_100 1))) (break false)))) (block true true -93))))))) (block 21 (< (+ (+ (if (let ((y (let ((loop_var_164 -39)) (loop (if (< loop_var_164 (+ -39 164)) (block (set! loop_var_164 (+ loop_var_164 1))) (break "loop_var_164"))))) (z (let ((loop_var_197 "y")) (let ((loop_var_180 -27)) (let ((loop_var_50 -18)) (loop (if (< loop_var_50 (+ -18 50)) (block (set! loop_var_50 (+ loop_var_50 1)) (set! y false) (set! y false) true true) (break false)))))))) (- 66 "y")) (let ((g (let ((loop_var_65 -47)) (loop (if (> loop_var_65 (- -47 65)) (block (set! loop_var_65 (- loop_var_65 1))) (break input))))) (f (<= "g" 11)) (d (block "g" "f" true 49))) (+ "d" "g")) (our_code_starts_here (- 28 -90) (> 49 -9) (>= -74 -45))) (let ((loop_var_36 (let ((a -50) (g false) (z input)) -53))) (loop (if (< loop_var_36 (+ (let ((a -50) (g false) (z input)) -53) 36)) (block (set! loop_var_36 (+ loop_var_36 1))) (break (let ((j -15)) "loop_var_36")))))) (+ (let ((h (let ((c (< -25 -38)) (f (block false -60)) (e (* -84 "f"))) (isnum true))) (i (let ((f (sub1 -45)) (g (set! h "f")) (i (set! g 42))) (isnum false)))) (block "i" (< 28 input) (>= 49 65) (+ 66 -24))) (let ((d (block (block 35 -67 53 -22) (block false) (block true false true false 72))) (h (block (= 24 -54) (let ((loop_var_139 -42)) (loop (if (> loop_var_139 (- -42 139)) (block (set! loop_var_139 (- loop_var_139 1)) (set! d true) (set! d false) false false) (break true)))) (main "d") (let ((f "d")) "f"))) (i (<= (let ((b true) (g true) (f "h")) -62) (fun5 "h" true)))) "h"))) (+ (block 0 (block (let ((a (block -74 false true)) (h (block "a" true -57 3)) (x (> "h" "h"))) (= true false)) (+ (let ((x false)) 79) (block true 74 57)) (fun1 (let ((loop_var_89 -66)) (let ((loop_var_162 -39)) (loop (if (> loop_var_162 (- -39 162)) (block (set! loop_var_162 (- loop_var_162 1)) -93 29) (break "loop_var_162"))))) (let ((h -55) (z 1)) true) (<= -63 78) (> 72 -67) false (let ((x true) (y "x") (h -47)) "h") (* -44 -62) (let ((c -3)) false)) (let ((loop_var_48 -24)) (let ((loop_var_22 21)) (loop (if (< loop_var_22 (+ 21 22)) (block (set! loop_var_22 (+ loop_var_22 1))) (break false)))))) 47 (<= (let ((x (let ((y -72) (e "y") (c false)) 73))) "x") (let ((c (let ((b true) (g -53)) "g"))) (let ((loop_var_76 44)) (let ((loop_var_188 -45)) (loop (if (< loop_var_188 (+ -45 188)) (block (set! loop_var_188 (+ loop_var_188 1)) "c" -42 "c") (break "c"))))))) 92) (let ((c (< (block (let ((j -5) (e "j") (h false)) 93)) (sub1 (+ 89 -29))))) (add1 (block (- -80 93)))))) (let ((loop_var_44 (* -93 83))) (let ((loop_var_63 (+ -86 -39))) (let ((loop_var_46 (let ((x false) (i -63)) 14))) (loop (if (< loop_var_46 (+ (let ((x false) (i -63)) 14) 46)) (block (set! loop_var_46 (+ loop_var_46 1)) (add1 (let ((j (if (if false -70 -40) (let ((j 26) (z true)) 39) (* -20 -83))) (b (block (< "j" 34) (block input true true "j" "j")))) (let ((h (fun1 "b" false false true true "b" 44 false)) (c (* input 77))) (block false true true "c" -18)))) (- (block (- (fun5 -57 true) (our_code_starts_here 77 false true)) (+ (block -82 -81) (- 81 -69))) (our_code_starts_here (let ((j true) (i 40) (b (let ((f "i") (i -91) (d -9)) -28))) (+ input -68)) (let ((x (< -87 input)) (y (> -22 -50)) (e (let ((e -62)) true))) (set! e "e")) (block (block -60 true false true) (= true true)))) (add1 (let ((g (fun5 (let ((a input) (h -87)) 21) (isnum true))) (z (set! g (set! g false)))) (- "g" (block input))))) (break (fun5 (+ 36 (let ((z (block true))) (our_code_starts_here 18 false "z"))) (block (let ((i (let ((a true) (z true)) "a")) (x (let ((x "loop_var_46") (e false)) 24))) (let ((y "loop_var_46")) "i")) (let ((a true) (c "loop_var_46")) (- -7 4)) (if (let ((z false)) true) (block 90 "loop_var_46" 22) (sub1 input)) false))))))))))