(fun (our_code_starts_here energy a) (if (<= energy 0) 88 (block (set! energy (- energy 1)) (* (sub1 5) (fun5 (set! energy (let ((b true)) "a")) (block "a" (- 97 "a") (isnum false) (add1 "a") (let ((f -70) (g false) (i true)) "i")))))))
(fun (main energy b) (if (<= energy 0) false (block (set! energy (- energy 1)) (set! energy (block (isbool (if true true true)))))))
(fun (fun1 energy d e g a y h j) (if (<= energy 0) false (block (set! energy (- energy 1)) (isnum (block (set! g (>= "e" 53)) (>= (+ 76 -17) (let ((z -71)) "e")))))))
(fun (fun2 energy) (if (<= energy 0) 39 (block (set! energy (- energy 1)) (add1 (fun4 (set! energy (let ((f true) (i 74)) "energy")) (= 86 (block "energy" "energy" true 52 -11)) (let ((z (fun3 51 false true 66 true false "energy" -31))) (+ 20 "z")) (let ((j (fun2 -34)) (a -25)) true) (let ((a (main "energy" 41)) (c (if true "a" false))) (if "a" "energy" 48)) (block (<= "energy" -57) (let ((f "energy")) true) (+ "energy" "energy") (+ "energy" 61)))))))
(fun (fun3 energy i c e b z j h) (if (<= energy 0) true (block (set! energy (- energy 1)) (block (set! e (let ((h (isnum false)) (b (add1 "i"))) (set! energy -1))) (let ((c (set! i (block "energy" -8 "h"))) (z (< (let ((g "i") (a "b") (h false)) 24) (set! c 38))) (x (fun2 (block "c" true true "z" 56)))) (> (+ "c" "c") (let ((y "c") (i false) (h false)) -37))) (+ -85 (let ((f (let ((j true) (c 1) (a "h")) true)) (d (let ((b true) (d -100) (h 31)) -54))) (block 13 "h" "e" -28))) (block (let ((x (if -34 false false)) (y (isnum false)) (b (sub1 "b"))) (- "b" "b"))) (>= (add1 (let ((j "c") (c false)) -50)) (let ((c (add1 92))) (let ((d false) (h true) (c true)) -18)))))))
(fun (fun4 energy g j b e y) (if (<= energy 0) -56 (block (set! energy (- energy 1)) (let ((h (let ((e (set! y (set! y "b"))) (y (set! b (set! g false))) (j (let ((g (< 29 "e")) (i 16) (j (set! g false))) (+ "y" "g")))) (>= (let ((x true) (d "j")) -2) (* 19 "energy")))) (y (> (block (block "energy" "y") (fun9 69 "h" 5 "j" "e" "g" "y") (let ((b false) (c "b") (e -79)) -18) (- 71 0)) (let ((a (let ((f "b")) false))) (add1 "energy")))) (g (add1 (set! y (block "y" "h" "j" -66))))) (let ((c (>= (if "y" 29 -38) "g")) (e "g")) "e")))))
(fun (fun5 energy x) (if (<= energy 0) 28 (block (set! energy (- energy 1)) "x")))
(fun (fun6 energy) (if (<= energy 0) 42 (block (set! energy (- energy 1)) (sub1 (+ (block (* 100 68) false (let ((b "energy") (y "b")) "b")) (set! energy -29))))))
(fun (fun7 energy e z j g b) (if (<= energy 0) -35 (block (set! energy (- energy 1)) (- (- (let ((y (= "j" true)) (z (block true -68)) (e (set! j false))) (+ "b" "e")) (set! e (add1 "b"))) (- (+ "energy" (- -31 "b")) (if (sub1 "b") "energy" (* "z" 50)))))))
(fun (fun8 energy g z i e f) (if (<= energy 0) true (block (set! energy (- energy 1)) (block (let ((x (block (let ((h -80) (b true) (a 100)) -36) true (set! i false))) (z (- (let ((f -75)) 93) (sub1 "i")))) (set! f (fun8 -34 false -92 "x" false "e")))))))
(fun (fun9 energy f a e y g z) (if (<= energy 0) 3 (block (set! energy (- energy 1)) (let ((j (set! y (<= (block "e") (- 62 "e"))))) "f"))))
(let ((i (block (let ((j (block (= (block (let ((h (if 2 true true))) (let ((j false) (y 72) (d "y")) "h"))) (<= (sub1 (* -32 -69)) (* (let ((e true) (b -86) (f "e")) "b") -79))) (let ((loop_var_55 (block -91 false 41))) (let ((loop_var_139 -58)) (loop (if (< loop_var_139 (+ -58 139)) (block (set! loop_var_139 (+ loop_var_139 1)) (let ((f (>= 84 -74)) (y (let ((h true)) "h")) (b (block true true 63 "f" 53))) (< 63 "b")) (block (block false -4 true -27 false)) (>= (let ((a false)) 72) (add1 87))) (break (fun8 (+ -82 -11) false (set! loop_var_139 "loop_var_139") (= true true) (fun3 "loop_var_139" false input -19 true false 68 -73) (if -18 false false)))))))))) (let ((g (block (let ((e (block (>= -42 -84))) (f (let ((loop_var_3 -89)) (let ((loop_var_126 50)) (loop (if (> loop_var_126 (- 50 126)) (block (set! loop_var_126 (- loop_var_126 1)) (set! j "e") (set! e input) (set! e true) "j") (break true))))))) (block (let ((b 22) (j "f") (c -54)) false) (let ((a 83) (x "a") (g -30)) 79) (let ((b false) (e -97)) true))))) (h (+ (let ((z (block (let ((c false) (e -61) (j false)) -63)))) (let ((y (block "g" "z")) (h (add1 -53))) (- -35 2))) (block 56 (let ((loop_var_60 -6)) (let ((loop_var_144 -44)) (let ((loop_var_117 -93)) (loop (if (> loop_var_117 (- -93 117)) (block (set! loop_var_117 (- loop_var_117 1)) -57) (break -35)))))))))) (let ((c (let ((i (let ((loop_var_156 88)) (loop (if (> loop_var_156 (- 88 156)) (block (set! loop_var_156 (- loop_var_156 1))) (break "g")))))) (- (let ((loop_var_152 "h")) (loop (if (> loop_var_152 (- "h" 152)) (block (set! loop_var_152 (- loop_var_152 1)) (set! g "h") (set! h "h") -41 "h") (break "loop_var_152")))) (set! h 26)))) (g (let ((d (- (* "c" "h") (let ((g 59)) "g"))) (x (let ((h (let ((loop_var_104 "d")) (loop (if (> loop_var_104 (- "d" 104)) (block (set! loop_var_104 (- loop_var_104 1)) (set! d "g") (set! d "g") (set! h "j")) (break "g"))))) (z (set! h true)) (j (block "d" "h" "h" true "g"))) (our_code_starts_here 39 false))) (a (let ((e (set! j "h")) (x (block "e" "h" true))) (block true true "j")))) (block (add1 "d") (* -74 -64))))) (isbool (isbool (<= "h" 30)))))) (> (let ((loop_var_130 (add1 20))) (loop (if (< loop_var_130 (+ (add1 20) 130)) (block (set! loop_var_130 (+ loop_var_130 1)) (fun2 (let ((d (block -80 22 false 27)) (c (isbool false))) (* "d" "d"))) (let ((i input)) (block (block 87 -73 -38 "i" -68) (let ((d "i") (e "d") (i false)) 60)))) (break "loop_var_130")))) (+ (let ((d (block (let ((loop_var_107 -11)) (loop (if (< loop_var_107 (+ -11 107)) (block (set! loop_var_107 (+ loop_var_107 1)) -30 -34) (break "loop_var_107")))) (main (add1 -76) (* -25 48)) (let ((h (let ((g false) (i false) (c -85)) "c")) (x (<= "h" 2))) (>= -21 "h")) (let ((h (let ((loop_var_33 52)) (let ((loop_var_139 41)) (loop (if (< loop_var_139 (+ 41 139)) (block (set! loop_var_139 (+ loop_var_139 1)) 16 7 75) (break 35)))))) (j (let ((f 20) (c false)) true)) (c (block -43 -58 "h" "h"))) (<= 0 "c")) (< (let ((y -73) (h "y") (a "h")) 46) (let ((loop_var_153 -53)) (let ((loop_var_49 68)) (loop (if (> loop_var_49 (- 68 49)) (block (set! loop_var_49 (- loop_var_49 1)) 76 79) (break "loop_var_49")))))))) (e (block (>= (fun9 34 false -49 true true 15 17) (let ((a "d") (f -88) (y "d")) "f")) (let ((g (let ((h true) (g 19) (x true)) "x")) (a (let ((b true)) true)) (c (set! g "d"))) (>= -53 -7)) (add1 (let ((g "d")) 92)) (fun2 (let ((g 37) (b -90) (a "b")) "a"))))) (let ((loop_var_32 (+ "e" -99))) (loop (if (< loop_var_32 (+ (+ "e" -99) 32)) (block (set! loop_var_32 (+ loop_var_32 1)) (set! d (+ -65 97)) (set! d (block "e"))) (break (sub1 "e")))))) (let ((z (let ((j (if (block false) (let ((e true) (a 59) (j true)) true) (let ((d 48)) false))) (h (block (block -13 true)))) 92))) (+ (let ((loop_var_198 "z")) (loop (if (< loop_var_198 (+ "z" 198)) (block (set! loop_var_198 (+ loop_var_198 1)) -56 "z" "z") (break "loop_var_198")))) (+ (* 28 "z") (let ((b "z") (g true)) 22)))))) (- 5 (+ (* (+ (- (block 30 -94 false false -18) (if -7 95 8)) (let ((c (> 85 0))) (let ((loop_var_145 -61)) (loop (if (> loop_var_145 (- -61 145)) (block (set! loop_var_145 (- loop_var_145 1)) -49) (break 31)))))) -48) (* (+ (if (let ((loop_var_96 -3)) (loop (if (< loop_var_96 (+ -3 96)) (block (set! loop_var_96 (+ loop_var_96 1)) false true true) (break false)))) (+ -27 -78) (* -69 71)) (- (let ((loop_var_56 35)) (loop (if (< loop_var_56 (+ 35 56)) (block (set! loop_var_56 (+ loop_var_56 1)) 71 70) (break "loop_var_56")))) (our_code_starts_here -40 false))) (let ((a (let ((loop_var_153 -44)) (loop (if (> loop_var_153 (- -44 153)) (block (set! loop_var_153 (- loop_var_153 1))) (break "loop_var_153"))))) (x (block (if "a" "a" 40) (block "a" "a") (< "a" "a") (if "a" true false) (let ((i true) (d true) (h "a")) 66)))) (+ "a" (+ "x" "x"))))))))) (isbool (let ((h (block (- (+ -14 (- (- -64 72) (let ((loop_var_33 13)) (let ((loop_var_76 "i")) (loop (if (> loop_var_76 (- "i" 76)) (block (set! loop_var_76 (- loop_var_76 1)) "i" 73 38) (break "loop_var_76"))))))) (let ((e (set! i -96)) (z (set! e (add1 "i")))) "i")) (let ((i true) (e (let ((g (our_code_starts_here (let ((y 79) (x true)) "i") (let ((x "i") (f "i")) true))) (a (>= (let ((d 40) (f true) (x "g")) "i") (let ((j "i")) -54)))) (block (block "g" true "g") (+ -84 12)))) (z (set! i 28))) (>= (block (let ((y "i")) "e") (block "e" false false "i") (block false -19) (- "e" -70)) (block -30 (block "i") (block 22) (block "e" "e" 68) "z")))))) (set! i (let ((c (isnum (block (block "h" 29) (let ((e "h")) -91) (< 97 -40) (fun2 "i") (let ((h true)) "h")))) (y (- (sub1 (- -26 "i")) (let ((z (set! i 83)) (x (- "i" "i")) (h (let ((i "x") (x 71) (a "z")) -18))) (- "h" "x"))))) (isbool "i"))))))