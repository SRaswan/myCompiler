(fun (our_code_starts_here energy h e z a g f b j) (if (<= energy 0) 21 (block (set! energy (- energy 1)) (add1 -2))))
(fun (main energy a g) (if (<= energy 0) false (block (set! energy (- energy 1)) (> (if -61 (- (- -56 69) (add1 -72)) (let ((i (block "g")) (a (let ((y true) (c "i")) -30))) (block "i" -10))) (* (block (let ((f false)) false) (>= 33 "g") (block -91 23 false true) (block false false false false "a") (* "g" "a")) (block (- "energy" "g") (fun4 -95 false false true true 31 false 33 "g") (block -36 false 75)))))))
(fun (fun1 energy f g b a i d) (if (<= energy 0) -48 (block (set! energy (- energy 1)) (let ((c (* (sub1 (block "g" "i" "energy" "energy" -39)) (* (let ((h "i") (j -39) (c "a")) "i") (* 82 -71)))) (i (- "f" (+ -91 (set! g -4)))) (j (let ((b (add1 (let ((x "c") (f "g") (b "a")) 56))) (x true)) (fun7 (set! b -28))))) (fun1 (let ((x (let ((e "energy") (g -78) (b false)) "g")) (h (fun4 "f" false "x" false true "c" "j" "i" "i")) (f (* 39 68))) (fun7 "h")) false (let ((c (block false "energy" false))) (sub1 -39)) (= (* 72 -6) (let ((y -35) (f 92) (d 52)) "y")) (block "d" (set! i -38) "g" (let ((b true) (i -39) (c "g")) 32) (sub1 76)) (let ((y (<= 59 "energy"))) (let ((b "c") (a 44)) "y")) (= (* "i" "f") (+ -39 "b")))))))
(fun (fun2 energy z h a) (if (<= energy 0) false (block (set! energy (- energy 1)) (<= (* (sub1 (add1 "h")) (fun7 (block "a" false "a" 97))) (let ((c (isbool (>= "z" -64))) (a "z") (g (+ (block "c" -51) (set! c 43)))) (+ "energy" (add1 "z")))))))
(fun (fun3 energy z i h) (if (<= energy 0) -63 (block (set! energy (- energy 1)) (let ((a (let ((z (isnum (block false 36 true))) (e (block (let ((i "energy") (f "h") (a "i")) "h") (let ((c "energy") (e true) (d "e")) false) (add1 -28) (isnum true)))) false))) (set! a (- (block -100 false -7 "h" -15) (if "z" 19 -40)))))))
(fun (fun4 energy a g x i f b y j) (if (<= energy 0) -71 (block (set! energy (- energy 1)) (let ((y (let ((i (isnum (let ((z -69) (c "b")) "y"))) (x (set! y (>= "a" -85)))) (let ((y (let ((a "energy") (e "y") (d false)) true))) (let ((i false) (c 60) (x "x")) true)))) (a (set! j (>= (* "a" "a") (our_code_starts_here "energy" "g" "f" -1 "x" -61 false "energy" "energy"))))) (let ((g (let ((h (let ((f 7)) "j")) (j (- "energy" "j")) (f (let ((e "j") (y -65) (d "a")) -67))) (- -14 10))) (d (block (isnum false) (let ((h "a")) -1) (> -73 -93) (sub1 "j") (+ -29 39)))) (block (let ((b 2)) false) (* 89 "j") (let ((a true)) "j")))))))
(fun (fun5 energy h y f e x d) (if (<= energy 0) -48 (block (set! energy (- energy 1)) (- (block (let ((h (fun6 "h" "e" false "f")) (z (block true true false)) (b (isnum "h"))) (set! energy "h")) (* (* 71 -24) (if -42 "h" "h")) (let ((d (let ((c "f")) "d")) (b (let ((g "d") (b "d")) "f")) (g (> 43 "energy"))) (let ((z "d") (a true)) 18)) (let ((e (* "x" "y")) (d (fun5 -29 66 -78 84 -100 "d" "x")) (y (* -73 "h"))) "f")) (set! x (- 56 (let ((y false) (f true)) "x")))))))
(fun (fun6 energy j h z) (if (<= energy 0) false (block (set! energy (- energy 1)) (isnum (block (let ((z (>= "h" -20)) (d (< 22 -91))) (isbool "z")))))))
(fun (fun7 energy) (if (<= energy 0) 14 (block (set! energy (- energy 1)) (let ((b (set! energy (< (set! energy "energy") (sub1 -40)))) (x (add1 (add1 (+ "energy" "energy"))))) (let ((b (* (let ((h "energy") (y -94) (b 87)) -6) (fun7 6))) (h (block (fun4 "x" true "b" true false "x" "b" "b" -74) (block -21 45) (let ((i "b") (a true)) true)))) (* (add1 -61) "energy"))))))
(- (< (+ (add1 (let ((j (let ((f (main (let ((loop_var_142 59)) (loop (if (< loop_var_142 (+ 59 142)) (block (set! loop_var_142 (+ loop_var_142 1))) (break -7)))) (- 89 47) (block false true -5))) (e (isbool (let ((b -95) (c -86) (y true)) false))) (a (add1 (add1 70)))) (let ((b (isnum false)) (z (* input "a")) (c (< "a" "a"))) (block "b" -54 -8)))) (a (set! j (let ((loop_var_143 "j")) (loop (if (< loop_var_143 (+ "j" 143)) (block (set! loop_var_143 (+ loop_var_143 1)) (set! j false) (set! j false) (set! j false) false false true) (break true)))))) (f (let ((loop_var_174 (* 46 43))) (loop (if (< loop_var_174 (+ (* 46 43) 174)) (block (set! loop_var_174 (+ loop_var_174 1)) (set! a 60) (sub1 81) (+ "j" 95)) (break (* -98 input))))))) (set! a 52))) (block 95 (if true (isnum (block (let ((loop_var_121 -34)) (loop (if (< loop_var_121 (+ -34 121)) (block (set! loop_var_121 (+ loop_var_121 1))) (break -96)))) (let ((c -31) (g true)) "g") (block 52) (block false 11 44) (let ((loop_var_186 71)) (loop (if (< loop_var_186 (+ 71 186)) (block (set! loop_var_186 (+ loop_var_186 1)) false) (break false)))))) (let ((h (- (let ((a false) (b "a") (i input)) 24) (* 44 input))) (g (> (fun1 "h" false "h" true 38 true true) (sub1 "h")))) (let ((loop_var_7 -74)) (loop (if (< loop_var_7 (+ -74 7)) (block (set! loop_var_7 (+ loop_var_7 1)) (set! h "g") false "g") (break "g")))))) (main (let ((loop_var_16 (* -28 -46))) (loop (if (> loop_var_16 (- (* -28 -46) 16)) (block (set! loop_var_16 (- loop_var_16 1)) (fun4 -32 true true true false 24 true -87 -46) (block 47 -67 -20) 49) (break (set! loop_var_16 97))))) -2 (let ((loop_var_128 (+ 40 -10))) (loop (if (< loop_var_128 (+ (+ 40 -10) 128)) (block (set! loop_var_128 (+ loop_var_128 1)) (let ((h true) (b -42) (i "h")) -47) (fun4 41 false false false false -51 false input 21) (+ -25 -8)) (break (sub1 "loop_var_128")))))) 34)) (let ((y (let ((f (isbool (let ((a (let ((g (let ((c true) (e false) (a -33)) "e")) (x (<= -56 41)) (a (* -92 74))) (< -31 -64)))) (block (<= -95 -10) (* -53 -58) (let ((loop_var_149 40)) (loop (if (< loop_var_149 (+ 40 149)) (block (set! loop_var_149 (+ loop_var_149 1)) (set! a 31) (set! a 41)) (break -62)))) (isbool "a") (block false 67 "a"))))) (i (block (let ((loop_var_128 (sub1 39))) (let ((loop_var_29 (+ -54 -59))) (loop (if (< loop_var_29 (+ (+ -54 -59) 29)) (block (set! loop_var_29 (+ loop_var_29 1)) (set! f (our_code_starts_here 25 false true 47 "f" 65 "f" -84 8)) (set! f (let ((a true)) 61)) (set! f (let ((z "f") (f 58) (g "z")) 19)) (let ((b "f") (f input)) "f")) (break (block "f" "loop_var_29" "f" "loop_var_29" "loop_var_29")))))) (let ((i (isnum (let ((loop_var_61 46)) (let ((loop_var_3 -71)) (loop (if (< loop_var_3 (+ -71 3)) (block (set! loop_var_3 (+ loop_var_3 1)) (set! f false) (set! f true)) (break "f"))))))) (g (set! f (let ((e true) (d false) (z 26)) true))) (y (* (- -89 -4) (let ((loop_var_48 83)) (loop (if (< loop_var_48 (+ 83 48)) (block (set! loop_var_48 (+ loop_var_48 1))) (break "loop_var_48"))))))) (block false (let ((j 50)) -4) (block 84 true true input true))) (fun6 (let ((b (isnum "f")) (i (let ((c true) (i "b")) true))) (block 6)) 27 (let ((f (let ((e false) (y 67) (f false)) true)) (a (= -44 82))) (let ((i -95) (f "a")) "f")) (add1 (let ((x "f") (b 67)) 72))))) (h (isbool (>= (add1 (- -37 -21)) (let ((a (if 76 4 30)) (h (let ((j input)) "a")) (g (main 94 "a" "a"))) (let ((d false) (h "a")) 93)))))) (let ((loop_var_77 (* -67 input))) (loop (if (> loop_var_77 (- (* -67 input) 77)) (block (set! loop_var_77 (- loop_var_77 1)) (* -80 (set! f 55))) (break (fun1 (set! f "loop_var_77") (let ((y "i")) false) (block -53 "f" -56) "h" (+ "loop_var_77" -14) (isnum "f") (set! i "h")))))))) (i (let ((loop_var_139 (block 32 83 true "y"))) (loop (if (< loop_var_139 (+ (block 32 83 true "y") 139)) (block (set! loop_var_139 (+ loop_var_139 1)) (set! y (* (- (block "y" "y") (block "y" 59 false "y")) (* (* "y" "y") (sub1 input)))) (set! y (* (* (let ((x false)) -57) (+ -14 80)) (let ((x (block true false true)) (d "y") (e (set! d input))) (let ((a -82) (c false) (h true)) "e")))) (set! y (set! y (+ (fun7 50) (let ((a "y")) -63))))) (break (block true (let ((a (<= "loop_var_139" "loop_var_139")) (j (fun6 "loop_var_139" "y" "a" "y"))) (set! a "y"))))))))) (block (let ((a (* (let ((c (block false false "i")) (f (block 90 false))) (block "f" "f" 80)) (+ (block 9 35) (let ((h true) (f false) (x true)) input)))) (h (let ((loop_var_96 (* 97 -82))) (loop (if (> loop_var_96 (- (* 97 -82) 96)) (block (set! loop_var_96 (- loop_var_96 1))) (break (<= "loop_var_96" "a")))))) (x (let ((loop_var_91 (set! h 77))) (let ((loop_var_43 (- -91 80))) (let ((loop_var_132 (block -37 -41))) (loop (if (< loop_var_132 (+ (block -37 -41) 132)) (block (set! loop_var_132 (+ loop_var_132 1)) (set! i (if "h" -30 "i")) (set! a (let ((c "a")) -47))) (break (set! i 30))))))))) (let ((loop_var_57 "i")) (let ((loop_var_157 (if 9 -44 "x"))) (let ((loop_var_134 (- "i" 35))) (loop (if (> loop_var_134 (- (- "i" 35) 134)) (block (set! loop_var_134 (- loop_var_134 1)) (set! h (* "i" "x")) (set! a (- "x" "a"))) (break (let ((e true) (d 25)) 8)))))))) (let ((d (set! y (block (< -6 "y") (let ((loop_var_143 77)) (let ((loop_var_142 "i")) (loop (if (< loop_var_142 (+ "i" 142)) (block (set! loop_var_142 (+ loop_var_142 1)) -35) (break 38))))) (let ((loop_var_23 -7)) (loop (if (> loop_var_23 (- -7 23)) (block (set! loop_var_23 (- loop_var_23 1)) false false) (break false)))) (sub1 "i")))) (g (block (let ((y (- "d" "i")) (f (block true "d" "y" "y" -31))) (let ((y false)) -88)) (fun5 (+ -45 34) (block false false true -17) -89 (let ((f false) (z "f") (y "d")) "y") (sub1 "d") (main "i" "d" -13) (block -96 -54 -29)) (let ((j (+ "d" "y")) (z (let ((loop_var_43 22)) (let ((loop_var_148 "i")) (let ((loop_var_151 "d")) (loop (if (> loop_var_151 (- "d" 151)) (block (set! loop_var_151 (- loop_var_151 1)) (set! d "d") (set! d "y") (set! d 99)) (break input))))))) (g (let ((f 56) (d "z") (y 5)) true))) (let ((x input) (i "g") (j true)) "d")))) (i (isnum (let ((loop_var_50 "g")) (loop (if (> loop_var_50 (- "g" 50)) (block (set! loop_var_50 (- loop_var_50 1))) (break true))))))) (+ (+ (set! g "d") (let ((y "i")) "g")) (let ((g (block "d" "i" "y")) (b (* 57 -59))) (let ((c input)) "c"))))))) (add1 (+ (if (- (let ((loop_var_91 (* -87 65))) (loop (if (< loop_var_91 (+ (* -87 65) 91)) (block (set! loop_var_91 (+ loop_var_91 1)) 79 (fun7 -46)) (break (let ((d 0) (j false) (a true)) "loop_var_91"))))) (block (+ (add1 72) (fun3 -18 57 true true)) 22 (block true (block false 11 true 76) (block false) (block -61 93)) (block (block 10 -92 33)) (let ((loop_var_118 71)) (let ((loop_var_19 14)) (let ((loop_var_9 -54)) (loop (if (< loop_var_9 (+ -54 9)) (block (set! loop_var_9 (+ loop_var_9 1)) 5) (break -5)))))))) (fun1 (fun4 (* (fun4 -49 true true false false 95 false 96 59) (block false 55 64 -38)) (let ((j (isbool false)) (f (let ((h "j")) "j")) (e (block -60 true 28 -97))) (>= "e" 61)) false (let ((z (let ((loop_var_101 63)) (let ((loop_var_155 -47)) (let ((loop_var_37 -32)) (loop (if (> loop_var_37 (- -32 37)) (block (set! loop_var_37 (- loop_var_37 1))) (break true)))))))) (block "z" true)) (block true (add1 97) (let ((i false) (b "i")) "i") (let ((h false)) "h") (block -8 -13 true input false)) (block (< -28 -87) (if true true false) (let ((g true) (a false) (d 68)) "g") (let ((x input) (z "x") (y false)) "y") (let ((f 11) (y false) (x -44)) -93)) (> (block 21) (if 53 86 -71)) (- (let ((b true) (z "b")) -26) (let ((c input) (b -93) (g false)) "c")) (if -78 (block -96 -61 -55) (block false true true 41))) (isnum (isbool (let ((a true) (z false) (h 84)) true))) (let ((f (+ (fun3 -37 33 false true) (block 48))) (d (isnum (>= "f" 64))) (e (> (block true "f" -32 -77) (let ((loop_var_27 "f")) (loop (if (< loop_var_27 (+ "f" 27)) (block (set! loop_var_27 (+ loop_var_27 1)) (set! f "f") (set! f 27) "f" 0 40) (break -50))))))) 42) (if (fun1 (- -91 44) (let ((loop_var_137 -4)) (loop (if (> loop_var_137 (- -4 137)) (block (set! loop_var_137 (- loop_var_137 1)) true false false) (break true)))) (block 29) (isbool false) 29 (< 69 29) (let ((j true) (g "j")) true)) (>= (block false -63) (let ((loop_var_45 73)) (loop (if (> loop_var_45 (- 73 45)) (block (set! loop_var_45 (- loop_var_45 1))) (break 44))))) (let ((loop_var_109 76)) (loop (if (< loop_var_109 (+ 76 109)) (block (set! loop_var_109 (+ loop_var_109 1))) (break true))))) (let ((d (< (sub1 -99) (+ -85 44))) (c (* -13 (let ((y false)) 71)))) (block (- "c" input))) (= (let ((loop_var_198 -35)) (loop (if (> loop_var_198 (- -35 198)) (block (set! loop_var_198 (- loop_var_198 1))) (break "loop_var_198")))) (- (+ -79 42) (* -98 -19))) false) (add1 (let ((b (let ((loop_var_152 -22)) (loop (if (> loop_var_152 (- -22 152)) (block (set! loop_var_152 (- loop_var_152 1)) false true) (break true))))) (x (block (let ((d "b")) 36) (let ((loop_var_83 58)) (loop (if (< loop_var_83 (+ 58 83)) (block (set! loop_var_83 (+ loop_var_83 1)) 37 5) (break 6)))) (+ -23 22) (set! b "b")))) (let ((c (* -9 -77))) -99)))) (let ((loop_var_198 (fun4 -68 false false true true -49 true -91 68))) (let ((loop_var_38 (let ((h false)) input))) (let ((loop_var_128 (let ((g -14)) 12))) (loop (if (> loop_var_128 (- (let ((g -14)) 12) 128)) (block (set! loop_var_128 (- loop_var_128 1))) (break (sub1 (add1 (sub1 "loop_var_128"))))))))))))