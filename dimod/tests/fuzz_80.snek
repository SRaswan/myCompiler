(fun (our_code_starts_here energy) (if (<= energy 0) 77 (block (set! energy (- energy 1)) (- (if (let ((x (block true)) (h (isbool true)) (d (block "x" 61))) (< "d" "energy")) (block (block "energy" "energy") (>= "energy" -51) (let ((h true) (y false) (e 81)) "e")) (sub1 (let ((j "energy") (z false) (d -70)) -49))) (sub1 (+ (- "energy" -49) (let ((y -8)) -30)))))))
(fun (main energy h b e f z c a) (if (<= energy 0) true (block (set! energy (- energy 1)) (let ((h (- (let ((d (let ((g "a") (c "z") (a "a")) "a")) (i "h")) (- 24 -56)) (+ (set! e "energy") -52)))) (let ((y (block (let ((y -35)) 11) (block true -4 true false -57) (block 89 "z" "b") (let ((d "b") (j "d") (e "j")) "d"))) (h (let ((x true) (i (let ((j "x") (h "c") (c -65)) 56))) "y")) (d (let ((d (+ 12 "h")) (j (set! b true)) (e (isnum "j"))) (let ((j "b") (y "energy") (g "j")) -72)))) (> (sub1 "f") (let ((x false)) -89)))))))
(fun (fun1 energy) (if (<= energy 0) 1 (block (set! energy (- energy 1)) (* (our_code_starts_here (set! energy "energy")) (let ((a (set! energy (let ((h true) (f true) (x "energy")) false)))) (- "energy" -92))))))
(fun (fun2 energy c e z) (if (<= energy 0) true (block (set! energy (- energy 1)) (> (* (let ((e (let ((f "z")) true)) (i (fun3 "energy" true "z" -46)) (h (block 100))) (set! energy -24)) (let ((i (let ((c -64) (g true) (z "c")) 36)) (b (let ((d "z")) "c"))) (block "z" "energy"))) (* (set! e (sub1 "energy")) (if (let ((e -52) (g "energy")) "e") (our_code_starts_here -93) (if false "energy" "energy")))))))
(fun (fun3 energy z b g) (if (<= energy 0) false (block (set! energy (- energy 1)) (= (block (block (+ -76 "z")) (= (set! z "g") (> 49 "energy")) (* (block true "b" "b" "z") (let ((a 49) (b "g")) 30))) (+ (block (* "energy" -44)) (+ (let ((c false) (f 39)) "z") (let ((x "energy") (y "b") (d "b")) "z")))))))
(fun (fun4 energy b) (if (<= energy 0) false (block (set! energy (- energy 1)) (>= (* (our_code_starts_here (block false "b")) (let ((j -29) (i (> 31 91)) (z (block -15 "i" -49 true))) (- -2 -6))) (+ (let ((b (add1 -67)) (i (if "b" true false)) (x (block "i" false "b" 100))) (set! energy 91)) (- (block true false 42) (add1 "energy")))))))
(fun (fun5 energy z i d c) (if (<= energy 0) true (block (set! energy (- energy 1)) (isbool (set! energy (set! z (isnum "d")))))))
(fun (fun6 energy y h i) (if (<= energy 0) true (block (set! energy (- energy 1)) (isbool (let ((h (sub1 (block "energy")))) (let ((h (let ((g false) (c 20)) "g")) (d "h")) (let ((y false)) false)))))))
(fun (fun7 energy i j z c) (if (<= energy 0) false (block (set! energy (- energy 1)) (let ((x (let ((f (block (let ((f 66)) true) (sub1 35) (= false true) (let ((c "i")) "c"))) (a (set! i (block false 66 "f" "f" "j"))) (g (block (isnum "f")))) true)) (h (= (block (* "i" "z") (let ((c "c") (d -39) (i "c")) "energy")) (if (>= 44 "z") (let ((b "x") (g "energy") (d 0)) "d") (sub1 -11)))) (i (let ((f (block (block -67 "i" 75) (isbool true) (let ((i true) (f "x")) "j") 88)) (e (set! j (let ((x "z") (e "j") (y "z")) "x"))) (y (set! z (= "z" "z")))) (- (let ((a true) (j "i")) "i") (let ((f true) (z -13)) 37))))) (set! x (let ((b (fun1 "i")) (d (block 11 "h" "z" "z" "i"))) (>= 12 -7)))))))
(fun (fun8 energy f z x c) (if (<= energy 0) false (block (set! energy (- energy 1)) (block (set! z (fun8 -62 (set! energy "z") (fun1 -58) (* 24 "energy") (set! x "z")))))))
(fun8 (let ((y (our_code_starts_here (if (< (let ((y (let ((j (block false true -8))) (block true))) (g (let ((y (let ((loop_var_108 33)) (loop (if (< loop_var_108 (+ 33 108)) (block (set! loop_var_108 (+ loop_var_108 1))) (break -43))))) (a true)) (let ((b "y") (g "y") (j false)) true))) (h (block (let ((y "g") (c -100) (j -20)) "c") (+ 39 2) (block -71 "y" -12 false)))) -65) (let ((a (block (>= 5 39) (add1 -6) (let ((b false) (j true) (z "b")) -9) (let ((loop_var_187 -74)) (loop (if (> loop_var_187 (- -74 187)) (block (set! loop_var_187 (- loop_var_187 1))) (break false)))))) (z 31) (g (let ((loop_var_87 24)) (loop (if (< loop_var_87 (+ 24 87)) (block (set! loop_var_87 (+ loop_var_87 1)) "a" false false) (break "a")))))) (let ((loop_var_128 -54)) (loop (if (< loop_var_128 (+ -54 128)) (block (set! loop_var_128 (+ loop_var_128 1))) (break "loop_var_128")))))) (our_code_starts_here (let ((d (* (+ -81 83) (+ -49 input))) (b (let ((d false)) (block "d"))) (g (let ((z (isbool false)) (x (if -59 "z" false)) (i (isnum false))) (* -49 -79)))) (add1 "d"))) -50)))) (add1 (set! y (* (let ((c (let ((loop_var_200 -9)) (loop (if (> loop_var_200 (- -9 200)) (block (set! loop_var_200 (- loop_var_200 1)) -70) (break "loop_var_200"))))) (e (block (sub1 "c") (if "y" "c" -66) (let ((e "c") (g "y") (y "y")) "e") (block "c" "c" -39 20)))) (block (add1 -37))) (* (* (- 3 56) (let ((loop_var_103 45)) (loop (if (< loop_var_103 (+ 45 103)) (block (set! loop_var_103 (+ loop_var_103 1))) (break "loop_var_103"))))) input))))) (< (let ((c (block (let ((i (block (<= (* 68 -98) (let ((i true) (h false) (d "i")) -4)) (let ((loop_var_142 input)) (loop (if (> loop_var_142 (- input 142)) (block (set! loop_var_142 (- loop_var_142 1)) false false false) (break false)))) (let ((loop_var_56 18)) (loop (if (> loop_var_56 (- 18 56)) (block (set! loop_var_56 (- loop_var_56 1)) 24 57) (break "loop_var_56")))) (block (fun3 74 true false -22) (- -62 -94) (let ((j true)) "j") (isnum true) false) (> (let ((loop_var_118 37)) (let ((loop_var_200 51)) (loop (if (< loop_var_200 (+ 51 200)) (block (set! loop_var_200 (+ loop_var_200 1)) -34 -55 4) (break "loop_var_200"))))) (block -53 -18 -78)))) (f (let ((i (block (block 97 "i") (let ((z "i")) "z") (isbool "i") (* 25 21) (if -94 87 65))) (h (+ (let ((loop_var_190 73)) (loop (if (< loop_var_190 (+ 73 190)) (block (set! loop_var_190 (+ loop_var_190 1)) (set! i -27)) (break -20)))) (let ((loop_var_17 "i")) (loop (if (< loop_var_17 (+ "i" 17)) (block (set! loop_var_17 (+ loop_var_17 1)) (set! i -7) (set! i -20) (set! i "i") -8) (break "i")))))) (z (+ (let ((g "i")) -83) (* "h" 85)))) "i")) (x (add1 (* (let ((z "i") (f "z") (g true)) -55) (- -41 19))))) (* 66 (block (let ((g "i")) -94)))) (- (block (sub1 (let ((loop_var_103 45)) (let ((loop_var_1 25)) (loop (if (< loop_var_1 (+ 25 1)) (block (set! loop_var_1 (+ loop_var_1 1))) (break -63)))))) (our_code_starts_here (* -55 -93))) (sub1 (our_code_starts_here 26))) (let ((d (* (let ((d (block false false -61 true true))) (our_code_starts_here 4)) (block (let ((loop_var_35 -83)) (loop (if (< loop_var_35 (+ -83 35)) (block (set! loop_var_35 (+ loop_var_35 1))) (break false)))) (- -30 18) (let ((f true)) false) input))) (g (* (let ((loop_var_20 "d")) (loop (if (< loop_var_20 (+ "d" 20)) (block (set! loop_var_20 (+ loop_var_20 1)) "d" 78 32) (break "loop_var_20")))) "d"))) (>= (let ((b (let ((j 64) (b "d")) "j")) (y (isbool true)) (g (* "g" 61))) "d") (- 38 (block "d")))) (let ((e true)) (add1 (let ((loop_var_12 65)) (let ((loop_var_107 93)) (loop (if (< loop_var_107 (+ 93 107)) (block (set! loop_var_107 (+ loop_var_107 1)) (set! e -94) (set! e input) (set! e -52) -65) (break 1))))))) (let ((x (let ((loop_var_173 (* input -99))) (loop (if (> loop_var_173 (- (* input -99) 173)) (block (set! loop_var_173 (- loop_var_173 1)) (* 53 -97) (let ((y true)) 39) (- -5 44)) (break (* 24 -8))))))) (+ (let ((j (let ((g input) (y false) (c -12)) false))) (* 44 19)) (let ((g (let ((a false) (y "a") (g 65)) "g")) (z (let ((loop_var_72 "g")) (loop (if (> loop_var_72 (- "g" 72)) (block (set! loop_var_72 (- loop_var_72 1)) (set! x false) (set! x false) (set! g false)) (break true)))))) (block "z" "x" 25 "g")))))) (f "c")) (let ((loop_var_36 (* -25 90))) (loop (if (> loop_var_36 (- (* -25 90) 36)) (block (set! loop_var_36 (- loop_var_36 1)) (sub1 (set! c (let ((h "c") (e true) (i true)) 76))) (block (block (let ((z "f") (y 16)) false)) (set! c (set! f -58)) 28) (* (block (- "c" 61) (block true "f" input 46) true (set! c false) (sub1 "f")) (set! c "f"))) (break (set! loop_var_36 (+ (set! f "loop_var_36") (let ((j 40) (c true)) "j")))))))) (block (fun1 (block (if (if 32 (+ -63 -18) (block -72 -33)) (block (let ((loop_var_60 79)) (loop (if (< loop_var_60 (+ 79 60)) (block (set! loop_var_60 (+ loop_var_60 1))) (break 68)))) (add1 83) (- -91 77) 32) (let ((i (sub1 49)) (x 47)) (* 52 "x"))))))) (block (< (let ((f (+ (let ((loop_var_167 (let ((f -27) (i -88) (e "f")) -71))) (loop (if (< loop_var_167 (+ (let ((f -27) (i -88) (e "f")) -71) 167)) (block (set! loop_var_167 (+ loop_var_167 1)) (let ((g 41) (f 17)) "g") (block true 89)) (break (add1 95))))) (* -49 41))) (z (< (let ((loop_var_73 (let ((e true) (h input) (z "e")) "h"))) (let ((loop_var_102 "f")) (loop (if (> loop_var_102 (- "f" 102)) (block (set! loop_var_102 (- loop_var_102 1)) (set! f (let ((z true)) 36))) (break "f"))))) (sub1 (- "f" (- "f" "f")))))) (let ((c (block (let ((d (let ((x -42) (d -14) (c "x")) true))) (let ((loop_var_1 -79)) (loop (if (< loop_var_1 (+ -79 1)) (block (set! loop_var_1 (+ loop_var_1 1))) (break false))))))) (x (set! z (our_code_starts_here (+ "f" "f"))))) (block (let ((f "f") (e (block "z" "c" 85 "f" "z"))) (sub1 "f")) (let ((j (> 27 -47)) (i (block -41 85)) (x (let ((c "i") (a false)) "i"))) true) (sub1 (let ((h "c") (b "z") (a false)) -57)) (let ((loop_var_175 41)) (loop (if (< loop_var_175 (+ 41 175)) (block (set! loop_var_175 (+ loop_var_175 1))) (break 62)))) (+ (set! z input) (let ((f false)) -18))))) (+ (block (let ((d (let ((h (sub1 33)) (b (let ((x 28) (b "x") (y true)) "b")) (a (let ((f 2) (c "f")) true))) (= 80 "h"))) (b (sub1 (fun1 -77)))) (> (add1 "b") (block "d" "b" -54))) (let ((loop_var_22 (fun1 -19))) (loop (if (< loop_var_22 (+ (fun1 -19) 22)) (block (set! loop_var_22 (+ loop_var_22 1)) (* -18 56) (if -15 -55 -20)) (break (let ((a true)) 94)))))) (let ((z (let ((e (let ((loop_var_160 -55)) (loop (if (< loop_var_160 (+ -55 160)) (block (set! loop_var_160 (+ loop_var_160 1))) (break true))))) (z (let ((f (block false "e" true)) (e (- -64 97)) (j (let ((f false) (e 37)) 46))) (+ -92 -97))) (b (let ((y (let ((h "e") (a "z")) input))) "y"))) (let ((g "e") (f (block "g" true "b" "b")) (h (block "g" "g" -70 true))) (+ "b" "f")))) (f (if false (let ((f (block 40 true)) (g (sub1 81))) (let ((b "z") (y input) (c "f")) "c")) (let ((d (< -43 -83))) (isbool "d")))) (i (block "f"))) (let ((g (let ((b (>= "z" "z")) (g (* "z" 41))) (set! f "i"))) (d (+ (set! z 21) (let ((loop_var_96 -65)) (loop (if (> loop_var_96 (- -65 96)) (block (set! loop_var_96 (- loop_var_96 1)) (set! g -59) (set! i "z") 0 "z" -82) (break 49)))))) (c -84)) (block (block "c" "z" true "i" "z") (+ "z" -78)))))) (sub1 (block (let ((z (let ((c (let ((f (let ((j false) (f -17)) input)) (h (block true 59)) (c (set! f false))) (block false "f"))) (f (+ (* 68 49) (+ -14 "c"))) (a (let ((j (let ((y "c")) false)) (i (sub1 14))) (<= 95 28)))) (let ((b (block "a")) (z "b")) (let ((loop_var_55 input)) (let ((loop_var_83 -14)) (loop (if (< loop_var_83 (+ -14 83)) (block (set! loop_var_83 (+ loop_var_83 1)) (set! b "b") (set! c "z")) (break false)))))))) (b 69)) (set! z (let ((b (block true)) (c (isnum "z"))) (let ((loop_var_144 -78)) (loop (if (> loop_var_144 (- -78 144)) (block (set! loop_var_144 (- loop_var_144 1)) -80) (break -5))))))))) (block (let ((x (let ((x (let ((z (= (isbool true) (let ((z true) (x false)) false))) (a (let ((loop_var_174 -2)) (loop (if (> loop_var_174 (- -2 174)) (block (set! loop_var_174 (- loop_var_174 1)) (set! z 86) (set! z input) (set! z 63) -83 50 10) (break "loop_var_174")))))) (let ((e (let ((z 22) (c -41) (e "a")) "z")) (z (> 81 -67))) 52))) (i false)) (set! i (* (+ 97 -98) "x")))) (c (isnum (block (>= (block true 23) "x") (let ((loop_var_40 17)) (let ((loop_var_29 "x")) (loop (if (> loop_var_29 (- "x" 29)) (block (set! loop_var_29 (- loop_var_29 1))) (break true))))) (let ((x (sub1 "x"))) (- -59 "x")) (- (block 1) (+ "x" 66)) (= (fun6 input "x" false "x") (<= "x" "x")))))) (sub1 (* (set! x (let ((g "c") (y true) (i false)) input)) (set! x (let ((g "c") (x false) (i "c")) "x"))))) (> -62 (let ((loop_var_114 (block 3))) (loop (if (< loop_var_114 (+ (block 3) 114)) (block (set! loop_var_114 (+ loop_var_114 1)) (sub1 (let ((g true)) -57))) (break (if (<= 98 "loop_var_114") (if 56 -38 input) (block "loop_var_114" false true "loop_var_114"))))))) (if (+ (block (if (let ((h false) (c "h")) 88) (- -100 -51) (+ 5 52))) (let ((y (= (> -26 26) (isnum true))) (b (let ((z (set! y 56)) (c (set! y "z")) (b (let ((loop_var_150 -97)) (loop (if (> loop_var_150 (- -97 150)) (block (set! loop_var_150 (- loop_var_150 1)) "y" true false) (break "y")))))) (block true "y" "z" "y" "c"))) (j (block (let ((e true) (y "y")) 97) (let ((z true)) "y") "b"))) (set! b (let ((b 72) (e true) (a true)) 38)))) (let ((b (= (+ -35 (let ((loop_var_83 -86)) (loop (if (> loop_var_83 (- -86 83)) (block (set! loop_var_83 (- loop_var_83 1)) 96) (break -53))))) (let ((d (< -55 input))) (block 79)))) (x (sub1 (* 96 (block true -77 false false 31))))) -87) -33) (if (block (< -25 (* (+ -80 input) (let ((a -78) (i true)) 44))) (let ((j (fun1 (let ((f false) (i 9) (z 8)) "z"))) (c (= -33 (set! j 46)))) (fun6 (if false -100 "j") (sub1 7) (< input input) (set! j -43))) (let ((j (* (block 28 -60 59 89) (* 8 -16)))) (* (- 53 -10) (block true "j")))) (let ((x false) (c (block (* 32 (let ((c "x")) 89)) (isnum (let ((z -28) (j false)) "x")) (let ((loop_var_43 24)) (loop (if (< loop_var_43 (+ 24 43)) (block (set! loop_var_43 (+ loop_var_43 1)) (set! x true) (set! x "x") false "x") (break "x")))))) (y (let ((y (let ((loop_var_89 -28)) (let ((loop_var_195 -40)) (loop (if (> loop_var_195 (- -40 195)) (block (set! loop_var_195 (- loop_var_195 1)) true "x" "c") (break false))))))) (let ((loop_var_157 -69)) (let ((loop_var_176 -23)) (loop (if (> loop_var_176 (- -23 176)) (block (set! loop_var_176 (- loop_var_176 1)) (set! x -94) 24 20 99) (break -43)))))))) (+ (+ 76 (- "y" "y")) (add1 (+ 76 30)))) (* (- (let ((d (>= -80 -86)) (c (set! d -8)) (i input)) "c") (our_code_starts_here (let ((e true)) -93))) (let ((i input)) (let ((g false) (h (let ((x "g") (y "g")) false)) (z (let ((z 16)) 20))) (let ((loop_var_61 -59)) (loop (if (> loop_var_61 (- -59 61)) (block (set! loop_var_61 (- loop_var_61 1)) "z" "z" input) (break -88)))))))) -76) (let ((loop_var_135 (block 11 true 82 -60))) (loop (if (> loop_var_135 (- (block 11 true 82 -60) 135)) (block (set! loop_var_135 (- loop_var_135 1))) (break (let ((c (set! loop_var_135 (set! loop_var_135 false))) (d (let ((x (let ((i (let ((z "loop_var_135") (y false)) -86)) (z (- "i" 7))) (let ((a "z")) "loop_var_135")))) (+ (fun1 "loop_var_135") (add1 41))))) (- (block true "d" -93) (* (block -6 -85 input) -18)))))))) (- (let ((f -79)) (- (block (set! f (let ((b (let ((b true) (j -43) (x -24)) "f"))) (* "f" 62))) (>= (let ((z (fun7 -76 false "f" false -40))) (* "f" "f")) (let ((d (let ((loop_var_133 "f")) (let ((loop_var_108 "f")) (loop (if (> loop_var_108 (- "f" 108)) (block (set! loop_var_108 (- loop_var_108 1)) (set! f 56) (set! f "f") (set! f 65)) (break -45)))))) (e (> 40 45)) (j (+ "f" 56))) (sub1 -26))) (block (* (if 97 "f" "f") (sub1 66)) (let ((f (let ((h true)) "f")) (z (let ((d true)) "f")) (x (= "f" 80))) (isnum false)) (block (>= 8 "f") (block true true) (* "f" "f") (block -89 true true) (isbool true)) (let ((e (add1 44))) (block false true)) (let ((y (let ((y "f")) false)) (j (block "f" "f" "y" "f" false)) (g (let ((x 54) (b "x")) "x"))) (< 28 -50))) (let ((e (block (let ((loop_var_163 -33)) (let ((loop_var_152 -99)) (loop (if (> loop_var_152 (- -99 152)) (block (set! loop_var_152 (- loop_var_152 1)) true false true) (break false))))) (let ((loop_var_15 -82)) (loop (if (< loop_var_15 (+ -82 15)) (block (set! loop_var_15 (+ loop_var_15 1))) (break false)))) (set! f -76))) (z (sub1 (block "f" 96 false -96 "e"))) (i (block (- 59 84) (= false true) (block true false true) (let ((loop_var_85 11)) (loop (if (> loop_var_85 (- 11 85)) (block (set! loop_var_85 (- loop_var_85 1)) true false) (break true)))) (let ((loop_var_110 41)) (let ((loop_var_2 55)) (loop (if (> loop_var_2 (- 55 2)) (block (set! loop_var_2 (- loop_var_2 1)) (set! z false)) (break true)))))))) (let ((b (let ((loop_var_123 "f")) (loop (if (> loop_var_123 (- "f" 123)) (block (set! loop_var_123 (- loop_var_123 1)) (set! i 34) (set! z 77)) (break "e"))))) (c (block "i"))) 81)) "f") (+ (set! f (+ (let ((loop_var_81 "f")) (loop (if (> loop_var_81 (- "f" 81)) (block (set! loop_var_81 (- loop_var_81 1))) (break "loop_var_81")))) input)) (- (block (let ((loop_var_153 "f")) (loop (if (< loop_var_153 (+ "f" 153)) (block (set! loop_var_153 (+ loop_var_153 1)) 99 94) (break -9)))) (set! f false) (- "f" "f")) (block (main "f" true -5 -78 -71 -24 true "f") (set! f true) (let ((loop_var_120 28)) (loop (if (> loop_var_120 (- 28 120)) (block (set! loop_var_120 (- loop_var_120 1)) (set! f "f") (set! f 21)) (break 28)))) (block "f" true 13)))))) input) false)