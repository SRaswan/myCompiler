(fun (our_code_starts_here energy i) (if (<= energy 0) 0 (block (set! energy (- energy 1)) (+ "energy" (+ (our_code_starts_here (block false -65 "energy" "energy") (<= "i" -46)) (block (- 52 46) (+ "energy" "i") (+ "energy" "i")))))))
(fun (main energy g i j c) (if (<= energy 0) false (block (set! energy (- energy 1)) (> (let ((b (isbool (let ((a -95) (y true)) "j"))) (z (sub1 (let ((j "energy")) -80))) (g (+ (block true "g" "i" "z" "z") (let ((b "b") (f "energy")) "f")))) (+ (let ((a "g") (b -51) (d "b")) "energy") -56)) (block (set! i (let ((e 70) (x false)) "g")))))))
(let ((j (let ((loop_var_149 (* 41 -11))) (let ((loop_var_161 -36)) (loop (if (< loop_var_161 (+ -36 161)) (block (set! loop_var_161 (+ loop_var_161 1))) (break (* (* (if (sub1 "loop_var_161") (block true (add1 43) (set! loop_var_161 false) (let ((a false)) "loop_var_161")) (* (set! loop_var_161 50) (set! loop_var_161 36))) (let ((x "loop_var_161")) (+ (let ((a "loop_var_161") (x "a") (b "x")) "b") (+ "loop_var_161" -53)))) (block (block (> (our_code_starts_here "loop_var_161" false) (+ "loop_var_161" "loop_var_161"))) (let ((g (our_code_starts_here (let ((g false) (a 34)) 86) (<= -80 -96)))) (set! g (let ((h -13) (g false) (e "g")) "loop_var_161"))) (add1 (our_code_starts_here (add1 "loop_var_161") true))))))))))) (sub1 (block (block (block (let ((e (isnum (>= "j" "j"))) (g (add1 "j")) (x (set! j (let ((y true) (z "e")) "j")))) (* (+ -63 29) "g")))) (> (* (* (add1 (* "j" "j")) (let ((e (let ((g true)) "j"))) (let ((d false) (a true)) "e"))) -41) (let ((loop_var_112 (sub1 "j"))) (let ((loop_var_37 (let ((x true) (e false)) "j"))) (let ((loop_var_189 (block "j" "j" -69 true -34))) (loop (if (> loop_var_189 (- (block "j" "j" -69 true -34) 189)) (block (set! loop_var_189 (- loop_var_189 1)) (set! j (let ((z (set! j "j")) (f (let ((d -100) (f false) (a 79)) "f"))) (set! z true)))) (break (main -16 (add1 "loop_var_189") (set! loop_var_189 false) (let ((f "loop_var_189")) false) (if 21 93 73))))))))) (block (if (isnum (let ((b (let ((i true) (y -63) (z "j")) "j"))) (>= 85 -40))) (isbool (let ((b (sub1 15)) (x (main 18 51 true false "j")) (d (let ((z false) (c "z") (i -78)) "i"))) (- -16 -57))) (block (block (> -26 14) (let ((c true)) false) (+ true true)) (< (isbool true) (let ((b true)) "j")) (= (sub1 -11) (- -77 88)) 65 (* 28 (let ((y -44) (b true) (e 41)) "b")))) (let ((j (our_code_starts_here 73 (set! j (> -87 -35)))) (z (let ((i (< (+ "j" "j") (- -36 14))) (y (* (* -84 "j") (- -3 "j"))) (d (- (* -26 59) (block "j" true 93 true -74)))) true)) (c "j")) (>= 15 (let ((f (block "j" "z" true "z"))) "j"))) -23 (let ((b (block (let ((d (isbool true)) (z (block -36 15 -57)) (f (let ((loop_var_53 16)) (loop (if (> loop_var_53 (- 16 53)) (block (set! loop_var_53 (- loop_var_53 1))) (break "loop_var_53")))))) (sub1 -81)) (let ((loop_var_141 75)) (let ((loop_var_200 "j")) (loop (if (> loop_var_200 (- "j" 200)) (block (set! loop_var_200 (- loop_var_200 1))) (break -100))))) (<= (set! j 99) (- -83 "j"))))) (if (>= (let ((loop_var_10 "j")) (let ((loop_var_194 -3)) (loop (if (> loop_var_194 (- -3 194)) (block (set! loop_var_194 (- loop_var_194 1)) (set! j -50) (set! j 99) (set! j "j")) (break -78))))) (let ((g -19) (d "j") (f false)) 29)) (add1 (block 96)) (sub1 (sub1 "j")))) (block (<= (* (let ((b true)) "j") (add1 -37)) (isbool (isbool true))) (sub1 (if (let ((loop_var_156 "j")) (loop (if (< loop_var_156 (+ "j" 156)) (block (set! loop_var_156 (+ loop_var_156 1)) (set! j 71) "j") (break "j")))) (let ((loop_var_18 "j")) (let ((loop_var_10 "j")) (loop (if (< loop_var_10 (+ "j" 10)) (block (set! loop_var_10 (+ loop_var_10 1)) (set! j "j") (set! j 49) (set! j "j") "j" -86) (break -27))))) (let ((c -15) (y -31) (b "c")) "y"))) true (> (let ((a 37)) 13) (* (let ((b false)) "j") (set! j "j"))))))))