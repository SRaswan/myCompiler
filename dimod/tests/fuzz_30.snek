(fun (our_code_starts_here energy b h y z) (if (<= energy 0) -83 (block (set! energy (- energy 1)) (+ (block (+ -57 -23) (set! y (set! b "z")) (isnum (block "z")) (block (sub1 "b") (block true true -90) (let ((j "h") (g "z")) false) (> -30 43)) (- (let ((e "h")) 66) -66)) (if (block (let ((h -11)) true) (* "h" 92) (set! h -72) (block 38 "energy" "y" "z")) (set! h (+ "energy" 87)) "b")))))
(fun (main energy h y) (if (<= energy 0) true (block (set! energy (- energy 1)) (if (block true) "y" (< (add1 (let ((x "h") (a 8) (c true)) "a")) (* (sub1 "energy") (let ((d "h") (i 2) (x "h")) "h")))))))
(fun (fun1 energy j e d g h) (if (<= energy 0) false (block (set! energy (- energy 1)) false)))
(fun (fun2 energy z i j) (if (<= energy 0) false (block (set! energy (- energy 1)) (let ((y (add1 (+ (+ "energy" "energy") (let ((g "energy") (a "g")) "z")))) (x (- -44 "y")) (a (* (set! x (set! j "energy")) (block (< "y" 78) (block true "energy" "x") (fun6 "z" 22 "energy" "energy"))))) (block (= (fun5 "z" -54 91 false "z" -37 false "j" 22) (let ((z false) (b -81)) "z")) (isbool (block "i")) (sub1 (let ((f true)) 2)) (fun3 (fun7 "energy" "energy" true false 48) (set! x -71) (fun1 "z" true false "energy" 14 "z") "x" (isnum true)))))))
(fun (fun3 energy e a h y) (if (<= energy 0) true (block (set! energy (- energy 1)) (>= (let ((b (our_code_starts_here (let ((d true) (y -65)) "y") (let ((c "h") (d "y") (e "d")) "e") "h" (< -7 99) (- "energy" -25))) (z (block (sub1 "b") (let ((b true)) "a") (>= 94 -86)))) (block (let ((h "e")) "e"))) (+ (fun5 (* 56 "energy") (block -77 "y" false "y") (* -23 "a") (block "h" true false false) (block -80 "energy" "h" "h" -36) (let ((x 34)) 50) (set! h true) (< -15 "energy") (+ "energy" -15)) (sub1 "a"))))))
(fun (fun4 energy e d i) (if (<= energy 0) false (block (set! energy (- energy 1)) (let ((f (let ((b (= (< 50 -45) (fun4 43 -16 true true))) (c (block (let ((c "i") (b "d")) "i")))) (let ((x (fun8 -72 false "e" "energy" "energy" true "c" "c")) (g (= "d" 82)) (e (>= -40 "x"))) (let ((h "e") (b true) (e "e")) false))))) (block (add1 (+ -77 -20)) (set! d (isnum "f")))))))
(fun (fun5 energy e b i y c z f d) (if (<= energy 0) -12 (block (set! energy (- energy 1)) (* (if (= (block false true "e" true "b") (block "i" -56 91)) (add1 (* "i" -84)) (- (fun6 "c" "i" -70 "energy") (block 70 "f" "z" "e" "i"))) (- (let ((c (set! i true))) -39) (let ((x (< 23 -26)) (e (let ((g "b")) false))) (let ((j -68) (y "energy") (x "e")) "e")))))))
(fun (fun6 energy j y z) (if (<= energy 0) 37 (block (set! energy (- energy 1)) (set! j "j"))))
(fun (fun7 energy b a y d) (if (<= energy 0) -76 (block (set! energy (- energy 1)) (+ (- (block (block 76 true false true "energy")) (let ((c (block "energy" "y"))) (our_code_starts_here -90 31 "c" "d" -46))) (block (block "energy" "a" (let ((f false) (h "a") (i 98)) "d")) (block (block true -19) (>= "a" "a") (- "a" 61) (fun1 61 true false 48 "a" 33) "a"))))))
(fun (fun8 energy e j h a f i b) (if (<= energy 0) true (block (set! energy (- energy 1)) (< (set! b (* (block -94) "e")) (fun5 (let ((d (isbool true)) (b (sub1 33)) (f (block -32 "b" 57 "f"))) (- 20 "a")) (+ (block "energy") (our_code_starts_here -32 61 "i" false -78)) (+ (+ -22 -43) (block -83 false 48)) (set! i "j") (let ((e (>= 84 -5))) (block false 55)) (block (block "energy" "f" "energy")) (>= (if "f" -89 "a") (let ((f true) (j "b") (a true)) -91)) (block (let ((y "j")) "i")) (set! f (let ((i -8) (f "j")) -83)))))))
(let ((x (block (isnum (block (block (* 99 (sub1 (* 8 27))) (let ((loop_var_126 (let ((b true) (g "b")) -66))) (loop (if (> loop_var_126 (- (let ((b true) (g "b")) -66) 126)) (block (set! loop_var_126 (- loop_var_126 1))) (break (fun4 "loop_var_126" 20 true false)))))))) -18 (* (let ((loop_var_38 (+ -54 -71))) (loop (if (< loop_var_38 (+ (+ -54 -71) 38)) (block (set! loop_var_38 (+ loop_var_38 1))) (break (block (set! loop_var_38 (let ((d true)) 0))))))) (let ((loop_var_76 (fun6 84 61 -48 -1))) (let ((loop_var_18 (let ((b false) (c "b") (e true)) -67))) (loop (if (> loop_var_18 (- (let ((b false) (c "b") (e true)) -67) 18)) (block (set! loop_var_18 (- loop_var_18 1))) (break (block (let ((x (+ "loop_var_18" "loop_var_18"))) (let ((x true) (i "x") (y "x")) -59)) -84))))))) (fun1 (let ((loop_var_45 -71)) (loop (if (> loop_var_45 (- -71 45)) (block (set! loop_var_45 (- loop_var_45 1))) (break (+ (- (let ((j "loop_var_45") (i "j")) 69) (let ((i 65) (a -17) (e -62)) "i")) (let ((x (let ((b false) (h false) (y "loop_var_45")) true)) (j (* "loop_var_45" -58))) (let ((i "loop_var_45") (b "x")) "loop_var_45"))))))) (isnum false) (= -41 (block (+ -69 94))) (let ((d (if (let ((loop_var_147 (block true 98))) (loop (if (> loop_var_147 (- (block true 98) 147)) (block (set! loop_var_147 (- loop_var_147 1))) (break (block 45 86 72 true "loop_var_147"))))) (isnum (> (sub1 33) (let ((c false) (g -15) (z true)) "g"))) (let ((i (+ (let ((loop_var_46 94)) (loop (if (> loop_var_46 (- 94 46)) (block (set! loop_var_46 (- loop_var_46 1)) -23 -47 -41) (break "loop_var_46")))) (- 100 2))) (h 2)) (< (+ "h" "i") (sub1 "i"))))) (j (block (isbool (let ((h (block true 45 "d"))) (> 78 -86))) (+ (- (if true 53 95) (add1 37)) (let ((loop_var_131 -19)) (loop (if (> loop_var_131 (- -19 131)) (block (set! loop_var_131 (- loop_var_131 1)) -69) (break 14))))) (* (block (block 23 false "d") (- -94 29) "d" 52) (* (block -67) (let ((f -27)) 20))) (let ((loop_var_49 (fun6 -74 11 -65 8))) (loop (if (> loop_var_49 (- (fun6 -74 11 -65 8) 49)) (block (set! loop_var_49 (- loop_var_49 1)) (set! d (let ((x 19) (j "d") (y "j")) "d")) (set! d (let ((y false) (i 96)) true))) (break (set! loop_var_49 "d"))))) (block -44 (let ((a (isbool "d")) (z (let ((c false) (d false)) "d")) (d (fun7 -60 -65 true "d" -16))) (let ((b -87)) "b")) -30 (block (isnum "d") (add1 -68)))))) (block -34 (let ((e (let ((loop_var_45 74)) (loop (if (< loop_var_45 (+ 74 45)) (block (set! loop_var_45 (+ loop_var_45 1)) (set! j 12) "j" -81 92) (break 1)))))) (let ((loop_var_136 "e")) (loop (if (< loop_var_136 (+ "e" 136)) (block (set! loop_var_136 (+ loop_var_136 1)) (set! d "d") (set! e "d") "d") (break "d"))))) (- (let ((loop_var_116 "j")) (loop (if (> loop_var_116 (- "j" 116)) (block (set! loop_var_116 (- loop_var_116 1))) (break -9)))) (let ((i (+ 53 -30))) (let ((loop_var_102 44)) (let ((loop_var_9 "j")) (loop (if (> loop_var_9 (- "j" 9)) (block (set! loop_var_9 (- loop_var_9 1))) (break "j"))))))) (* (fun5 (* -12 "j") (let ((loop_var_104 "j")) (let ((loop_var_5 46)) (let ((loop_var_150 "j")) (loop (if (< loop_var_150 (+ "j" 150)) (block (set! loop_var_150 (+ loop_var_150 1))) (break "j")))))) (let ((y true) (g true) (a "g")) 99) (= -24 "j") (set! j "j") "j" (<= "j" "j") (let ((e 71)) "d") (* -13 10)) -48))) (let ((g (let ((z (let ((b (sub1 (let ((z false) (c 0) (d "z")) "c"))) (f (sub1 (add1 92))) (c (let ((loop_var_94 -58)) (loop (if (> loop_var_94 (- -58 94)) (block (set! loop_var_94 (- loop_var_94 1)) (set! f -73) (set! f 48) (set! f 92) "b") (break "f")))))) (let ((loop_var_119 "b")) (let ((loop_var_141 -17)) (loop (if (> loop_var_141 (- -17 141)) (block (set! loop_var_141 (- loop_var_141 1))) (break 33)))))))) (- (* 17 (- "z" -13)) "z"))) (f (let ((y (>= (if (let ((i "g") (c -18) (h -66)) 90) (let ((c "g")) 37) (+ 65 22)) (* (* -89 "g") (fun7 "g" 70 true false "g")))) (d (= (let ((h (= -2 -99)) (b (> "g" 50))) (* -45 -81)) (set! g (block "y" true -52 38))))) (let ((h (block (* "g" 70) (< -61 "g") (isbool true) (block true "y" -32 72))) (f "g") (b (+ (set! f -18) (block false 40)))) (block (* -40 "f") 38))))) (- (let ((loop_var_185 (sub1 -40))) (let ((loop_var_58 (block true "f"))) (let ((loop_var_40 (* "f" "g"))) (loop (if (< loop_var_40 (+ (* "f" "g") 40)) (block (set! loop_var_40 (+ loop_var_40 1)) (set! f (set! g "f")) (set! f (block true 32)) (set! g (* "f" 89)) (sub1 "f")) (break (let ((y -78) (h false) (c false)) "loop_var_40"))))))) (block (block (block "g") (* -98 "g") (sub1 96) (let ((loop_var_83 -56)) (let ((loop_var_152 69)) (loop (if (< loop_var_152 (+ 69 152)) (block (set! loop_var_152 (+ loop_var_152 1)) 80 84 -85) (break "loop_var_152"))))) (sub1 "g")) (* (+ -50 "f") "g")))) (let ((x (isbool (>= (block (let ((j 96)) -69) (block true -37) (let ((b true)) "b") (- -8 88)) (+ (fun5 42 -36 -59 false -78 61 true true -89) -34)))) (h (let ((z (= (set! x (> -69 20)) true))) (block (* (if 80 29 52) (block false false true 3)) (let ((loop_var_99 -61)) (let ((loop_var_138 50)) (loop (if (< loop_var_138 (+ 50 138)) (block (set! loop_var_138 (+ loop_var_138 1)) (set! z -3) (set! z -40) (set! x -60) 4) (break 61))))) (let ((loop_var_93 97)) (loop (if (> loop_var_93 (- 97 93)) (block (set! loop_var_93 (- loop_var_93 1)) (set! z "z") "z" "z" "x") (break "z")))) (let ((j (isbool true))) (let ((y 74) (g 85) (a input)) true)) (set! x (block 1))))) (e (<= (set! x (let ((g 67)) (sub1 78))) (+ (+ (block "x" "x" true "h") (- "h" 13)) (let ((a (block "h"))) (let ((loop_var_157 "h")) (let ((loop_var_76 "h")) (let ((loop_var_115 -34)) (loop (if (> loop_var_115 (- -34 115)) (block (set! loop_var_115 (- loop_var_115 1)) -68) (break "h"))))))))))) (set! h (set! h (+ (block true false 11 64) (our_code_starts_here -90 52 "x" "e" -36)))))) false))) (block (let ((loop_var_34 (+ -72 -49))) (loop (if (< loop_var_34 (+ (+ -72 -49) 34)) (block (set! loop_var_34 (+ loop_var_34 1)) (set! x (* (let ((g (- -13 (if -44 -58 -34))) (y (let ((a (set! g "g"))) (if -41 -88 -26)))) (set! y (let ((f "y")) "g"))) (let ((x (< (set! x -46) (- 82 -83))) (b (block (+ -32 -58) (fun2 -78 "x" true -68))) (j (fun6 (let ((c -18) (x -13)) 76) (block "x" -7 -39) (let ((i -76) (y "i") (b "y")) "i") (+ 12 46)))) -81)))) (break (set! x (- (set! loop_var_34 (if 26 12 "loop_var_34")) (fun6 (- -22 85) 75 (block true 62 "loop_var_34") (+ "loop_var_34" 20)))))))) (block (block -70) (block (block (* (set! x (+ -55 -94)) (add1 (let ((f -82) (z "f") (e "x")) -85))) (let ((i (let ((j (let ((loop_var_152 21)) (loop (if (> loop_var_152 (- 21 152)) (block (set! loop_var_152 (- loop_var_152 1))) (break "x"))))) (h (let ((loop_var_119 83)) (loop (if (> loop_var_119 (- 83 119)) (block (set! loop_var_119 (- loop_var_119 1)) -54 48) (break "loop_var_119"))))) (a (< 81 59))) (let ((loop_var_46 81)) (loop (if (> loop_var_46 (- 81 46)) (block (set! loop_var_46 (- loop_var_46 1)) (set! h "a") (set! h "a")) (break true)))))) (y (let ((loop_var_17 -93)) (let ((loop_var_32 -56)) (loop (if (> loop_var_32 (- -56 32)) (block (set! loop_var_32 (- loop_var_32 1)) -74) (break 23))))))) (block (block 46))) (block (* (let ((x "x")) 83) (let ((b "x")) 19)) (> (let ((y true) (x 60)) "x") 78) (let ((loop_var_103 -90)) (loop (if (> loop_var_103 (- -90 103)) (block (set! loop_var_103 (- loop_var_103 1)) (set! x -23) (set! x -3)) (break 83)))) (+ 94 (set! x 53)) (sub1 (fun6 -1 70 74 -93))) (* (- (let ((d -93) (j "x") (f false)) 2) (let ((loop_var_29 -79)) (loop (if (< loop_var_29 (+ -79 29)) (block (set! loop_var_29 (+ loop_var_29 1)) (set! x -23) (set! x 64) -74 70 -42) (break -73))))) (let ((loop_var_149 84)) (loop (if (< loop_var_149 (+ 84 149)) (block (set! loop_var_149 (+ loop_var_149 1))) (break 16))))) (* (* (add1 -94) 27) 95))) 57 (fun4 (+ (sub1 (block (let ((loop_var_85 88)) (loop (if (> loop_var_85 (- 88 85)) (block (set! loop_var_85 (- loop_var_85 1)) (set! x -10) 66 61) (break "loop_var_85")))) (* -56 62) (+ -53 -4) (let ((f "x") (b -82) (c false)) "b"))) (block (- (let ((j 30)) "j") (block false -45 32)) (set! x (let ((loop_var_192 61)) (loop (if (> loop_var_192 (- 61 192)) (block (set! loop_var_192 (- loop_var_192 1)) 84 19 56) (break -84))))) (set! x (let ((d "x") (b false)) 0)) (- (- -33 5) (* 38 76)))) (let ((loop_var_194 (block "x" "x" 96 -2))) (loop (if (< loop_var_194 (+ (block "x" "x" 96 -2) 194)) (block (set! loop_var_194 (+ loop_var_194 1)) (let ((e (isbool true)) (f (= 5 77))) (add1 100))) (break -36)))) (let ((i (isnum (block (= -70 12))))) (let ((h (block 54 (let ((loop_var_121 -54)) (let ((loop_var_96 75)) (let ((loop_var_59 -66)) (loop (if (> loop_var_59 (- -66 59)) (block (set! loop_var_59 (- loop_var_59 1)) (set! x -47) (set! x 5) (set! x -17) 67 91) (break -73)))))) (+ 49 47))) (x (let ((f false)) (block "x" "h" false)))) "i")) (= (let ((f (add1 (+ -50 3)))) (+ (sub1 62) (let ((c 53)) "f"))) -21)))))