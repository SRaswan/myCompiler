(fun (our_code_starts_here energy g i e f j) (if (<= energy 0) 89 (block (set! energy (- energy 1)) (let ((y (let ((f (let ((x (let ((e false)) "g"))) (+ 36 "g")))) (let ((a -88)) (>= "j" 84))))) (block (block (our_code_starts_here "energy" true false "f" "g" "j")) (* (set! y "energy") (* 95 -48)) (set! f (set! energy "j")) (let ((i (< -71 -34)) (c (let ((j "energy") (e false)) "j")) (x (+ -34 -100))) (let ((g -5) (z "f") (i "g")) -49)))))))
(fun (main energy) (if (<= energy 0) false (block (set! energy (- energy 1)) (set! energy (<= (block (let ((c -18)) 71) (let ((j true)) "j") true 64) (block (isbool false) (set! energy "energy") (let ((h false) (f true)) true) (block true false) (let ((z true) (x "z") (d "z")) "energy")))))))
(fun (fun1 energy y z x h b i g) (if (<= energy 0) false (block (set! energy (- energy 1)) (set! i (block (+ (let ((y true) (j true)) 11) (+ 49 "i")) 49 (block (block -81 -46) (our_code_starts_here -74 false "z" false -79 "h") (let ((z false) (d -33) (i false)) -21) (block "z" false 23)) (block (set! g "z") (block "z" 38 7 8) (isnum "z")))))))
(< (- (let ((x (let ((c (our_code_starts_here (block (add1 (block -19 false -16))) (<= (block (block 80) (let ((loop_var_150 1)) (let ((loop_var_11 -2)) (loop (if (> loop_var_11 (- -2 11)) (block (set! loop_var_11 (- loop_var_11 1)) false) (break false))))) (let ((z 92)) 31)) (let ((d 3)) (sub1 "d"))) (isbool (= (let ((d true) (h true)) 51) (* 32 input))) true (+ (our_code_starts_here (block 99 false true 93) (let ((f 55)) false) (= false true) (isnum true) (let ((g 16)) 8) (block false true -20)) (let ((z (= false true)) (a (set! z -29))) (let ((e "z") (x "a")) 31))) (let ((x (if (let ((x false) (j 39) (c true)) "j") (let ((i true) (z -82) (f "i")) "f") (block false false))) (f (- (let ((loop_var_56 -35)) (let ((loop_var_28 -55)) (loop (if (< loop_var_28 (+ -55 28)) (block (set! loop_var_28 (+ loop_var_28 1)) 16) (break "loop_var_28"))))) (block -71 -4 true -63))) (b -53)) (block (block true) (- 58 "f") (let ((j "f") (g true) (f "g")) "j") (block "b" "f"))))) (d (set! c (>= (+ (block "c" true false -16) (block "c")) (let ((loop_var_143 "c")) (loop (if (< loop_var_143 (+ "c" 143)) (block (set! loop_var_143 (+ loop_var_143 1))) (break "loop_var_143"))))))) (z (let ((loop_var_94 (let ((c "d") (x false)) "c"))) (loop (if (< loop_var_94 (+ (let ((c "d") (x false)) "c") 94)) (block (set! loop_var_94 (+ loop_var_94 1)) (set! d (+ "c" (let ((d "c")) input))) (set! d (- (let ((i "d")) 87) 48)) (block (set! d "c"))) (break (set! c (if true input 65)))))))) (block (let ((h (>= (+ "c" 57) (block "z"))) (x "h") (b (let ((loop_var_81 "c")) (loop (if (< loop_var_81 (+ "c" 81)) (block (set! loop_var_81 (+ loop_var_81 1)) "z" input "z") (break "c")))))) (block (+ 38 "z") "b" (block "z") (block "h" "d")))))) (j (if (let ((loop_var_195 (* 21 -96))) (let ((loop_var_59 (+ -8 -85))) (loop (if (> loop_var_59 (- (+ -8 -85) 59)) (block (set! loop_var_59 (- loop_var_59 1))) (break (> (- 21 "loop_var_59") (+ "loop_var_59" -85))))))) (- (let ((c (let ((loop_var_168 80)) (loop (if (> loop_var_168 (- 80 168)) (block (set! loop_var_168 (- loop_var_168 1)) 54 input -74) (break "loop_var_168")))))) (sub1 (let ((i "x") (x "x")) -83))) (sub1 -30)) (+ (block (let ((j "x") (d "x")) (let ((g -66) (d -43) (j "d")) "j")) (>= (- 86 -63) 12) (isnum (isbool "x")) (let ((i false) (j (our_code_starts_here 98 "i" "x" "i" 32 56)) (x (- 96 -36))) (block -47))) (+ (let ((b (let ((loop_var_93 8)) (loop (if (> loop_var_93 (- 8 93)) (block (set! loop_var_93 (- loop_var_93 1)) (set! x -46)) (break 42))))) (g false) (i (- -56 -59))) (block false -42)) (set! x 86)))))) (let ((loop_var_39 (let ((i true)) -50))) (loop (if (> loop_var_39 (- (let ((i true)) -50) 39)) (block (set! loop_var_39 (- loop_var_39 1)) (set! x "j") (set! x (* (if (block 25) (+ "j" -40) -61) (let ((g (isnum true)) (a (isnum false))) (sub1 "j")))) (set! j (sub1 (let ((e (let ((h true) (d "x")) "j")) (f (add1 "j"))) (set! e "j"))))) (break (sub1 (block (sub1 65)))))))) -93) (our_code_starts_here 65 (block (let ((e -17) (g (let ((j (+ (* (block input) (let ((loop_var_87 "e")) (loop (if (> loop_var_87 (- "e" 87)) (block (set! loop_var_87 (- loop_var_87 1))) (break "loop_var_87"))))) (* (add1 "e") 70))) (z (add1 (+ (let ((h true) (a 81) (i "e")) "e") (let ((i -7)) "j"))))) (block true "j")))) (let ((loop_var_94 (our_code_starts_here 87 true false true -81 "e"))) (loop (if (> loop_var_94 (- (our_code_starts_here 87 true false true -81 "e") 94)) (block (set! loop_var_94 (- loop_var_94 1)) (let ((d (let ((e -15) (d "e") (c true)) 64))) (+ "g" "e"))) (break (let ((f (let ((h false) (g false)) true))) (block "loop_var_94" "f" "f" "f" input))))))) (+ (let ((e (if (add1 (block false input 21 false -4)) (sub1 -20) -45))) (* (let ((c (block false "e" -78 "e"))) (* -15 "e")) (let ((i (block true true false)) (h (block false -94))) (* "e" -97)))) (let ((a (let ((y (let ((j (let ((loop_var_177 -86)) (loop (if (> loop_var_177 (- -86 177)) (block (set! loop_var_177 (- loop_var_177 1)) false true true) (break true))))) (x (let ((g -92) (c "g")) -26)) (e (block 89 80 "x" "x" "j"))) (+ 25 "x")))) (< (let ((loop_var_55 "y")) (loop (if (> loop_var_55 (- "y" 55)) (block (set! loop_var_55 (- loop_var_55 1)) (set! y 7) (set! y input) (set! y "y")) (break "y")))) (* -57 "y")))) (e (block (< (let ((c true)) -31) (let ((loop_var_58 -64)) (loop (if (> loop_var_58 (- -64 58)) (block (set! loop_var_58 (- loop_var_58 1)) (set! a -78) (set! a -48)) (break "loop_var_58"))))) (> (let ((d -79)) -16) -50) 84 (let ((z (> 51 -4))) (add1 -18)) (set! a (* -94 86)))) (g "a")) (block (let ((f (let ((loop_var_108 "e")) (loop (if (> loop_var_108 (- "e" 108)) (block (set! loop_var_108 (- loop_var_108 1)) (set! a true) (set! a true) (set! e "a")) (break "g")))))) (* -42 "e"))))) (block (- (if (if (>= -40 73) (let ((loop_var_118 5)) (let ((loop_var_153 -7)) (loop (if (< loop_var_153 (+ -7 153)) (block (set! loop_var_153 (+ loop_var_153 1))) (break 51))))) (let ((j false) (c "j") (y -42)) 58)) (let ((x (sub1 -90))) (sub1 "x")) 51) (+ (* (- 91 -72) (our_code_starts_here -52 true false true 84 -76)) (let ((j (<= -62 82))) (let ((a -3) (b "a")) input)))) (block (block (block (+ -21 59) (let ((b true) (z "b")) 30)) (+ (* -70 -56) (let ((d true) (y "d") (e -24)) 28))) (- (let ((loop_var_68 2)) (let ((loop_var_169 37)) (let ((loop_var_119 -93)) (loop (if (> loop_var_119 (- -93 119)) (block (set! loop_var_119 (- loop_var_119 1))) (break 35)))))) (block (main -55) true 10)) (let ((y (let ((loop_var_76 -42)) (loop (if (< loop_var_76 (+ -42 76)) (block (set! loop_var_76 (+ loop_var_76 1))) (break "loop_var_76"))))) (g (let ((loop_var_200 -17)) (loop (if (< loop_var_200 (+ -17 200)) (block (set! loop_var_200 (+ loop_var_200 1)) (set! y 35) (set! y -14) (set! y "y") "y") (break "loop_var_200"))))) (a (main (block true -71 "y")))) (let ((a (let ((y -52) (z false) (a "a")) "a"))) (let ((x 13)) true))))) (main (let ((loop_var_117 (sub1 59))) (loop (if (> loop_var_117 (- (sub1 59) 117)) (block (set! loop_var_117 (- loop_var_117 1)) input) (break (let ((g (block false true false)) (c (* "loop_var_117" -16)) (a (our_code_starts_here 25 false "g" false "c" "loop_var_117"))) (set! loop_var_117 52)))))))) (let ((loop_var_11 (block -49 -62 input -15 70))) (loop (if (< loop_var_11 (+ (block -49 -62 input -15 70) 11)) (block (set! loop_var_11 (+ loop_var_11 1))) (break (< (block (set! loop_var_11 -69) (let ((j (let ((c 87) (x false) (g input)) "loop_var_11")) (b (>= "j" "loop_var_11"))) (> "loop_var_11" "loop_var_11")) (* (let ((f false) (y true) (b -28)) "b") (let ((i true)) -11)) "loop_var_11") (let ((b (<= (let ((d true)) "loop_var_11") (let ((f "loop_var_11")) "f"))) (h (* (* -70 89) (let ((j false) (h "loop_var_11")) "loop_var_11")))) (- (add1 28) (block "h" -6 -83)))))))) (let ((loop_var_113 (+ 59 -52))) (let ((loop_var_141 (* -43 -43))) (loop (if (< loop_var_141 (+ (* -43 -43) 141)) (block (set! loop_var_141 (+ loop_var_141 1))) (break (> (sub1 "loop_var_141") (* (let ((f "loop_var_141") (z (> "f" "f")) (g (let ((y "z") (b "y") (c "b")) "y"))) (block true "loop_var_141")) (* (* "loop_var_141" 32) (our_code_starts_here -94 false true false -23 "loop_var_141"))))))))) (- (let ((h (let ((g (isnum (block (block 32 -71 false input 33) (< 40 13))))) -9)) (z (let ((d (* (let ((f (let ((g true)) "g")) (j (set! f "h")) (c (+ "j" "h"))) (let ((d true) (y -25) (j true)) "y")) input))) (isbool (let ((h (isbool false))) (> "h" "h"))))) (f (if (block (* (let ((d true)) 80) 87) (let ((g (add1 98)) (a (<= "g" 38))) (block input "z" false)) (let ((loop_var_6 30)) (loop (if (< loop_var_6 (+ 30 6)) (block (set! loop_var_6 (+ loop_var_6 1)) (set! z -15) (set! h -77)) (break "loop_var_6")))) (>= (our_code_starts_here -11 "z" false "z" "h" "h") (let ((h "z") (z true) (d "h")) -75))) "h" (+ "h" (block (let ((loop_var_186 84)) (loop (if (< loop_var_186 (+ 84 186)) (block (set! loop_var_186 (+ loop_var_186 1))) (break "loop_var_186"))))))))) (let ((i (block (> (sub1 -1) (- 44 "f")) (fun1 (our_code_starts_here "f" "z" "z" true "h" "f") (isnum "z") (add1 -61) (add1 "f") (- "h" "f") (let ((e "h") (i "f") (h false)) -47) (let ((loop_var_191 72)) (loop (if (> loop_var_191 (- 72 191)) (block (set! loop_var_191 (- loop_var_191 1)) -16) (break 33)))) (let ((c true)) "h")) (block (>= -48 "f") (<= -49 "h") (our_code_starts_here "f" "z" "z" false input "h")) (= (let ((d "h") (z "h") (h "z")) "d") (+ "f" "h")))) (d (* (our_code_starts_here (if "i" "h" "h") (let ((loop_var_47 39)) (let ((loop_var_143 5)) (loop (if (> loop_var_143 (- 5 143)) (block (set! loop_var_143 (- loop_var_143 1)) false "i") (break false))))) (<= "h" -31) false (let ((h -61) (d "i") (e true)) -4) (+ -39 "f")) (* (sub1 "f") (* 50 85)))) (c (<= (block (let ((loop_var_77 -96)) (loop (if (> loop_var_77 (- -96 77)) (block (set! loop_var_77 (- loop_var_77 1))) (break "f")))) (* input -19) (set! h 99)) (- (let ((loop_var_28 "h")) (let ((loop_var_15 "d")) (let ((loop_var_150 "h")) (loop (if (< loop_var_150 (+ "h" 150)) (block (set! loop_var_150 (+ loop_var_150 1)) (set! z "f") (set! i "d") (set! f -49)) (break 9)))))) (set! f "h"))))) (let ((d (let ((j (- "d" "h")) (g (set! z true)) (c (let ((z "d")) -33))) "c"))) (- (let ((y 42) (j false)) -85) (let ((e -23) (f "d")) "d"))))) (let ((y (block (+ (let ((loop_var_141 -45)) (let ((loop_var_176 -61)) (let ((loop_var_93 -64)) (loop (if (< loop_var_93 (+ -64 93)) (block (set! loop_var_93 (+ loop_var_93 1))) (break 37)))))) (* (- 24 -75) (* input 27))) (block (our_code_starts_here (our_code_starts_here -14 false true true -26 65) (let ((loop_var_95 -54)) (loop (if (> loop_var_95 (- -54 95)) (block (set! loop_var_95 (- loop_var_95 1))) (break false)))) (block 65 true) (let ((d true) (x "d")) "x") (* -25 30) -77))))) 83)) -93))