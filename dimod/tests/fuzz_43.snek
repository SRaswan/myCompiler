(fun (our_code_starts_here energy b a f e i y) (if (<= energy 0) -53 (block (set! energy (- energy 1)) (let ((i (> (set! energy (* 6 6)) (+ (* "f" "y") (block "f" 6 "a" "a" "y")))) (f (let ((c "b") (x "i")) (let ((c (block "i" false "a")) (z (let ((z -59) (x "x") (y -35)) -50)) (j (+ -31 89))) (add1 "e"))))) (* (block (set! f false) (let ((a "i") (y true) (g true)) -73)) (- (fun3 28 -61 12 "b" "a" "i" "f" 27 "i") "f"))))))
(fun (main energy g y) (if (<= energy 0) false (block (set! energy (- energy 1)) (= (let ((e (set! y true)) (x (let ((f (>= -47 -84))) (isbool "e")))) (> (if "energy" -1 -1) (let ((c true) (i "e")) -16))) (>= (* (let ((f -83)) "y") (block true true true "energy")) (fun3 (- -16 "y") (* 13 "energy") (set! g "energy") (+ -40 -30) (isbool true) (let ((j true)) "g") (- -29 -57) (set! y "energy") (block false -88 true -1 "g")))))))
(fun (fun1 energy g x) (if (<= energy 0) -28 (block (set! energy (- energy 1)) (block (<= (block (* "energy" "x")) (let ((j (+ -7 27)) (a (set! energy true))) (- "x" -25))) (let ((d (+ (set! g "x") (let ((x true) (j "energy")) -36))) (f (< (- 9 "x") (add1 "energy"))) (z (= (let ((z "d") (g 86) (y 45)) 1) (let ((e "f") (c true) (d "x")) 16)))) (let ((z (if false -48 -49))) (let ((x true) (a "energy") (h "z")) "d")))))))
(fun (fun2 energy g d h) (if (<= energy 0) false (block (set! energy (- energy 1)) (let ((i (set! d (if (set! h "h") (block "h" -31 true false) (block true)))) (a (let ((j -93) (y (fun1 (+ 96 20) (let ((b "j") (a 55) (g "d")) -45) (sub1 "energy")))) (let ((b false) (a (block true 6 "i"))) (set! g "a")))) (j "g")) (set! h (main (fun3 "energy" -37 "j" 55 false "energy" "energy" -60 -36) (- -68 -39) (block true "energy")))))))
(fun (fun3 energy f c g h j i b y) (if (<= energy 0) 92 (block (set! energy (- energy 1)) "energy")))
(fun (fun4 energy j h f e c d a b) (if (<= energy 0) false (block (set! energy (- energy 1)) (block (- (block (let ((c false) (h "h")) 50) (our_code_starts_here 71 true 61 "energy" 0 80 "h") (block "a" "a" "energy")) (block 48)) (isnum false)))))
(fun (fun5 energy x d e) (if (<= energy 0) 56 (block (set! energy (- energy 1)) (let ((a (= (block (let ((x -42) (c false) (d 86)) "e") (add1 "x") (block "energy")) (fun5 (* "energy" 16) (let ((j 94)) 3) (isnum false) (block 22)))) (b (let ((g (block (set! a "x") (add1 "d") (let ((x true)) "x"))) (d (sub1 (* 90 -74))) (i (sub1 (- -78 -88)))) (= (block "d" false "e" "g") (let ((c "d")) "c"))))) (let ((a (+ (- "x" -60) (let ((a -34) (j 11)) 63)))) (let ((b (let ((e "energy") (j "b") (x "d")) false)) (f (let ((z "e") (y "z") (g "b")) "a"))) (let ((y 14) (e 86)) "y")))))))
(let ((h (let ((loop_var_26 -93)) (loop (if (> loop_var_26 (- -93 26)) (block (set! loop_var_26 (- loop_var_26 1)) (let ((x (block false (let ((y (fun1 (if true 10 64) (sub1 -85) (* -82 -41))) (e (sub1 (let ((z "y")) 28)))) (isnum "y")) (< (fun5 -63 (+ -35 -33) (= true false) 70) (let ((g (isnum true))) (let ((y -69) (e 40)) "e"))))) (z (let ((b (let ((f (block (our_code_starts_here -68 "x" 72 42 18 -63 69) (- 82 -31)))) (let ((a (set! f 96)) (j (* "a" 12))) (>= -92 49))))) (let ((c (set! x (- 97 -38))) (d "b") (j (let ((e (+ "c" "c")) (f (let ((a true) (h -20) (b -59)) false)) (d (let ((y "d")) "y"))) (block "c" false "e" "d" -79)))) (+ (let ((i input)) "i") "c"))))) (let ((d (let ((c 53) (e (>= (sub1 79) (set! c "c"))) (z (+ (set! x input) (+ 15 -85)))) (set! z (* -3 -49)))) (y 44) (j (let ((i (add1 (- -57 -85)))) (sub1 (let ((h "y") (d false) (a "x")) -33))))) (if (fun4 (fun5 "d" "j" "x" "z") (let ((h false) (g "j") (z false)) -61) false (set! x "x") (> "j" "z") (= "y" -37) (>= "y" -26) (>= "j" -21) "x") (block (let ((y true) (i false) (z false)) "y") (+ 53 9) (let ((a -28) (j 94)) true)) (>= (let ((h -5) (i 57) (a 6)) "j") (+ "j" "j"))))) (fun2 (- (block true (block (let ((g 61) (b -56) (e "g")) "b"))) (let ((f (block (fun2 -47 true true 2) (- -37 -85) (- 23 31))) (i (block (< input -44) (block -74 false "f")))) (add1 (* "i" 48)))) (< (* (let ((z (> -90 47)) (d (<= -14 -86)) (c (>= 81 -40))) input) (let ((a (+ 22 -33))) (set! a -62))) (fun1 (* (let ((b true) (g true)) 80) -37) (* 10 (add1 28)) (let ((a (main 7 89 -29)) (g (* -77 -46)) (x 80)) 12))) (let ((g true)) (let ((j (set! g (block "g" true 53 "g" false)))) "g")) (sub1 -85)) (fun2 (block (let ((i (fun3 (- -74 81) (let ((y 50)) 23) (fun5 -57 45 true -54) (let ((i true) (z "i") (a 76)) "a") (isnum false) (let ((d false) (g "d")) 17) (+ -26 -57) (+ -51 25) (+ 50 -79))) (f (isbool (set! i true)))) (sub1 (let ((f "f") (i "f") (x "f")) "i"))) (let ((d (= (fun2 input false true -60) (< -37 31))) (i (if (block false false 4) (isnum true) (main 18 -6 -69)))) (* (block true true -94 -99) (- 52 -85))) (block (let ((a (block false true)) (h (set! a "a")) (g "h")) (if "h" true true)) (+ (let ((b 65) (f false)) "b") (our_code_starts_here -19 true 7 -83 -31 72 -46)) (block (< -43 input) (isnum true) (block true 64 true false -82)))) (main (sub1 (* (let ((y -55) (d false)) "y") (let ((d false) (j "d") (y "j")) input))) (sub1 (+ (block false -36) 47)) (* (* (* -27 -16) (let ((z true)) -79)) (if (let ((a false)) input) (* -14 -94) (let ((e false) (a "e")) -53)))) (>= (block (main -34 (our_code_starts_here -54 false -89 1 -68 -25 -15) (block 97)) (- (* 90 46) (if input 4 -78)) 35 (let ((a (< 29 -82))) (let ((i -41) (g "a")) "i"))) (+ (let ((i (* 62 -52)) (x (<= -62 64)) (d (isnum "x"))) (let ((d false)) "i")) (let ((x (block 97 false false 12)) (h true) (g (<= -78 "x"))) "x"))) (sub1 (let ((a (fun2 -84 (block 49 true 23 true) (main 41 -68 82) (fun3 -38 37 51 34 true -49 -72 input 59)))) -17)))) (break (let ((y (fun2 (let ((z true) (x (sub1 (sub1 -88)))) (block (main 48 "x" "x") (<= 30 "x") (block "z") (sub1 -79) (block input "loop_var_26"))) (<= (+ (sub1 "loop_var_26") (+ "loop_var_26" 4)) (let ((f (>= "loop_var_26" "loop_var_26"))) (let ((c -55) (b "loop_var_26") (f "c")) -72))) (let ((j (= (>= "loop_var_26" "loop_var_26") (isnum false))) (y input) (i (if (isbool false) (* "y" 15) (add1 "loop_var_26")))) (let ((b (set! loop_var_26 "j")) (h (let ((h "b")) "y"))) (fun2 input "b" false "loop_var_26"))) (+ (block (* 92 "loop_var_26") (set! loop_var_26 -72)) (set! loop_var_26 (let ((z false) (b false) (f "loop_var_26")) -20))))) (b (block (set! y (let ((d (block "y"))) (set! y "y"))) (+ (* (fun1 24 input -73) (* input "loop_var_26")) "loop_var_26")))) (block (set! loop_var_26 (+ "y" (let ((e -50)) "e"))) (block (>= (set! b -37) -69)))))))))) (<= (block (- (set! h (block (set! h (block true -44 53 13)) (set! h (> 82 38)) (let ((loop_var_162 input)) (let ((loop_var_181 43)) (loop (if (> loop_var_181 (- 43 181)) (block (set! loop_var_181 (- loop_var_181 1)) 54 input -70) (break "loop_var_181"))))))) (let ((c (+ (let ((i 99)) (- 37 "i")) -55)) (j (let ((loop_var_20 (our_code_starts_here -86 true "c" "c" 75 "c" -38))) (let ((loop_var_74 (+ -60 "c"))) (let ((loop_var_84 (sub1 86))) (loop (if (> loop_var_84 (- (sub1 86) 84)) (block (set! loop_var_84 (- loop_var_84 1))) (break (let ((h "h")) input)))))))) (e (let ((loop_var_31 (add1 -25))) (loop (if (> loop_var_31 (- (add1 -25) 31)) (block (set! loop_var_31 (- loop_var_31 1))) (break (isbool false))))))) (let ((loop_var_11 (our_code_starts_here "j" false 27 66 8 -48 input))) (loop (if (> loop_var_11 (- (our_code_starts_here "j" false 27 66 8 -48 input) 11)) (block (set! loop_var_11 (- loop_var_11 1))) (break "c"))))))) (- (let ((loop_var_180 (set! h 14))) (let ((loop_var_33 (set! h -89))) (loop (if (< loop_var_33 (+ (set! h -89) 33)) (block (set! loop_var_33 (+ loop_var_33 1)) (set! h -91) (* (* -22 (set! h -96)) (if "h" (add1 -67) (block "h" true 84 -47))) (let ((h (block (<= 43 -34)))) (fun1 78 (sub1 39) (- -52 -44))) (* (our_code_starts_here (if 37 88 -80) true (let ((y "h")) 51) (block -6 -57 79 input) 13 (let ((f -4) (j false) (e "f")) 19) (let ((y 52) (x "h")) "y")) (set! h (set! h -93)))) (break (+ (set! h (* "loop_var_33" "loop_var_33")) (* "loop_var_33" (let ((c true) (a 93)) "a")))))))) (set! h (- (let ((c (let ((d (let ((z "h") (c 72)) -62))) (<= "d" 68))) (d true)) (block (add1 28) (+ -37 -30) (- 10 7) (>= 8 -21) (let ((h "h")) 86))) (fun3 (block (* -51 72) (<= -64 -1) (let ((d -19) (a "h") (y false)) "d") (let ((loop_var_49 -46)) (loop (if (< loop_var_49 (+ -46 49)) (block (set! loop_var_49 (+ loop_var_49 1)) (set! h true) true true) (break "h")))) 71) (let ((g -17) (d (let ((i "g") (e "h")) 84)) (j (set! d false))) (sub1 input)) (let ((i (block "h")) (c (let ((e false) (h -9)) "h")) (d (+ -18 44))) (let ((c "i")) -80)) (block (* -58 47)) (let ((loop_var_129 17)) (loop (if (< loop_var_129 (+ 17 129)) (block (set! loop_var_129 (+ loop_var_129 1)) (set! h false) (set! h "h") (set! h "h")) (break false)))) (let ((loop_var_39 -49)) (loop (if (> loop_var_39 (- -49 39)) (block (set! loop_var_39 (- loop_var_39 1)) 57 -65 -9) (break 26)))) (* (+ -70 -15) (block false -7 true -82)) (add1 -22) (let ((loop_var_24 -68)) (loop (if (< loop_var_24 (+ -68 24)) (block (set! loop_var_24 (+ loop_var_24 1)) (set! h 71) (set! h 4) (set! h -36) -87 -95 8) (break "loop_var_24"))))))))))