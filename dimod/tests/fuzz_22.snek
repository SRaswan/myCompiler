(fun (our_code_starts_here energy d a z g y b j i) (if (<= energy 0) 39 (block (set! energy (- energy 1)) (let ((j (< (block (* 84 56)) (let ((a (block false false))) (- "a" -51))))) (+ (block (add1 -3) (+ "d" "g") (block "i" "i" -24 "energy") (let ((g -57)) true) (+ "a" -14)) (block (- -41 92) (sub1 "b") (* -69 "d")))))))
(fun (main energy x j z a) (if (<= energy 0) false (block (set! energy (- energy 1)) (isbool (block (set! j (block -61 true -72)) (> (let ((d "j")) "x") (block 5)) (block -30 (= false true) -75 (let ((y true) (b "x")) "a")))))))
(fun (fun1 energy a b h x c f) (if (<= energy 0) 81 (block (set! energy (- energy 1)) (- -98 (+ (let ((z (block 47 "c" "c" 55)) (f (let ((g "a") (d "z") (z "h")) true)) (c (block false "c" -27))) (* "b" "energy")) (fun1 (let ((i "f") (j "b") (e "f")) -99) (set! c "a") (let ((x "c")) "c") (block 72 93) (set! f true) (>= "b" "energy") (> -35 "b")))))))
(fun (fun2 energy g) (if (<= energy 0) -71 (block (set! energy (- energy 1)) (- (set! g (let ((f (if 1 true true)) (x (block "f" true false))) (our_code_starts_here -23 -6 "f" "energy" "energy" -44 "g" "f" true))) (add1 (- (* "g" -76) (let ((y true)) "g")))))))
(fun (fun3 energy y a) (if (<= energy 0) true (block (set! energy (- energy 1)) (let ((y (block (block (fun2 -79 false) (block "a" "energy" "energy" false false)) (> (let ((j true) (x false) (f true)) "energy") (add1 "y")) (block (set! a false) (block false "energy" false) (if 56 "energy" "y") (let ((z 9)) true)))) (h (let ((f (* (- -62 "a") (let ((d true) (a 28) (e 40)) "e"))) (z (block (let ((j "a") (e 71) (c "y")) "y") (fun5 "a" "y" "y" "y" false "y" "y" "f") (let ((f true) (j "energy") (y "y")) "j") (block false))) (g (sub1 (- -21 "energy")))) (block (if "z" "f" 73)))) (f "y")) true))))
(fun (fun4 energy h x y d i c) (if (<= energy 0) true (block (set! energy (- energy 1)) (isnum (set! x true)))))
(fun (fun5 energy i j y e h g a) (if (<= energy 0) false (block (set! energy (- energy 1)) (block (<= (add1 (let ((f 60) (x 34)) "i")) (block (set! j false) (set! g -16) (- -67 "energy"))) (>= (* 55 (* "energy" "energy")) (* (block "i" false -16 -4) (* "energy" "i")))))))
(let ((loop_var_128 (block true 72 -27))) (loop (if (< loop_var_128 (+ (block true 72 -27) 128)) (block (set! loop_var_128 (+ loop_var_128 1)) (block (block (block (- (* (let ((f false) (g false) (j -66)) "j") (+ -22 -5)) -14) (fun3 (add1 (let ((a input) (b "a")) 37)) -24 (let ((g (block false 89)) (e (set! g "g")) (y (set! e -25))) (block -44 -81 "y"))) (add1 (+ (fun1 -63 -34 false -20 true true true) (fun1 81 17 false 10 true true true))) (isnum (isnum (let ((j 79) (h 42) (x input)) true)))) (< (* (add1 (fun2 76 false)) (our_code_starts_here (* -100 73) (our_code_starts_here -37 -26 true -65 -39 78 9 true false) (let ((h 72)) true) (if input -71 -50) (block false 76 true -5) (* 100 -21) (block -47 98 35) (isnum true) (fun5 -71 true true false false false true 94))) (add1 (our_code_starts_here (let ((z false) (e "z")) 95) (block input -70) (> -66 -56) (block 59) (* -97 -16) (block -86) (* -19 56) true false))) (let ((f (if (> (add1 -34) (* 8 -91)) (let ((c (block false true)) (a (block -34)) (y (<= "a" 69))) (let ((d "a") (x "d") (g input)) false)) true)) (b (- (let ((g (let ((f -22) (x "f") (j "f")) "x")) (j "g") (d (if "f" "f" true))) "j") (block (set! f false) (block false -93 37 54) (our_code_starts_here 18 36 true -29 -22 -75 87 "f" "f") (block 50) (add1 10))))) (set! f (<= (add1 -81) (- "b" "b"))))) (block (+ (+ 68 (add1 (if false -3 -28))) (let ((d (let ((j (let ((j true) (a input)) "a")) (f (main -54 false -42 "j" -53))) (set! j "j")))) (set! d (* 78 -59)))) -60) (let ((f (let ((f (block (+ 6 (let ((i true) (e -65)) "e")) (if (let ((j false) (x true) (b -23)) "b") (let ((b 69) (z true) (h "z")) "b") (let ((y 9)) 40)) (let ((a (fun1 -93 -60 true 33 true false true))) (block true 53)))) (h (let ((x (set! f (block false input false))) (i (block (block "x" "f") (set! x "f") (set! x 5) (block "x" "x") (let ((y "x") (x "y") (z false)) "x"))) (g (>= (block "i" 54) (+ -30 -90)))) "g"))) (+ (let ((x (<= 48 "f"))) (let ((z "f") (a "z") (h false)) -47)) (block (block "h" false "f" "h" "h") (set! h false) (>= 13 6) (= 41 "f") (if -27 29 -34)))))) (set! f (block (> (let ((y "f")) "f") (our_code_starts_here -42 -65 false 99 -8 "f" 43 false true)) (- (let ((g -7)) "g") (<= -3 31)))))) (fun1 30 (+ (sub1 (* (let ((f (let ((a true) (g -62) (x -54)) "x"))) (let ((g false)) -50)) (sub1 (let ((x false) (f 48)) -9)))) (our_code_starts_here 44 (let ((f (main (- 39 96) false (block 28 true 16 99) (>= -1 -13) (- 39 30)))) (- "f" (sub1 43))) (<= (* (if -4 93 -82) (- 13 69)) (sub1 (if true -76 -48))) 69 1 (if (< (let ((y input) (z -100)) 91) (add1 14)) (fun1 (let ((g -35) (i true)) 96) (+ -29 27) (> 5 -9) (let ((d -22) (z "d")) 2) (<= -73 12) (if false false false) (>= -100 42)) (let ((d (< -15 47))) 94)) (block (let ((y (- -6 -75)) (a (fun2 43 false)) (x (let ((f "a") (j "a") (i "y")) "y"))) (fun3 "x" -28 "y")) (main (block true 37) (let ((f 49)) false) (our_code_starts_here -54 -18 false -80 54 -24 -48 true false) (block false) (* -99 13)) (let ((d (block -68 100)) (z (< "d" "d"))) (set! d "d"))) (fun3 (let ((j (fun1 -55 -30 input -59 true false false)) (b (let ((z true)) "z"))) 81) (if (<= 3 62) (block -75 true 91) (our_code_starts_here 18 52 true 75 -75 -2 76 false false)) -85) (main (* -17 (* 96 85)) (= (if 0 82 -56) (add1 -19)) (let ((b (isbool false)) (y (let ((x 68) (y true) (j 70)) "b")) (g (let ((a true)) -62))) (block "g" -39 -96 -61)) (if (let ((y -81) (h true) (b "h")) 76) (if true false true) (let ((x 19) (b 59) (d "b")) true)) (+ (- 50 -38) (fun1 4 72 true -20 true true true))))) (block (if (block true) input false) (let ((x 12)) (set! x (block (isbool false) (* 54 56) (set! x -68)))) (block (+ (add1 (if -94 78 -37)) (add1 (add1 -21))) (fun1 (our_code_starts_here (block true true 80 94) (block -8 true true 5) false (sub1 100) -48 (block 2 -35 67 -29) (+ -79 71) (isnum input) false) (if 57 (add1 23) (block -21)) (let ((y false)) (block 83 true -57 30 true)) (let ((x false)) (+ -72 -67)) (let ((f (let ((g false)) -12)) (e (set! f "f"))) (let ((d true)) "d")) (let ((i (block 31 -28 true false 18))) (let ((y true) (e false)) "e")) (block (let ((x 53) (a false) (b true)) true) (isnum true))) (fun3 (let ((j (block 29 96 -11 41 true)) (z (set! j -69)) (e (- "z" -3))) (let ((e input)) 77)) (add1 (- 90 -57)) (* (let ((h false) (d 77)) -71) (fun2 13 true))) (> (+ (let ((h 52)) 20) (let ((f false)) 18)) (let ((x (our_code_starts_here 59 98 false 61 -17 -18 6 true true)) (z -33)) (+ "z" "z")))) (let ((f (fun1 (let ((e (fun1 81 1 false -27 true true false))) (let ((a 17)) "e")) -49 (isnum (let ((d 5) (c true) (g false)) false)) (- (* 82 -77) (let ((d 75) (i "d")) "d")) true (> (add1 -55) (let ((i -11) (h false)) 49)) (< (- 13 63) (block 52 false 72))))) true) (let ((j (let ((j -62) (d (let ((h (> "j" -45))) (fun2 93 "h")))) (set! j (block "j" false true 62)))) (i (- (set! j (- "j" -95)) (block (set! j false) (let ((b input)) -22) (set! j true) (= false false) (block "j" true 9))))) true)) (sub1 -57) false (>= -90 (if (let ((d (>= (sub1 -14) (block true false -55 39))) (x (< (let ((i "d")) 14) (+ 43 66)))) (fun1 (set! d 24) (set! d -77) (isnum true) (our_code_starts_here -47 86 "d" 79 -4 -19 -49 true "x") (fun5 55 "d" true true false true "d" 73) (let ((d true) (z -31) (e "d")) true) (main 54 "x" -84 false 85))) (fun1 (sub1 (block -40 86)) (- (fun2 -99 false) (let ((i true) (a "i")) -53)) (let ((b (block -5 26))) (block "b" 98 true -98 false)) (block (* -78 45) (+ -21 94)) (block (if -56 -99 76) (+ 51 98) (* -40 -20) (< -42 -80)) (block (* 5 9) (= true false) (if -36 -2 92) (block false false) (if input input true)) (fun5 (* -19 -46) (let ((c -60)) false) (block false true) (= 11 -94) (= -74 22) (let ((a 74) (f true)) false) (< -53 -31) (block 65))) (block (let ((j (isbool false)) (b (block 25))) (= -11 "b")) (add1 (+ -50 94))))) false) (isbool (<= (block (let ((b (= (isbool false) (fun3 12 -42 82))) (j (isnum (let ((y true) (x "y")) input)))) (let ((c (sub1 -9)) (g input) (y (block -47 "j" -75 "g"))) (isnum "y"))) (+ (if (* 6 7) 97 (fun2 -18 false)) (block (fun4 84 false 100 false true false true) (< -78 50) (block true input true -28)))) (- (let ((b (isnum (let ((c true)) true))) (y (set! b (let ((b false)) "b"))) (z (<= 1 (let ((z "y")) 53)))) 49) (our_code_starts_here (add1 (if false -1 1)) (* (let ((d false)) -75) (let ((g -22) (x true) (y "g")) "g")) (>= (block 76 true -25 -58) (block -66)) (+ (* 0 -71) (- 9 87)) (let ((b (block input false -84 -47)) (c (- -15 57))) (block false 34 46)) (+ (- -21 -91) (fun1 -44 -38 true 62 true true false)) (fun1 (+ -83 -90) 74 (isbool true) (block input 16 -50 -9) (block false) (block -55 true) false) (> (if true 96 81) (our_code_starts_here 68 -1 true -96 91 93 -81 true true)) (isbool false)))))) (break (block (- (block (set! loop_var_128 (block (block "loop_var_128" false))) (* (let ((g (set! loop_var_128 "loop_var_128")) (d (let ((y 7) (a 27) (h false)) "h"))) (* "g" -38)) (sub1 (add1 -81)))) (fun1 (let ((b (block (let ((y "loop_var_128") (i false)) false) (let ((z "loop_var_128")) false))) (d (let ((f (let ((z "b") (g "z") (h true)) 91)) (g (sub1 "f"))) (let ((z false) (y "z") (a "g")) -18)))) (- (let ((y false) (c "loop_var_128") (j "loop_var_128")) 5) (+ "loop_var_128" 41))) (sub1 (sub1 (- 89 7))) (< (let ((j (let ((h false) (e "h")) "loop_var_128")) (f "j") (b (let ((d -57) (y "d") (e false)) "e"))) "f") (our_code_starts_here (+ "loop_var_128" "loop_var_128") (set! loop_var_128 79) (<= -33 "loop_var_128") (- 33 "loop_var_128") (let ((e false) (x false) (z "loop_var_128")) "loop_var_128") (block true "loop_var_128" "loop_var_128" "loop_var_128") (- "loop_var_128" -97) false (isnum false))) (our_code_starts_here (add1 (block false 24)) (* (set! loop_var_128 "loop_var_128") (block true -54 true -28 "loop_var_128")) (let ((j (block false input true true))) (fun3 -26 "loop_var_128" "loop_var_128")) (let ((z (let ((f true) (g "loop_var_128")) "f"))) (- "loop_var_128" "loop_var_128")) "loop_var_128" (let ((f (>= "loop_var_128" -77)) (i (block "loop_var_128" "loop_var_128" -5))) (set! i 62)) (block (block false) (* "loop_var_128" -85)) (isnum (let ((d "loop_var_128") (y false) (a true)) "a")) (>= (* "loop_var_128" -79) 74)) (block (let ((d (set! loop_var_128 "loop_var_128"))) (- "loop_var_128" "loop_var_128")) (let ((a (let ((a "loop_var_128") (e true) (j "loop_var_128")) true)) (c (let ((f "a") (x -79)) "loop_var_128"))) (* "c" 88)) (<= (block -54 true "loop_var_128") (+ -46 93)) "loop_var_128" (if (let ((b false) (d "loop_var_128")) "b") (< -35 "loop_var_128") (let ((x "loop_var_128") (i false)) true))) (>= (block (let ((a -43) (h true) (i "h")) "a") (block -16 false) (fun2 -78 true)) (+ (block false true "loop_var_128") (- -51 "loop_var_128"))) (fun4 (set! loop_var_128 (sub1 "loop_var_128")) (>= (sub1 -49) (sub1 "loop_var_128")) (- (add1 12) (* "loop_var_128" 25)) (let ((f (let ((a false) (y "a") (j -96)) "loop_var_128")) (y (<= "loop_var_128" "f"))) (let ((h "f")) "y")) (fun4 (* "loop_var_128" "loop_var_128") (> "loop_var_128" "loop_var_128") (let ((y true)) -4) (block "loop_var_128" true false true) (set! loop_var_128 true) false (let ((g -94)) true)) (isbool (block "loop_var_128" "loop_var_128" 17 false)) (block (let ((e "loop_var_128")) true))))) (set! loop_var_128 (block (> (* (+ "loop_var_128" "loop_var_128") (* "loop_var_128" 70)) (set! loop_var_128 -5)))) (set! loop_var_128 "loop_var_128") (main (set! loop_var_128 (* "loop_var_128" (block (let ((g -70) (j false) (a true)) -48) (let ((g "loop_var_128") (a 25)) 10)))) (block (block (set! loop_var_128 (let ((d true) (z true) (h "loop_var_128")) true)) (if (let ((f true) (g "loop_var_128")) "g") (* "loop_var_128" 95) (let ((h "loop_var_128") (x "h") (a 65)) -7)) (block (add1 90) (block false "loop_var_128" "loop_var_128" false)) (set! loop_var_128 (if "loop_var_128" true false)) (let ((g (> "loop_var_128" 0)) (y (* -76 26))) (let ((b "y") (i "g")) "g"))) (isbool (let ((e (* -66 -93)) (j (+ "e" "e")) (c true)) (< "e" "loop_var_128"))) (let ((b (block (let ((h input) (g "loop_var_128")) "h") (block input "loop_var_128")))) (isbool (let ((i false) (x "loop_var_128")) "i")))) (block (block (isnum (block "loop_var_128" false true true true)) (block (add1 -66) (block 42 80 12) (let ((y -92) (g "loop_var_128") (d true)) "y") (> -99 "loop_var_128")) (block (let ((c 55) (d -15)) 80) (set! loop_var_128 true) (block "loop_var_128" true -83) (= "loop_var_128" 52)) (set! loop_var_128 (block -21 input -79 true)) "loop_var_128") (sub1 (set! loop_var_128 (block false "loop_var_128")))) (< "loop_var_128" "loop_var_128") (let ((j (isbool (isbool (< "loop_var_128" 71)))) (y (block (+ (let ((z "loop_var_128") (f false)) 87) (let ((b -24) (z false)) "b")) -58 (block (fun2 -60 true) (let ((x "loop_var_128") (c "j")) "x"))))) (- (+ (- 39 -62) (if -19 "y" "loop_var_128")) (sub1 (our_code_starts_here -81 "loop_var_128" "j" "y" "loop_var_128" -49 "y" true true))))) true)))))