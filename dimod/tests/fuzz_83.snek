(fun (our_code_starts_here energy b y e f z) (if (<= energy 0) -86 (block (set! energy (- energy 1)) (- (+ (if (let ((z "e") (x "energy") (g "z")) 34) (let ((g -19) (d "e")) "b") (block "e" -26)) (- (block 15 false "b" -46) (if "e" 91 "z"))) (* (- (set! b "y") 31) (fun5 (set! z "y") (let ((d true)) "z")))))))
(fun (main energy h j c d x z g) (if (<= energy 0) true (block (set! energy (- energy 1)) (isbool true))))
(fun (fun1 energy d y f i e x b) (if (<= energy 0) true (block (set! energy (- energy 1)) true)))
(fun (fun2 energy e c h x f) (if (<= energy 0) -72 (block (set! energy (- energy 1)) (block (block (fun1 (block 12 "c" false "x") false (> "f" "energy") (block "energy" true -80) (block "x" true false "f") (let ((e true)) 12) (set! energy "f") (let ((z 80) (c -82) (e "c")) false)) (block (> -20 "e") (let ((b true) (z false)) "e") (set! e -9)) (set! energy (let ((i false)) false)) (set! f (set! e "h"))) 26 "c" (let ((z (set! c (set! c "x")))) (- (let ((c true) (d true) (f 12)) 12) (add1 13)))))))
(fun (fun3 energy h j g b) (if (<= energy 0) 22 (block (set! energy (- energy 1)) (fun7 energy (add1 (+ (- "h" 12) (- 84 18))) (isbool (block "b" (set! b -42) (isbool true) (block 30 "g" -50 -48 false))) (isbool (isnum (set! energy "b")))))))
(fun (fun4 energy f x a z d) (if (<= energy 0) true (block (set! energy (- energy 1)) (< (* (* (block -1) (- 65 44)) (let ((h (set! z "energy"))) (let ((x false) (e -97)) "energy"))) (sub1 (sub1 (our_code_starts_here -79 -90 false -1 -29 "a")))))))
(fun (fun5 energy g) (if (<= energy 0) -1 (block (set! energy (- energy 1)) (set! g (let ((d (- (+ "g" "energy") (add1 "g")))) (* (set! energy -33) (let ((f -62) (d true)) -75)))))))
(fun (fun6 energy i b) (if (<= energy 0) 97 (block (set! energy (- energy 1)) (set! b (block (block (* "b" "i") (+ 58 -59) 0 (* "i" "energy")) (let ((j (block 100 -64 "b" false "b")) (y (isbool false))) (set! energy false)) (add1 (block false -87 false -62 "i")) (let ((y (<= -77 3)) (c (= "y" "y"))) (let ((f true) (d "energy")) "f")) (set! i -31))))))
(fun (fun7 energy x c a) (if (<= energy 0) -56 (block (set! energy (- energy 1)) (block (block (set! c "energy") (sub1 (add1 "x")) (isnum (let ((b "a")) "a"))) (let ((c (fun4 (* 9 17) true (block "a" 56 true 22) (let ((i "a")) false) (block true "energy" 34 -11 14) (fun3 -74 -23 "c" "a" -82))) (z (fun1 (let ((e true) (i -10) (y "e")) -99) (block "energy" "a") (let ((j 63)) "a") (let ((h "x")) "energy") (+ -49 "x") (+ 42 "x") (set! c "c") false))) (set! c -17)) (let ((e (block (let ((g true) (y true) (z "g")) false) (- -13 -98) (let ((y -4) (f "c")) false) (block "x" "a"))) (f (- (sub1 -4) (set! a -2))) (a -64)) (set! a (< -77 "a"))) (* -31 (sub1 (block "a" false "c" -43)))))))
(<= false (let ((a (let ((f (>= (sub1 (let ((loop_var_66 (let ((e 100) (a "e")) input))) (let ((loop_var_139 -18)) (loop (if (> loop_var_139 (- -18 139)) (block (set! loop_var_139 (- loop_var_139 1))) (break (fun2 43 "loop_var_139" -43 "loop_var_139" 29 "loop_var_139"))))))) (block (>= (- (let ((loop_var_137 -67)) (let ((loop_var_180 97)) (loop (if (< loop_var_180 (+ 97 180)) (block (set! loop_var_180 (+ loop_var_180 1)) 70) (break "loop_var_180"))))) (let ((i -32)) "i")) (sub1 (+ -72 72))) (+ (block (let ((loop_var_100 -80)) (loop (if (< loop_var_100 (+ -80 100)) (block (set! loop_var_100 (+ loop_var_100 1))) (break 55))))) (let ((i (block 71 true 42 33 false)) (c (block "i" 82 -63 "i" 5))) (let ((x "c") (d true)) -10))))))) (<= (let ((loop_var_111 (* -57 -34))) (loop (if (> loop_var_111 (- (* -57 -34) 111)) (block (set! loop_var_111 (- loop_var_111 1)) (block (let ((c false) (e -45)) "c") (let ((c false) (d false) (a -70)) false) (block -55 -52 "f" "f" "f") (block 18 62 39 8 -7)) 82 (let ((y (+ 31 -71)) (c (block false))) (set! f 8))) (break (- (add1 "loop_var_111") (fun2 -66 -63 73 "loop_var_111" "loop_var_111" "loop_var_111")))))) (let ((loop_var_163 (+ -88 5))) (loop (if (> loop_var_163 (- (+ -88 5) 163)) (block (set! loop_var_163 (- loop_var_163 1)) (set! f (set! f (let ((y false) (j 82)) -29)))) (break (let ((z (>= "loop_var_163" -7))) (let ((d 38)) input))))))))) (x (block (let ((b (isnum (> (* 25 (block "a" -76)) (* (let ((b 100) (f false)) "b") (block -68 -93 23))))) (z (let ((z (let ((a (block (isbool "a") (let ((loop_var_6 77)) (let ((loop_var_24 -41)) (let ((loop_var_191 -2)) (loop (if (< loop_var_191 (+ -2 191)) (block (set! loop_var_191 (+ loop_var_191 1)) (set! b false) (set! a false)) (break "b")))))) (<= -19 33) (isbool false))) (g (let ((d true) (h (block -66 false -100))) true))) (let ((y (+ -11 -86)) (i (let ((b -24) (d true) (z "y")) "z"))) (let ((loop_var_54 57)) (let ((loop_var_74 "i")) (let ((loop_var_109 "y")) (loop (if (> loop_var_109 (- "y" 109)) (block (set! loop_var_109 (- loop_var_109 1)) (set! y "a") (set! i false) "g") (break "a"))))))))) (f (let ((loop_var_197 (let ((y -84) (e "y")) input))) (loop (if (> loop_var_197 (- (let ((y -84) (e "y")) input) 197)) (block (set! loop_var_197 (- loop_var_197 1)) (set! b (isnum "b")) (set! b (<= -27 -69)) (set! b (if -92 false false))) (break (let ((g "loop_var_197")) "a"))))))) (>= (set! a (let ((loop_var_88 43)) (loop (if (< loop_var_88 (+ 43 88)) (block (set! loop_var_88 (+ loop_var_88 1))) (break -24))))) (let ((g (sub1 -20)) (j (set! a false)) (f (let ((loop_var_109 "g")) (loop (if (> loop_var_109 (- "g" 109)) (block (set! loop_var_109 (- loop_var_109 1)) -45 "g" "g") (break "g")))))) (set! z "f"))))) (e (* (set! b (- (sub1 input) (block input false 16 71))) (block (set! b (let ((c true) (e false)) -32)) (let ((h (let ((c "a")) 85)) (d (fun4 "h" "b" -22 true "h" -56)) (i 32)) (let ((loop_var_147 "d")) (loop (if (< loop_var_147 (+ "d" 147)) (block (set! loop_var_147 (+ loop_var_147 1)) (set! b 50) (set! a "d") (set! h 69) 25) (break "d"))))) (+ (+ -87 -32) (block -50 77)) (* (let ((j 32)) "j") (let ((h -19) (i 4) (b "h")) "b")) (let ((h (+ -11 -86))) (if -100 "h" "h")))))) (< (let ((f "a") (x (* (block -64 "e") (let ((x "e")) "e")))) (add1 input)) -39)) (block (let ((loop_var_20 (our_code_starts_here 5 -100 "a" 64 72 31))) (loop (if (< loop_var_20 (+ (our_code_starts_here 5 -100 "a" 64 72 31) 20)) (block (set! loop_var_20 (+ loop_var_20 1)) (* (our_code_starts_here -47 -3 "a" -43 56 -61) (let ((a -28) (d "a")) "a")) (let ((j (add1 100)) (a "j") (i (let ((b true) (g "j") (e "b")) input))) (* input "i"))) (break (let ((i (* "loop_var_20" "loop_var_20")) (g (>= -5 -39)) (a (set! a "g"))) (let ((z "i")) 26)))))) -59 (let ((c (isnum (> (let ((loop_var_39 input)) (loop (if (> loop_var_39 (- input 39)) (block (set! loop_var_39 (- loop_var_39 1)) (set! a 73) (set! a -23) (set! a 48)) (break 95)))) (- 53 -34))))) (let ((j false) (d (- (- 74 95) 64)) (e "c")) (block (+ "d" 27) (block false "d" "d")))) (block (let ((f (let ((i (+ 4 -62)) (j (let ((d "a") (b "i") (h true)) true)) (g (> "i" "i"))) (block 86)))) (let ((loop_var_81 "f")) (let ((loop_var_18 input)) (let ((loop_var_115 "f")) (loop (if (< loop_var_115 (+ "f" 115)) (block (set! loop_var_115 (+ loop_var_115 1)) (set! a "f") (set! f "f") input input) (break 12))))))) (add1 (let ((loop_var_175 -28)) (let ((loop_var_51 -86)) (loop (if (> loop_var_51 (- -86 51)) (block (set! loop_var_51 (- loop_var_51 1)) (set! a -50) (set! a 58) (set! a 20) -30 -36) (break 5)))))) (isnum (set! a (> -27 -92))) (block (block (add1 input) (block "a" -46 "a" 37 77)) (sub1 (let ((g "a")) -78)) (fun4 (let ((g 48)) -72) (let ((z -50) (g -29) (i false)) "a") 63 "a" (let ((loop_var_152 88)) (loop (if (> loop_var_152 (- 88 152)) (block (set! loop_var_152 (- loop_var_152 1)) (set! a -19)) (break "loop_var_152")))) (if -15 38 20)) (isnum (let ((b -53)) "a")))))))) (add1 (block (let ((loop_var_173 (+ -65 73))) (loop (if (> loop_var_173 (- (+ -65 73) 173)) (block (set! loop_var_173 (- loop_var_173 1))) (break (let ((b (sub1 "loop_var_173"))) (fun6 "b" "loop_var_173" "b"))))))))))